@import '../_classic_only';

@include describe('9.Filters') {
  @include describe('Grayscale') {
    @include describe('Basic') {
      @include it('grayscale-0') {
        @include assert {
          @include output {
            @include grayscale-0;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            filter: grayscale(0);
          }
        }
      }

      @include it('grayscale') {
        @include assert {
          @include output {
            @include grayscale;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            filter: grayscale(100%);
          }
        }
      }
    }

    @include describe('Rwd') {
      @include it('sm\:grayscale-0') {
        @include assert {
          @include output {
            @include sm\:grayscale-0;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: grayscale(0);
            }
          }
        }
      }

      @include it('sm\:grayscale') {
        @include assert {
          @include output {
            @include sm\:grayscale;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: grayscale(100%);
            }
          }
        }
      }

      @include it('md\:grayscale-0') {
        @include assert {
          @include output {
            @include md\:grayscale-0;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: grayscale(0);
            }
          }
        }
      }

      @include it('md\:grayscale') {
        @include assert {
          @include output {
            @include md\:grayscale;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: grayscale(100%);
            }
          }
        }
      }

      @include it('lg\:grayscale-0') {
        @include assert {
          @include output {
            @include lg\:grayscale-0;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: grayscale(0);
            }
          }
        }
      }

      @include it('lg\:grayscale') {
        @include assert {
          @include output {
            @include lg\:grayscale;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: grayscale(100%);
            }
          }
        }
      }

      @include it('xl\:grayscale-0') {
        @include assert {
          @include output {
            @include xl\:grayscale-0;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: grayscale(0);
            }
          }
        }
      }

      @include it('xl\:grayscale') {
        @include assert {
          @include output {
            @include xl\:grayscale;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: grayscale(100%);
            }
          }
        }
      }

      @include it('2xl\:grayscale-0') {
        @include assert {
          @include output {
            @include \2xl\:grayscale-0;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_2xl) {
              filter: grayscale(0);
            }
          }
        }
      }

      @include it('2xl\:grayscale') {
        @include assert {
          @include output {
            @include \2xl\:grayscale;
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_2xl) {
              filter: grayscale(100%);
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('grayscale-(50%)') {
        @include assert {
          @include output {
            @include grayscale-(50%);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            filter: grayscale(50%);
          }
        }
      }

      @include it('sm\:grayscale-(50%)') {
        @include assert {
          @include output {
            @include sm\:grayscale-(50%);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: grayscale(50%);
            }
          }
        }
      }

      @include it('md\:grayscale-(50%)') {
        @include assert {
          @include output {
            @include md\:grayscale-(50%);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: grayscale(50%);
            }
          }
        }
      }

      @include it('lg\:grayscale-(50%)') {
        @include assert {
          @include output {
            @include lg\:grayscale-(50%);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: grayscale(50%);
            }
          }
        }
      }

      @include it('xl\:grayscale-(50%)') {
        @include assert {
          @include output {
            @include xl\:grayscale-(50%);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: grayscale(50%);
            }
          }
        }
      }

      @include it('2xl\:grayscale-(50%)') {
        @include assert {
          @include output {
            @include \2xl\:grayscale-(50%);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_2xl) {
              filter: grayscale(50%);
            }
          }
        }
      }
    }
  }
}
