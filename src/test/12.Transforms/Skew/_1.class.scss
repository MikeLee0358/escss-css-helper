@use '../../mode0' as *;
@use 'true' as *;

// private member(prefix - or _) can't be imported, so I put here for testing

@mixin -skew-x-0 {
  $tw-skew-x: -0deg !global;
  transform: get_transform();
}

@mixin -skew-y-0 {
  $tw-skew-y: -0deg !global;
  transform: get_transform();
}

@mixin -skew-x-1 {
  $tw-skew-x: -1deg !global;
  transform: get_transform();
}

@mixin -skew-y-1 {
  $tw-skew-y: -1deg !global;
  transform: get_transform();
}

@mixin -skew-x-2 {
  $tw-skew-x: -2deg !global;
  transform: get_transform();
}

@mixin -skew-y-2 {
  $tw-skew-y: -2deg !global;
  transform: get_transform();
}

@mixin -skew-x-3 {
  $tw-skew-x: -3deg !global;
  transform: get_transform();
}

@mixin -skew-y-3 {
  $tw-skew-y: -3deg !global;
  transform: get_transform();
}

@mixin -skew-x-6 {
  $tw-skew-x: -6deg !global;
  transform: get_transform();
}

@mixin -skew-y-6 {
  $tw-skew-y: -6deg !global;
  transform: get_transform();
}

@mixin -skew-x-12 {
  $tw-skew-x: -12deg !global;
  transform: get_transform();
}

@mixin -skew-y-12 {
  $tw-skew-y: -12deg !global;
  transform: get_transform();
}

@mixin -skew-x-($v) {
  $tw-skew-x: -$v !global;
  @include transform(get_transform());
}

@mixin -skew-y-($v) {
  $tw-skew-y: -$v !global;
  @include transform(get_transform());
}

@include describe('12.Transforms') {
  @include describe('Skew') {
    @include describe('Basic') {
      @include it('skew-x-0') {
        @include assert {
          @include output {
            @include skew-x-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-y-0') {
        @include assert {
          @include output {
            @include skew-y-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-x-1') {
        @include assert {
          @include output {
            @include skew-x-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-y-1') {
        @include assert {
          @include output {
            @include skew-y-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-x-2') {
        @include assert {
          @include output {
            @include skew-x-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-y-2') {
        @include assert {
          @include output {
            @include skew-y-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-x-3') {
        @include assert {
          @include output {
            @include skew-x-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-y-3') {
        @include assert {
          @include output {
            @include skew-y-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-x-6') {
        @include assert {
          @include output {
            @include skew-x-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-y-6') {
        @include assert {
          @include output {
            @include skew-y-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-x-12') {
        @include assert {
          @include output {
            @include skew-x-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-y-12') {
        @include assert {
          @include output {
            @include skew-y-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-x-0') {
        @include assert {
          @include output {
            @include -skew-x-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-y-0') {
        @include assert {
          @include output {
            @include -skew-y-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-x-1') {
        @include assert {
          @include output {
            @include -skew-x-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-y-1') {
        @include assert {
          @include output {
            @include -skew-y-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-x-2') {
        @include assert {
          @include output {
            @include -skew-x-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-y-2') {
        @include assert {
          @include output {
            @include -skew-y-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-x-3') {
        @include assert {
          @include output {
            @include -skew-x-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-y-3') {
        @include assert {
          @include output {
            @include -skew-y-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-x-6') {
        @include assert {
          @include output {
            @include -skew-x-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-y-6') {
        @include assert {
          @include output {
            @include -skew-y-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-x-12') {
        @include assert {
          @include output {
            @include -skew-x-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-y-12') {
        @include assert {
          @include output {
            @include -skew-y-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg)
              scaleX(1) scaleY(1);
          }
        }
      }
    }

    @include describe('Rwd') {
      @include it('sm\:skew-x-0') {
        @include assert {
          @include output {
            @include sm\:skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-y-0') {
        @include assert {
          @include output {
            @include sm\:skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-x-1') {
        @include assert {
          @include output {
            @include sm\:skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-y-1') {
        @include assert {
          @include output {
            @include sm\:skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-x-2') {
        @include assert {
          @include output {
            @include sm\:skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-y-2') {
        @include assert {
          @include output {
            @include sm\:skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-x-3') {
        @include assert {
          @include output {
            @include sm\:skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-y-3') {
        @include assert {
          @include output {
            @include sm\:skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-x-6') {
        @include assert {
          @include output {
            @include sm\:skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-y-6') {
        @include assert {
          @include output {
            @include sm\:skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-x-12') {
        @include assert {
          @include output {
            @include sm\:skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-y-12') {
        @include assert {
          @include output {
            @include sm\:skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-x-0') {
        @include assert {
          @include output {
            @include sm\:-skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-y-0') {
        @include assert {
          @include output {
            @include sm\:-skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-x-1') {
        @include assert {
          @include output {
            @include sm\:-skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-y-1') {
        @include assert {
          @include output {
            @include sm\:-skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-x-2') {
        @include assert {
          @include output {
            @include sm\:-skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-y-2') {
        @include assert {
          @include output {
            @include sm\:-skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-x-3') {
        @include assert {
          @include output {
            @include sm\:-skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-y-3') {
        @include assert {
          @include output {
            @include sm\:-skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-x-6') {
        @include assert {
          @include output {
            @include sm\:-skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-y-6') {
        @include assert {
          @include output {
            @include sm\:-skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-x-12') {
        @include assert {
          @include output {
            @include sm\:-skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-y-12') {
        @include assert {
          @include output {
            @include sm\:-skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-x-0') {
        @include assert {
          @include output {
            @include md\:skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-y-0') {
        @include assert {
          @include output {
            @include md\:skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-x-1') {
        @include assert {
          @include output {
            @include md\:skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-y-1') {
        @include assert {
          @include output {
            @include md\:skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-x-2') {
        @include assert {
          @include output {
            @include md\:skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-y-2') {
        @include assert {
          @include output {
            @include md\:skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-x-3') {
        @include assert {
          @include output {
            @include md\:skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-y-3') {
        @include assert {
          @include output {
            @include md\:skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-x-6') {
        @include assert {
          @include output {
            @include md\:skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-y-6') {
        @include assert {
          @include output {
            @include md\:skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-x-12') {
        @include assert {
          @include output {
            @include md\:skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-y-12') {
        @include assert {
          @include output {
            @include md\:skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-x-0') {
        @include assert {
          @include output {
            @include md\:-skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-y-0') {
        @include assert {
          @include output {
            @include md\:-skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-x-1') {
        @include assert {
          @include output {
            @include md\:-skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-y-1') {
        @include assert {
          @include output {
            @include md\:-skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-x-2') {
        @include assert {
          @include output {
            @include md\:-skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-y-2') {
        @include assert {
          @include output {
            @include md\:-skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-x-3') {
        @include assert {
          @include output {
            @include md\:-skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-y-3') {
        @include assert {
          @include output {
            @include md\:-skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-x-6') {
        @include assert {
          @include output {
            @include md\:-skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-y-6') {
        @include assert {
          @include output {
            @include md\:-skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-x-12') {
        @include assert {
          @include output {
            @include md\:-skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-y-12') {
        @include assert {
          @include output {
            @include md\:-skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-x-0') {
        @include assert {
          @include output {
            @include lg\:skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-y-0') {
        @include assert {
          @include output {
            @include lg\:skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-x-1') {
        @include assert {
          @include output {
            @include lg\:skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-y-1') {
        @include assert {
          @include output {
            @include lg\:skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-x-2') {
        @include assert {
          @include output {
            @include lg\:skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-y-2') {
        @include assert {
          @include output {
            @include lg\:skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-x-3') {
        @include assert {
          @include output {
            @include lg\:skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-y-3') {
        @include assert {
          @include output {
            @include lg\:skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-x-6') {
        @include assert {
          @include output {
            @include lg\:skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-y-6') {
        @include assert {
          @include output {
            @include lg\:skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-x-12') {
        @include assert {
          @include output {
            @include lg\:skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-y-12') {
        @include assert {
          @include output {
            @include lg\:skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-x-0') {
        @include assert {
          @include output {
            @include lg\:-skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-y-0') {
        @include assert {
          @include output {
            @include lg\:-skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-x-1') {
        @include assert {
          @include output {
            @include lg\:-skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-y-1') {
        @include assert {
          @include output {
            @include lg\:-skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-x-2') {
        @include assert {
          @include output {
            @include lg\:-skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-y-2') {
        @include assert {
          @include output {
            @include lg\:-skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-x-3') {
        @include assert {
          @include output {
            @include lg\:-skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-y-3') {
        @include assert {
          @include output {
            @include lg\:-skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-x-6') {
        @include assert {
          @include output {
            @include lg\:-skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-y-6') {
        @include assert {
          @include output {
            @include lg\:-skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-x-12') {
        @include assert {
          @include output {
            @include lg\:-skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-y-12') {
        @include assert {
          @include output {
            @include lg\:-skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-x-0') {
        @include assert {
          @include output {
            @include xl\:skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-y-0') {
        @include assert {
          @include output {
            @include xl\:skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-x-1') {
        @include assert {
          @include output {
            @include xl\:skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-y-1') {
        @include assert {
          @include output {
            @include xl\:skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-x-2') {
        @include assert {
          @include output {
            @include xl\:skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-y-2') {
        @include assert {
          @include output {
            @include xl\:skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-x-3') {
        @include assert {
          @include output {
            @include xl\:skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-y-3') {
        @include assert {
          @include output {
            @include xl\:skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-x-6') {
        @include assert {
          @include output {
            @include xl\:skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-y-6') {
        @include assert {
          @include output {
            @include xl\:skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-x-12') {
        @include assert {
          @include output {
            @include xl\:skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-y-12') {
        @include assert {
          @include output {
            @include xl\:skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-x-0') {
        @include assert {
          @include output {
            @include xl\:-skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-y-0') {
        @include assert {
          @include output {
            @include xl\:-skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-x-1') {
        @include assert {
          @include output {
            @include xl\:-skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-y-1') {
        @include assert {
          @include output {
            @include xl\:-skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-x-2') {
        @include assert {
          @include output {
            @include xl\:-skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-y-2') {
        @include assert {
          @include output {
            @include xl\:-skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-x-3') {
        @include assert {
          @include output {
            @include xl\:-skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-y-3') {
        @include assert {
          @include output {
            @include xl\:-skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-x-6') {
        @include assert {
          @include output {
            @include xl\:-skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-y-6') {
        @include assert {
          @include output {
            @include xl\:-skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-x-12') {
        @include assert {
          @include output {
            @include xl\:-skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-y-12') {
        @include assert {
          @include output {
            @include xl\:-skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-x-0') {
        @include assert {
          @include output {
            @include \2xl\:skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-y-0') {
        @include assert {
          @include output {
            @include \2xl\:skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-x-1') {
        @include assert {
          @include output {
            @include \2xl\:skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-y-1') {
        @include assert {
          @include output {
            @include \2xl\:skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-x-2') {
        @include assert {
          @include output {
            @include \2xl\:skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-y-2') {
        @include assert {
          @include output {
            @include \2xl\:skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-x-3') {
        @include assert {
          @include output {
            @include \2xl\:skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-y-3') {
        @include assert {
          @include output {
            @include \2xl\:skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-x-6') {
        @include assert {
          @include output {
            @include \2xl\:skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-y-6') {
        @include assert {
          @include output {
            @include \2xl\:skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-x-12') {
        @include assert {
          @include output {
            @include \2xl\:skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-y-12') {
        @include assert {
          @include output {
            @include \2xl\:skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-x-0') {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-y-0') {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-x-1') {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-y-1') {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-x-2') {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-y-2') {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-x-3') {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-y-3') {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-x-6') {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-y-6') {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-x-12') {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-y-12') {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('skew-x-(17deg)') {
        @include assert {
          @include output {
            @include skew-x-(17deg);
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('skew-y-(17deg)') {
        @include assert {
          @include output {
            @include skew-y-(17deg);
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-x-(17deg)') {
        @include assert {
          @include output {
            @include -skew-x-(17deg);
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-17deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-skew-y-(17deg)') {
        @include assert {
          @include output {
            @include -skew-y-(17deg);
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-17deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('sm\:skew-x-(17deg)') {
        @include assert {
          @include output {
            @include sm\:skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:skew-y-(17deg)') {
        @include assert {
          @include output {
            @include sm\:skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-x-(17deg)') {
        @include assert {
          @include output {
            @include sm\:-skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-skew-y-(17deg)') {
        @include assert {
          @include output {
            @include sm\:-skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-x-(17deg)') {
        @include assert {
          @include output {
            @include md\:skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:skew-y-(17deg)') {
        @include assert {
          @include output {
            @include md\:skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-x-(17deg)') {
        @include assert {
          @include output {
            @include md\:-skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(-17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-skew-y-(17deg)') {
        @include assert {
          @include output {
            @include md\:-skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-x-(17deg)') {
        @include assert {
          @include output {
            @include lg\:skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:skew-y-(17deg)') {
        @include assert {
          @include output {
            @include lg\:skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-x-(17deg)') {
        @include assert {
          @include output {
            @include lg\:-skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-skew-y-(17deg)') {
        @include assert {
          @include output {
            @include lg\:-skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-x-(17deg)') {
        @include assert {
          @include output {
            @include xl\:skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:skew-y-(17deg)') {
        @include assert {
          @include output {
            @include xl\:skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-x-(17deg)') {
        @include assert {
          @include output {
            @include xl\:-skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-skew-y-(17deg)') {
        @include assert {
          @include output {
            @include xl\:-skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-x-(17deg)') {
        @include assert {
          @include output {
            @include \2xl\:skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:skew-y-(17deg)') {
        @include assert {
          @include output {
            @include \2xl\:skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-x-(17deg)') {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-17deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-skew-y-(17deg)') {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-17deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }
    }
  }
}
