@use '../../mode0' as *;
@use 'true' as *;

// private member(prefix - or _) can't be imported, so I put here for testing

@mixin -rotate-0 {
  $tw-rotate: -0deg !global;
  transform: get_transform();
}

@mixin -rotate-1 {
  $tw-rotate: -1deg !global;
  transform: get_transform();
}

@mixin -rotate-2 {
  $tw-rotate: -2deg !global;
  transform: get_transform();
}

@mixin -rotate-3 {
  $tw-rotate: -3deg !global;
  transform: get_transform();
}

@mixin -rotate-6 {
  $tw-rotate: -6deg !global;
  transform: get_transform();
}

@mixin -rotate-12 {
  $tw-rotate: -12deg !global;
  transform: get_transform();
}

@mixin -rotate-45 {
  $tw-rotate: -45deg !global;
  transform: get_transform();
}

@mixin -rotate-90 {
  $tw-rotate: -90deg !global;
  transform: get_transform();
}

@mixin -rotate-180 {
  $tw-rotate: -180deg !global;
  transform: get_transform();
}

@mixin -rotate-($v) {
  $tw-rotate: -$v !global;
  @include transform(get_transform());
}

@include describe('12.Transforms') {
  @include describe('Rotate') {
    @include describe('Basic') {
      @include it('rotate-0') {
        @include assert {
          @include output {
            @include rotate-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('rotate-1') {
        @include assert {
          @include output {
            @include rotate-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('rotate-2') {
        @include assert {
          @include output {
            @include rotate-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('rotate-3') {
        @include assert {
          @include output {
            @include rotate-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('rotate-6') {
        @include assert {
          @include output {
            @include rotate-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('rotate-12') {
        @include assert {
          @include output {
            @include rotate-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('rotate-45') {
        @include assert {
          @include output {
            @include rotate-45;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('rotate-90') {
        @include assert {
          @include output {
            @include rotate-90;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('rotate-180') {
        @include assert {
          @include output {
            @include rotate-180;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-0') {
        @include assert {
          @include output {
            @include -rotate-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-1') {
        @include assert {
          @include output {
            @include -rotate-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-2') {
        @include assert {
          @include output {
            @include -rotate-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-3') {
        @include assert {
          @include output {
            @include -rotate-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-6') {
        @include assert {
          @include output {
            @include -rotate-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-12') {
        @include assert {
          @include output {
            @include -rotate-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-45') {
        @include assert {
          @include output {
            @include -rotate-45;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-90') {
        @include assert {
          @include output {
            @include -rotate-90;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-180') {
        @include assert {
          @include output {
            @include -rotate-180;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }
    }

    @include describe('Rwd') {
      @include it('sm\:rotate-0') {
        @include assert {
          @include output {
            @include sm\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:rotate-1') {
        @include assert {
          @include output {
            @include sm\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:rotate-2') {
        @include assert {
          @include output {
            @include sm\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:rotate-3') {
        @include assert {
          @include output {
            @include sm\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:rotate-6') {
        @include assert {
          @include output {
            @include sm\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:rotate-12') {
        @include assert {
          @include output {
            @include sm\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:rotate-45') {
        @include assert {
          @include output {
            @include sm\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:rotate-90') {
        @include assert {
          @include output {
            @include sm\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:rotate-180') {
        @include assert {
          @include output {
            @include sm\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-0') {
        @include assert {
          @include output {
            @include sm\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-1') {
        @include assert {
          @include output {
            @include sm\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-2') {
        @include assert {
          @include output {
            @include sm\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-3') {
        @include assert {
          @include output {
            @include sm\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-6') {
        @include assert {
          @include output {
            @include sm\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-12') {
        @include assert {
          @include output {
            @include sm\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-45') {
        @include assert {
          @include output {
            @include sm\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-90') {
        @include assert {
          @include output {
            @include sm\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-180') {
        @include assert {
          @include output {
            @include sm\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-0') {
        @include assert {
          @include output {
            @include md\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-1') {
        @include assert {
          @include output {
            @include md\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-2') {
        @include assert {
          @include output {
            @include md\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-3') {
        @include assert {
          @include output {
            @include md\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-6') {
        @include assert {
          @include output {
            @include md\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-12') {
        @include assert {
          @include output {
            @include md\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-45') {
        @include assert {
          @include output {
            @include md\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-90') {
        @include assert {
          @include output {
            @include md\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-180') {
        @include assert {
          @include output {
            @include md\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-0') {
        @include assert {
          @include output {
            @include md\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-1') {
        @include assert {
          @include output {
            @include md\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-2') {
        @include assert {
          @include output {
            @include md\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-3') {
        @include assert {
          @include output {
            @include md\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-6') {
        @include assert {
          @include output {
            @include md\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-12') {
        @include assert {
          @include output {
            @include md\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-45') {
        @include assert {
          @include output {
            @include md\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-90') {
        @include assert {
          @include output {
            @include md\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-180') {
        @include assert {
          @include output {
            @include md\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-0') {
        @include assert {
          @include output {
            @include lg\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-1') {
        @include assert {
          @include output {
            @include lg\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-2') {
        @include assert {
          @include output {
            @include lg\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-3') {
        @include assert {
          @include output {
            @include lg\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-6') {
        @include assert {
          @include output {
            @include lg\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-12') {
        @include assert {
          @include output {
            @include lg\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-45') {
        @include assert {
          @include output {
            @include lg\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-90') {
        @include assert {
          @include output {
            @include lg\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-180') {
        @include assert {
          @include output {
            @include lg\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-0') {
        @include assert {
          @include output {
            @include lg\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-1') {
        @include assert {
          @include output {
            @include lg\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-2') {
        @include assert {
          @include output {
            @include lg\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-3') {
        @include assert {
          @include output {
            @include lg\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-6') {
        @include assert {
          @include output {
            @include lg\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-12') {
        @include assert {
          @include output {
            @include lg\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-45') {
        @include assert {
          @include output {
            @include lg\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-90') {
        @include assert {
          @include output {
            @include lg\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-180') {
        @include assert {
          @include output {
            @include lg\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-0') {
        @include assert {
          @include output {
            @include xl\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-1') {
        @include assert {
          @include output {
            @include xl\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-2') {
        @include assert {
          @include output {
            @include xl\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-3') {
        @include assert {
          @include output {
            @include xl\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-6') {
        @include assert {
          @include output {
            @include xl\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-12') {
        @include assert {
          @include output {
            @include xl\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-45') {
        @include assert {
          @include output {
            @include xl\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-90') {
        @include assert {
          @include output {
            @include xl\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-180') {
        @include assert {
          @include output {
            @include xl\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-0') {
        @include assert {
          @include output {
            @include xl\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-1') {
        @include assert {
          @include output {
            @include xl\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-2') {
        @include assert {
          @include output {
            @include xl\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-3') {
        @include assert {
          @include output {
            @include xl\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-6') {
        @include assert {
          @include output {
            @include xl\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-12') {
        @include assert {
          @include output {
            @include xl\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-45') {
        @include assert {
          @include output {
            @include xl\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-90') {
        @include assert {
          @include output {
            @include xl\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-180') {
        @include assert {
          @include output {
            @include xl\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-0') {
        @include assert {
          @include output {
            @include \2xl\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-1') {
        @include assert {
          @include output {
            @include \2xl\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-2') {
        @include assert {
          @include output {
            @include \2xl\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-3') {
        @include assert {
          @include output {
            @include \2xl\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-6') {
        @include assert {
          @include output {
            @include \2xl\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-12') {
        @include assert {
          @include output {
            @include \2xl\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-45') {
        @include assert {
          @include output {
            @include \2xl\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-90') {
        @include assert {
          @include output {
            @include \2xl\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-180') {
        @include assert {
          @include output {
            @include \2xl\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-0') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-1') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-2') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-3') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-6') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-12') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-45') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-90') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-180') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('rotate-(17deg)') {
        @include assert {
          @include output {
            @include rotate-(17deg);
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-rotate-(17deg)') {
        @include assert {
          @include output {
            @include -rotate-(17deg);
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it('sm\:rotate-(17deg)') {
        @include assert {
          @include output {
            @include sm\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-rotate-(17deg)') {
        @include assert {
          @include output {
            @include sm\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:rotate-(17deg)') {
        @include assert {
          @include output {
            @include md\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-rotate-(17deg)') {
        @include assert {
          @include output {
            @include md\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:rotate-(17deg)') {
        @include assert {
          @include output {
            @include lg\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-rotate-(17deg)') {
        @include assert {
          @include output {
            @include lg\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:rotate-(17deg)') {
        @include assert {
          @include output {
            @include xl\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-rotate-(17deg)') {
        @include assert {
          @include output {
            @include xl\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:rotate-(17deg)') {
        @include assert {
          @include output {
            @include \2xl\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-rotate-(17deg)') {
        @include assert {
          @include output {
            @include \2xl\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }
    }
  }
}
