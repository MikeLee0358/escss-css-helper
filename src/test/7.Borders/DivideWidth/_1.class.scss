@use '../../mode0' as *;
@use 'true' as *;

@include describe('7.Borders') {
  @include describe('Divide Width') {
    @include describe('Basic') {
      @include it('divide-x-0') {
        @include assert {
          @include output {
            @include divide-x-0;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-right-width: 0px;
              border-left-width: 0px;
            }
          }
        }
      }

      @include it('divide-x-2') {
        @include assert {
          @include output {
            @include divide-x-2;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-right-width: 0px;
              border-left-width: 2px;
            }
          }
        }
      }

      @include it('divide-x-4') {
        @include assert {
          @include output {
            @include divide-x-4;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-right-width: 0px;
              border-left-width: 4px;
            }
          }
        }
      }

      @include it('divide-x-8') {
        @include assert {
          @include output {
            @include divide-x-8;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-right-width: 0px;
              border-left-width: 8px;
            }
          }
        }
      }

      @include it('divide-x') {
        @include assert {
          @include output {
            @include divide-x;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-right-width: 0px;
              border-left-width: 1px;
            }
          }
        }
      }

      @include it('divide-y-0') {
        @include assert {
          @include output {
            @include divide-y-0;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-top-width: 0px;
              border-bottom-width: 0px;
            }
          }
        }
      }

      @include it('divide-y-2') {
        @include assert {
          @include output {
            @include divide-y-2;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-top-width: 2px;
              border-bottom-width: 0px;
            }
          }
        }
      }

      @include it('divide-y-4') {
        @include assert {
          @include output {
            @include divide-y-4;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-top-width: 4px;
              border-bottom-width: 0px;
            }
          }
        }
      }

      @include it('divide-y-8') {
        @include assert {
          @include output {
            @include divide-y-8;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-top-width: 8px;
              border-bottom-width: 0px;
            }
          }
        }
      }

      @include it('divide-y') {
        @include assert {
          @include output {
            @include divide-y;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-top-width: 1px;
              border-bottom-width: 0px;
            }
          }
        }
      }

      @include it('divide-x-reverse') {
        @include assert {
          @include output {
            @include divide-x-8;
            @include divide-x-reverse;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-right-width: 0px;
              border-left-width: 8px;
            }

            > * ~ * {
              border-right-width: 8px;
              border-left-width: 0px;
            }
          }
        }
      }

      @include it('divide-y-reverse') {
        @include assert {
          @include output {
            @include divide-y-8;
            @include divide-y-reverse;
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-top-width: 8px;
              border-bottom-width: 0px;
            }

            > * ~ * {
              border-top-width: 0px;
              border-bottom-width: 8px;
            }
          }
        }
      }
    }

    @include describe('Rwd') {
      @include it('sm\:divide-x-0') {
        @include assert {
          @include output {
            @include sm\:divide-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-x-2') {
        @include assert {
          @include output {
            @include sm\:divide-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 2px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-x-4') {
        @include assert {
          @include output {
            @include sm\:divide-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 4px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-x-8') {
        @include assert {
          @include output {
            @include sm\:divide-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-x') {
        @include assert {
          @include output {
            @include sm\:divide-x;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 1px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-y-0') {
        @include assert {
          @include output {
            @include sm\:divide-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-y-2') {
        @include assert {
          @include output {
            @include sm\:divide-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-top-width: 2px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-y-4') {
        @include assert {
          @include output {
            @include sm\:divide-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-top-width: 4px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-y-8') {
        @include assert {
          @include output {
            @include sm\:divide-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-y') {
        @include assert {
          @include output {
            @include sm\:divide-y;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-top-width: 1px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-x-reverse') {
        @include assert {
          @include output {
            @include sm\:divide-x-8;
            @include sm\:divide-x-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }

            @media (min-width: $sm) {
              > * ~ * {
                border-right-width: 8px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-y-reverse') {
        @include assert {
          @include output {
            @include sm\:divide-y-8;
            @include sm\:divide-y-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }

            @media (min-width: $sm) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 8px;
              }
            }
          }
        }
      }

      @include it('md\:divide-x-0') {
        @include assert {
          @include output {
            @include md\:divide-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('md\:divide-x-2') {
        @include assert {
          @include output {
            @include md\:divide-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 2px;
              }
            }
          }
        }
      }

      @include it('md\:divide-x-4') {
        @include assert {
          @include output {
            @include md\:divide-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 4px;
              }
            }
          }
        }
      }

      @include it('md\:divide-x-8') {
        @include assert {
          @include output {
            @include md\:divide-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }
          }
        }
      }

      @include it('md\:divide-x') {
        @include assert {
          @include output {
            @include md\:divide-x;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 1px;
              }
            }
          }
        }
      }

      @include it('md\:divide-y-0') {
        @include assert {
          @include output {
            @include md\:divide-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('md\:divide-y-2') {
        @include assert {
          @include output {
            @include md\:divide-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-top-width: 2px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('md\:divide-y-4') {
        @include assert {
          @include output {
            @include md\:divide-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-top-width: 4px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('md\:divide-y-8') {
        @include assert {
          @include output {
            @include md\:divide-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('md\:divide-y') {
        @include assert {
          @include output {
            @include md\:divide-y;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-top-width: 1px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('md\:divide-x-reverse') {
        @include assert {
          @include output {
            @include md\:divide-x-8;
            @include md\:divide-x-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }

            @media (min-width: $md) {
              > * ~ * {
                border-right-width: 8px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('md\:divide-y-reverse') {
        @include assert {
          @include output {
            @include md\:divide-y-8;
            @include md\:divide-y-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }

            @media (min-width: $md) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 8px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-x-0') {
        @include assert {
          @include output {
            @include lg\:divide-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-x-2') {
        @include assert {
          @include output {
            @include lg\:divide-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 2px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-x-4') {
        @include assert {
          @include output {
            @include lg\:divide-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 4px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-x-8') {
        @include assert {
          @include output {
            @include lg\:divide-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-x') {
        @include assert {
          @include output {
            @include lg\:divide-x;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 1px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-y-0') {
        @include assert {
          @include output {
            @include lg\:divide-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-y-2') {
        @include assert {
          @include output {
            @include lg\:divide-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-top-width: 2px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-y-4') {
        @include assert {
          @include output {
            @include lg\:divide-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-top-width: 4px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-y-8') {
        @include assert {
          @include output {
            @include lg\:divide-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-y') {
        @include assert {
          @include output {
            @include lg\:divide-y;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-top-width: 1px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-x-reverse') {
        @include assert {
          @include output {
            @include lg\:divide-x-8;
            @include lg\:divide-x-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }

            @media (min-width: $lg) {
              > * ~ * {
                border-right-width: 8px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-y-reverse') {
        @include assert {
          @include output {
            @include lg\:divide-y-8;
            @include lg\:divide-y-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }

            @media (min-width: $lg) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 8px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-x-0') {
        @include assert {
          @include output {
            @include xl\:divide-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-x-2') {
        @include assert {
          @include output {
            @include xl\:divide-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 2px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-x-4') {
        @include assert {
          @include output {
            @include xl\:divide-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 4px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-x-8') {
        @include assert {
          @include output {
            @include xl\:divide-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-x') {
        @include assert {
          @include output {
            @include xl\:divide-x;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 1px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-y-0') {
        @include assert {
          @include output {
            @include xl\:divide-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-y-2') {
        @include assert {
          @include output {
            @include xl\:divide-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-top-width: 2px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-y-4') {
        @include assert {
          @include output {
            @include xl\:divide-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-top-width: 4px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-y-8') {
        @include assert {
          @include output {
            @include xl\:divide-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-y') {
        @include assert {
          @include output {
            @include xl\:divide-y;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-top-width: 1px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-x-reverse') {
        @include assert {
          @include output {
            @include xl\:divide-x-8;
            @include xl\:divide-x-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }

            @media (min-width: $xl) {
              > * ~ * {
                border-right-width: 8px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-y-reverse') {
        @include assert {
          @include output {
            @include xl\:divide-y-8;
            @include xl\:divide-y-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }

            @media (min-width: $xl) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 8px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-x-0') {
        @include assert {
          @include output {
            @include \2xl\:divide-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-x-2') {
        @include assert {
          @include output {
            @include \2xl\:divide-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 2px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-x-4') {
        @include assert {
          @include output {
            @include \2xl\:divide-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 4px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-x-8') {
        @include assert {
          @include output {
            @include \2xl\:divide-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-x') {
        @include assert {
          @include output {
            @include \2xl\:divide-x;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 1px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-y-0') {
        @include assert {
          @include output {
            @include \2xl\:divide-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-y-2') {
        @include assert {
          @include output {
            @include \2xl\:divide-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-top-width: 2px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-y-4') {
        @include assert {
          @include output {
            @include \2xl\:divide-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-top-width: 4px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-y-8') {
        @include assert {
          @include output {
            @include \2xl\:divide-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-y') {
        @include assert {
          @include output {
            @include \2xl\:divide-y;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-top-width: 1px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-x-reverse') {
        @include assert {
          @include output {
            @include \2xl\:divide-x-8;
            @include \2xl\:divide-x-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 8px;
              }
            }

            @media (min-width: $\2xl) {
              > * ~ * {
                border-right-width: 8px;
                border-left-width: 0px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-y-reverse') {
        @include assert {
          @include output {
            @include \2xl\:divide-y-8;
            @include \2xl\:divide-y-reverse;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-top-width: 8px;
                border-bottom-width: 0px;
              }
            }

            @media (min-width: $\2xl) {
              > * ~ * {
                border-top-width: 0px;
                border-bottom-width: 8px;
              }
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('divide-x-(3px)') {
        @include assert {
          @include output {
            @include divide-x-(3px);
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-right-width: 0px;
              border-left-width: 3px;
            }
          }
        }
      }

      @include it('divide-y-(3px)') {
        @include assert {
          @include output {
            @include divide-y-(3px);
            @include reset;
          }

          @include expect {
            > * ~ * {
              border-top-width: 3px;
              border-bottom-width: 0px;
            }
          }
        }
      }

      @include it('sm\:divide-x-(3px)') {
        @include assert {
          @include output {
            @include sm\:divide-x-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 3px;
              }
            }
          }
        }
      }

      @include it('sm\:divide-y-(3px)') {
        @include assert {
          @include output {
            @include sm\:divide-y-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              > * ~ * {
                border-top-width: 3px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('md\:divide-x-(3px)') {
        @include assert {
          @include output {
            @include md\:divide-x-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 3px;
              }
            }
          }
        }
      }

      @include it('md\:divide-y-(3px)') {
        @include assert {
          @include output {
            @include md\:divide-y-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              > * ~ * {
                border-top-width: 3px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-x-(3px)') {
        @include assert {
          @include output {
            @include lg\:divide-x-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 3px;
              }
            }
          }
        }
      }

      @include it('lg\:divide-y-(3px)') {
        @include assert {
          @include output {
            @include lg\:divide-y-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              > * ~ * {
                border-top-width: 3px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-x-(3px)') {
        @include assert {
          @include output {
            @include xl\:divide-x-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 3px;
              }
            }
          }
        }
      }

      @include it('xl\:divide-y-(3px)') {
        @include assert {
          @include output {
            @include xl\:divide-y-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              > * ~ * {
                border-top-width: 3px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-x-(3px)') {
        @include assert {
          @include output {
            @include \2xl\:divide-x-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-right-width: 0px;
                border-left-width: 3px;
              }
            }
          }
        }
      }

      @include it('2xl\:divide-y-(3px)') {
        @include assert {
          @include output {
            @include \2xl\:divide-y-(3px);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              > * ~ * {
                border-top-width: 3px;
                border-bottom-width: 0px;
              }
            }
          }
        }
      }
    }
  }
}
