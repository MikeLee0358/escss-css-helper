@use '../../mode0' as *;
@use 'true' as *;

@include describe('2.Flexbox & Grid') {
  @include describe('Grid Template Columns') {
    @include describe('Basic') {
      @include it('grid-cols-1') {
        @include assert {
          @include output {
            @include grid-cols-1;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(1, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-2') {
        @include assert {
          @include output {
            @include grid-cols-2;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(2, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-3') {
        @include assert {
          @include output {
            @include grid-cols-3;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(3, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-4') {
        @include assert {
          @include output {
            @include grid-cols-4;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(4, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-5') {
        @include assert {
          @include output {
            @include grid-cols-5;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(5, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-6') {
        @include assert {
          @include output {
            @include grid-cols-6;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(6, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-7') {
        @include assert {
          @include output {
            @include grid-cols-7;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(7, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-8') {
        @include assert {
          @include output {
            @include grid-cols-8;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(8, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-9') {
        @include assert {
          @include output {
            @include grid-cols-9;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(9, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-10') {
        @include assert {
          @include output {
            @include grid-cols-10;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(10, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-11') {
        @include assert {
          @include output {
            @include grid-cols-11;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(11, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-12') {
        @include assert {
          @include output {
            @include grid-cols-12;
            @include reset;
          }

          @include expect {
            grid-template-columns: repeat(12, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-cols-none') {
        @include assert {
          @include output {
            @include grid-cols-none;
            @include reset;
          }

          @include expect {
            grid-template-columns: none;
          }
        }
      }

      @include it('grid-cols-subgrid') {
        @include assert {
          @include output {
            @include grid-cols-subgrid;
            @include reset;
          }

          @include expect {
            grid-template-columns: subgrid;
          }
        }
      }
    }

    @include describe('Rwd') {
      @include it('sm\:grid-cols-1') {
        @include assert {
          @include output {
            @include sm\:grid-cols-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(1, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-2') {
        @include assert {
          @include output {
            @include sm\:grid-cols-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(2, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-3') {
        @include assert {
          @include output {
            @include sm\:grid-cols-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(3, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-4') {
        @include assert {
          @include output {
            @include sm\:grid-cols-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(4, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-5') {
        @include assert {
          @include output {
            @include sm\:grid-cols-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(5, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-6') {
        @include assert {
          @include output {
            @include sm\:grid-cols-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(6, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-7') {
        @include assert {
          @include output {
            @include sm\:grid-cols-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(7, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-8') {
        @include assert {
          @include output {
            @include sm\:grid-cols-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(8, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-9') {
        @include assert {
          @include output {
            @include sm\:grid-cols-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(9, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-10') {
        @include assert {
          @include output {
            @include sm\:grid-cols-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(10, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-11') {
        @include assert {
          @include output {
            @include sm\:grid-cols-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(11, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-12') {
        @include assert {
          @include output {
            @include sm\:grid-cols-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: repeat(12, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('sm\:grid-cols-none') {
        @include assert {
          @include output {
            @include sm\:grid-cols-none;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: none;
            }
          }
        }
      }

      @include it('sm\:grid-cols-subgrid') {
        @include assert {
          @include output {
            @include sm\:grid-cols-subgrid;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: subgrid;
            }
          }
        }
      }

      @include it('md\:grid-cols-1') {
        @include assert {
          @include output {
            @include md\:grid-cols-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(1, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-2') {
        @include assert {
          @include output {
            @include md\:grid-cols-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(2, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-3') {
        @include assert {
          @include output {
            @include md\:grid-cols-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(3, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-4') {
        @include assert {
          @include output {
            @include md\:grid-cols-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(4, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-5') {
        @include assert {
          @include output {
            @include md\:grid-cols-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(5, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-6') {
        @include assert {
          @include output {
            @include md\:grid-cols-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(6, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-7') {
        @include assert {
          @include output {
            @include md\:grid-cols-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(7, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-8') {
        @include assert {
          @include output {
            @include md\:grid-cols-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(8, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-9') {
        @include assert {
          @include output {
            @include md\:grid-cols-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(9, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-10') {
        @include assert {
          @include output {
            @include md\:grid-cols-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(10, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-11') {
        @include assert {
          @include output {
            @include md\:grid-cols-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(11, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-12') {
        @include assert {
          @include output {
            @include md\:grid-cols-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: repeat(12, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('md\:grid-cols-none') {
        @include assert {
          @include output {
            @include md\:grid-cols-none;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: none;
            }
          }
        }
      }

      @include it('md\:grid-cols-subgrid') {
        @include assert {
          @include output {
            @include md\:grid-cols-subgrid;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: subgrid;
            }
          }
        }
      }

      @include it('lg\:grid-cols-1') {
        @include assert {
          @include output {
            @include lg\:grid-cols-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(1, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-2') {
        @include assert {
          @include output {
            @include lg\:grid-cols-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(2, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-3') {
        @include assert {
          @include output {
            @include lg\:grid-cols-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(3, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-4') {
        @include assert {
          @include output {
            @include lg\:grid-cols-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(4, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-5') {
        @include assert {
          @include output {
            @include lg\:grid-cols-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(5, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-6') {
        @include assert {
          @include output {
            @include lg\:grid-cols-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(6, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-7') {
        @include assert {
          @include output {
            @include lg\:grid-cols-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(7, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-8') {
        @include assert {
          @include output {
            @include lg\:grid-cols-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(8, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-9') {
        @include assert {
          @include output {
            @include lg\:grid-cols-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(9, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-10') {
        @include assert {
          @include output {
            @include lg\:grid-cols-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(10, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-11') {
        @include assert {
          @include output {
            @include lg\:grid-cols-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(11, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-12') {
        @include assert {
          @include output {
            @include lg\:grid-cols-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: repeat(12, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('lg\:grid-cols-none') {
        @include assert {
          @include output {
            @include lg\:grid-cols-none;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: none;
            }
          }
        }
      }

      @include it('lg\:grid-cols-subgrid') {
        @include assert {
          @include output {
            @include lg\:grid-cols-subgrid;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: subgrid;
            }
          }
        }
      }

      @include it('xl\:grid-cols-1') {
        @include assert {
          @include output {
            @include xl\:grid-cols-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(1, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-2') {
        @include assert {
          @include output {
            @include xl\:grid-cols-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(2, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-3') {
        @include assert {
          @include output {
            @include xl\:grid-cols-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(3, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-4') {
        @include assert {
          @include output {
            @include xl\:grid-cols-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(4, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-5') {
        @include assert {
          @include output {
            @include xl\:grid-cols-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(5, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-6') {
        @include assert {
          @include output {
            @include xl\:grid-cols-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(6, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-7') {
        @include assert {
          @include output {
            @include xl\:grid-cols-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(7, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-8') {
        @include assert {
          @include output {
            @include xl\:grid-cols-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(8, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-9') {
        @include assert {
          @include output {
            @include xl\:grid-cols-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(9, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-10') {
        @include assert {
          @include output {
            @include xl\:grid-cols-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(10, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-11') {
        @include assert {
          @include output {
            @include xl\:grid-cols-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(11, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-12') {
        @include assert {
          @include output {
            @include xl\:grid-cols-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: repeat(12, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('xl\:grid-cols-none') {
        @include assert {
          @include output {
            @include xl\:grid-cols-none;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: none;
            }
          }
        }
      }

      @include it('xl\:grid-cols-subgrid') {
        @include assert {
          @include output {
            @include xl\:grid-cols-subgrid;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: subgrid;
            }
          }
        }
      }

      @include it('2xl\:grid-cols-1') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(1, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-2') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(2, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-3') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(3, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-4') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(4, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-5') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(5, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-6') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(6, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-7') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(7, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-8') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(8, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-9') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(9, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-10') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(10, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-11') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(11, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-12') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: repeat(12, minmax(0, 1fr));
            }
          }
        }
      }

      @include it('2xl\:grid-cols-none') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-none;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: none;
            }
          }
        }
      }

      @include it('2xl\:grid-cols-subgrid') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-subgrid;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: subgrid;
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('grid-cols-(200px minmax(900px, 1fr) 100px)') {
        @include assert {
          @include output {
            @include grid-cols-(200px minmax(900px, 1fr) 100px);
            @include reset;
          }

          @include expect {
            grid-template-columns: 200px minmax(900px, 1fr) 100px;
          }
        }
      }

      @include it('sm\:grid-cols-(200px minmax(900px, 1fr) 100px)') {
        @include assert {
          @include output {
            @include sm\:grid-cols-(200px minmax(900px, 1fr) 100px);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              grid-template-columns: 200px minmax(900px, 1fr) 100px;
            }
          }
        }
      }

      @include it('md\:grid-cols-(200px minmax(900px, 1fr) 100px)') {
        @include assert {
          @include output {
            @include md\:grid-cols-(200px minmax(900px, 1fr) 100px);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              grid-template-columns: 200px minmax(900px, 1fr) 100px;
            }
          }
        }
      }

      @include it('lg\:grid-cols-(200px minmax(900px, 1fr) 100px)') {
        @include assert {
          @include output {
            @include lg\:grid-cols-(200px minmax(900px, 1fr) 100px);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              grid-template-columns: 200px minmax(900px, 1fr) 100px;
            }
          }
        }
      }

      @include it('xl\:grid-cols-(200px minmax(900px, 1fr) 100px)') {
        @include assert {
          @include output {
            @include xl\:grid-cols-(200px minmax(900px, 1fr) 100px);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              grid-template-columns: 200px minmax(900px, 1fr) 100px;
            }
          }
        }
      }

      @include it('2xl\:grid-cols-(200px minmax(900px, 1fr) 100px)') {
        @include assert {
          @include output {
            @include \2xl\:grid-cols-(200px minmax(900px, 1fr) 100px);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              grid-template-columns: 200px minmax(900px, 1fr) 100px;
            }
          }
        }
      }
    }
  }
}
