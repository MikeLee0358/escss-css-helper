@import '../_classic_only';

@include describe('atomic') {
  @include describe('edge cases') {
    @include describe('Basic') {
      @include it('cursor(url(hand.cur), pointer)') {
        @include assert {
          @include output {
            @include cursor(url(hand.cur), pointer);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            cursor: url(hand.cur), pointer;
          }
        }
      }

      @include it('will-change(top, left)') {
        @include assert {
          @include output {
            @include will-change(top, left);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            will-change: top, left;
          }
        }
      }
    }

    @include describe('Rwd') {
      @include it('sm\:cursor(url(hand.cur), pointer)') {
        @include assert {
          @include output {
            @include cursor(url(hand.cur), pointer, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              cursor: url(hand.cur), pointer;
            }
          }
        }
      }

      @include it('sm\:will-change(top, left)') {
        @include assert {
          @include output {
            @include will-change(top, left, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              will-change: top, left;
            }
          }
        }
      }
    }
  }

  @include describe('Basic') {
    @include describe('Positive') {
      @include it('-moz-osx-font-smoothing(1)') {
        @include assert {
          @include output {
            @include -moz-osx-font-smoothing(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            -moz-osx-font-smoothing: 1;
          }
        }
      }

      @include it('-webkit-box-orient(1)') {
        @include assert {
          @include output {
            @include -webkit-box-orient(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            -webkit-box-orient: 1;
          }
        }
      }

      @include it('-webkit-font-smoothing(1)') {
        @include assert {
          @include output {
            @include -webkit-font-smoothing(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            -webkit-font-smoothing: 1;
          }
        }
      }

      @include it('-webkit-line-clamp(1)') {
        @include assert {
          @include output {
            @include -webkit-line-clamp(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            -webkit-line-clamp: 1;
          }
        }
      }

      @include it('accent-color(1)') {
        @include assert {
          @include output {
            @include accent-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            accent-color: 1;
          }
        }
      }

      @include it('align-content(1)') {
        @include assert {
          @include output {
            @include align-content(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            align-content: 1;
          }
        }
      }

      @include it('align-items(1)') {
        @include assert {
          @include output {
            @include align-items(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            align-items: 1;
          }
        }
      }

      @include it('align-self(1)') {
        @include assert {
          @include output {
            @include align-self(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            align-self: 1;
          }
        }
      }

      @include it('animation(1)') {
        @include assert {
          @include output {
            @include animation(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            animation: 1;
          }
        }
      }

      @include it('appearance(1)') {
        @include assert {
          @include output {
            @include appearance(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            appearance: 1;
          }
        }
      }

      @include it('aspect-ratio(1)') {
        @include assert {
          @include output {
            @include aspect-ratio(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            aspect-ratio: 1;
          }
        }
      }

      @include it('backdrop-filter(1)') {
        @include assert {
          @include output {
            @include backdrop-filter(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            backdrop-filter: 1;
          }
        }
      }

      @include it('background-attachment(1)') {
        @include assert {
          @include output {
            @include background-attachment(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-attachment: 1;
          }
        }
      }

      @include it('background-blend-mode(1)') {
        @include assert {
          @include output {
            @include background-blend-mode(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-blend-mode: 1;
          }
        }
      }

      @include it('background-clip(1)') {
        @include assert {
          @include output {
            @include background-clip(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-clip: 1;
          }
        }
      }

      @include it('background-color(1)') {
        @include assert {
          @include output {
            @include background-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-color: 1;
          }
        }
      }

      @include it('background-image(1)') {
        @include assert {
          @include output {
            @include background-image(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-image: 1;
          }
        }
      }

      @include it('background-origin(1)') {
        @include assert {
          @include output {
            @include background-origin(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-origin: 1;
          }
        }
      }

      @include it('background-position(1)') {
        @include assert {
          @include output {
            @include background-position(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-position: 1;
          }
        }
      }

      @include it('background-repeat(1)') {
        @include assert {
          @include output {
            @include background-repeat(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-repeat: 1;
          }
        }
      }

      @include it('background-size(1)') {
        @include assert {
          @include output {
            @include background-size(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-size: 1;
          }
        }
      }

      @include it('border-bottom-color(1)') {
        @include assert {
          @include output {
            @include border-bottom-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-bottom-color: 1;
          }
        }
      }

      @include it('border-bottom-left-radius(1)') {
        @include assert {
          @include output {
            @include border-bottom-left-radius(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-bottom-left-radius: 1;
          }
        }
      }

      @include it('border-bottom-right-radius(1)') {
        @include assert {
          @include output {
            @include border-bottom-right-radius(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-bottom-right-radius: 1;
          }
        }
      }

      @include it('border-bottom-width(1)') {
        @include assert {
          @include output {
            @include border-bottom-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-bottom-width: 1;
          }
        }
      }

      @include it('border-collapse(1)') {
        @include assert {
          @include output {
            @include border-collapse(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-collapse: 1;
          }
        }
      }

      @include it('border-color(1)') {
        @include assert {
          @include output {
            @include border-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-color: 1;
          }
        }
      }

      @include it('border-end-end-radius(1)') {
        @include assert {
          @include output {
            @include border-end-end-radius(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-end-end-radius: 1;
          }
        }
      }

      @include it('border-end-start-radius(1)') {
        @include assert {
          @include output {
            @include border-end-start-radius(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-end-start-radius: 1;
          }
        }
      }

      @include it('border-inline-end-color(1)') {
        @include assert {
          @include output {
            @include border-inline-end-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-inline-end-color: 1;
          }
        }
      }

      @include it('border-inline-end-width(1)') {
        @include assert {
          @include output {
            @include border-inline-end-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-inline-end-width: 1;
          }
        }
      }

      @include it('border-inline-start-color(1)') {
        @include assert {
          @include output {
            @include border-inline-start-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-inline-start-color: 1;
          }
        }
      }

      @include it('border-inline-start-width(1)') {
        @include assert {
          @include output {
            @include border-inline-start-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-inline-start-width: 1;
          }
        }
      }

      @include it('border-left-color(1)') {
        @include assert {
          @include output {
            @include border-left-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-left-color: 1;
          }
        }
      }

      @include it('border-left-width(1)') {
        @include assert {
          @include output {
            @include border-left-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-left-width: 1;
          }
        }
      }

      @include it('border-radius(1)') {
        @include assert {
          @include output {
            @include border-radius(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-radius: 1;
          }
        }
      }

      @include it('border-right-color(1)') {
        @include assert {
          @include output {
            @include border-right-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-right-color: 1;
          }
        }
      }

      @include it('border-right-width(1)') {
        @include assert {
          @include output {
            @include border-right-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-right-width: 1;
          }
        }
      }

      @include it('border-spacing(1)') {
        @include assert {
          @include output {
            @include border-spacing(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-spacing: 1;
          }
        }
      }

      @include it('border-start-end-radius(1)') {
        @include assert {
          @include output {
            @include border-start-end-radius(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-start-end-radius: 1;
          }
        }
      }

      @include it('border-start-start-radius(1)') {
        @include assert {
          @include output {
            @include border-start-start-radius(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-start-start-radius: 1;
          }
        }
      }

      @include it('border-style(1)') {
        @include assert {
          @include output {
            @include border-style(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-style: 1;
          }
        }
      }

      @include it('border-top-color(1)') {
        @include assert {
          @include output {
            @include border-top-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-top-color: 1;
          }
        }
      }

      @include it('border-top-left-radius(1)') {
        @include assert {
          @include output {
            @include border-top-left-radius(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-top-left-radius: 1;
          }
        }
      }

      @include it('border-top-right-radius(1)') {
        @include assert {
          @include output {
            @include border-top-right-radius(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-top-right-radius: 1;
          }
        }
      }

      @include it('border-top-width(1)') {
        @include assert {
          @include output {
            @include border-top-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-top-width: 1;
          }
        }
      }

      @include it('border-width(1)') {
        @include assert {
          @include output {
            @include border-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-width: 1;
          }
        }
      }

      @include it('bottom(1)') {
        @include assert {
          @include output {
            @include bottom(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            bottom: 1;
          }
        }
      }

      @include it('box-decoration-break(1)') {
        @include assert {
          @include output {
            @include box-decoration-break(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            box-decoration-break: 1;
          }
        }
      }

      @include it('box-shadow(1)') {
        @include assert {
          @include output {
            @include box-shadow(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            box-shadow: 1;
          }
        }
      }

      @include it('box-sizing(1)') {
        @include assert {
          @include output {
            @include box-sizing(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            box-sizing: 1;
          }
        }
      }

      @include it('break-after(1)') {
        @include assert {
          @include output {
            @include break-after(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            break-after: 1;
          }
        }
      }

      @include it('break-before(1)') {
        @include assert {
          @include output {
            @include break-before(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            break-before: 1;
          }
        }
      }

      @include it('break-inside(1)') {
        @include assert {
          @include output {
            @include break-inside(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            break-inside: 1;
          }
        }
      }

      @include it('caption-side(1)') {
        @include assert {
          @include output {
            @include caption-side(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            caption-side: 1;
          }
        }
      }

      @include it('caret-color(1)') {
        @include assert {
          @include output {
            @include caret-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            caret-color: 1;
          }
        }
      }

      @include it('clear(1)') {
        @include assert {
          @include output {
            @include clear(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            clear: 1;
          }
        }
      }

      @include it('clip(1)') {
        @include assert {
          @include output {
            @include clip(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            clip: 1;
          }
        }
      }

      @include it('color(1)') {
        @include assert {
          @include output {
            @include color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            color: 1;
          }
        }
      }

      @include it('column-gap(1)') {
        @include assert {
          @include output {
            @include column-gap(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            column-gap: 1;
          }
        }
      }

      @include it('columns(1)') {
        @include assert {
          @include output {
            @include columns(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            columns: 1;
          }
        }
      }

      @include it('cursor(1)') {
        @include assert {
          @include output {
            @include cursor(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            cursor: 1;
          }
        }
      }

      @include it('display(1)') {
        @include assert {
          @include output {
            @include display(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            display: 1;
          }
        }
      }

      @include it('fill(1)') {
        @include assert {
          @include output {
            @include fill(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            fill: 1;
          }
        }
      }

      @include it('filter(1)') {
        @include assert {
          @include output {
            @include filter(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            filter: 1;
          }
        }
      }

      @include it('flex(1)') {
        @include assert {
          @include output {
            @include flex(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex: 1;
          }
        }
      }

      @include it('flex-basis(1)') {
        @include assert {
          @include output {
            @include flex-basis(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-basis: 1;
          }
        }
      }

      @include it('flex-direction(1)') {
        @include assert {
          @include output {
            @include flex-direction(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-direction: 1;
          }
        }
      }

      @include it('flex-grow(1)') {
        @include assert {
          @include output {
            @include flex-grow(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-grow: 1;
          }
        }
      }

      @include it('flex-shrink(1)') {
        @include assert {
          @include output {
            @include flex-shrink(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-shrink: 1;
          }
        }
      }

      @include it('flex-wrap(1)') {
        @include assert {
          @include output {
            @include flex-wrap(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-wrap: 1;
          }
        }
      }

      @include it('float(1)') {
        @include assert {
          @include output {
            @include float(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            float: 1;
          }
        }
      }

      @include it('font-family(1)') {
        @include assert {
          @include output {
            @include font-family(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-family: 1;
          }
        }
      }

      @include it('font-size(1)') {
        @include assert {
          @include output {
            @include font-size(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-size: 1;
          }
        }
      }

      @include it('font-style(1)') {
        @include assert {
          @include output {
            @include font-style(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-style: 1;
          }
        }
      }

      @include it('font-variant-numeric(1)') {
        @include assert {
          @include output {
            @include font-variant-numeric(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-variant-numeric: 1;
          }
        }
      }

      @include it('font-weight(1)') {
        @include assert {
          @include output {
            @include font-weight(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-weight: 1;
          }
        }
      }

      @include it('forced-color-adjust(1)') {
        @include assert {
          @include output {
            @include forced-color-adjust(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            forced-color-adjust: 1;
          }
        }
      }

      @include it('gap(1)') {
        @include assert {
          @include output {
            @include gap(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            gap: 1;
          }
        }
      }

      @include it('grid-auto-columns(1)') {
        @include assert {
          @include output {
            @include grid-auto-columns(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-auto-columns: 1;
          }
        }
      }

      @include it('grid-auto-flow(1)') {
        @include assert {
          @include output {
            @include grid-auto-flow(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-auto-flow: 1;
          }
        }
      }

      @include it('grid-auto-rows(1)') {
        @include assert {
          @include output {
            @include grid-auto-rows(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-auto-rows: 1;
          }
        }
      }

      @include it('grid-column(1)') {
        @include assert {
          @include output {
            @include grid-column(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-column: 1;
          }
        }
      }

      @include it('grid-column-end(1)') {
        @include assert {
          @include output {
            @include grid-column-end(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-column-end: 1;
          }
        }
      }

      @include it('grid-column-start(1)') {
        @include assert {
          @include output {
            @include grid-column-start(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-column-start: 1;
          }
        }
      }

      @include it('grid-row(1)') {
        @include assert {
          @include output {
            @include grid-row(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-row: 1;
          }
        }
      }

      @include it('grid-row-end(1)') {
        @include assert {
          @include output {
            @include grid-row-end(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-row-end: 1;
          }
        }
      }

      @include it('grid-row-start(1)') {
        @include assert {
          @include output {
            @include grid-row-start(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-row-start: 1;
          }
        }
      }

      @include it('grid-template-columns(1)') {
        @include assert {
          @include output {
            @include grid-template-columns(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-template-columns: 1;
          }
        }
      }

      @include it('grid-template-rows(1)') {
        @include assert {
          @include output {
            @include grid-template-rows(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-template-rows: 1;
          }
        }
      }

      @include it('height(1)') {
        @include assert {
          @include output {
            @include height(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            height: 1;
          }
        }
      }

      @include it('hyphens(1)') {
        @include assert {
          @include output {
            @include hyphens(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            hyphens: 1;
          }
        }
      }

      @include it('inset(1)') {
        @include assert {
          @include output {
            @include inset(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            inset: 1;
          }
        }
      }

      @include it('inset-inline-end(1)') {
        @include assert {
          @include output {
            @include inset-inline-end(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            inset-inline-end: 1;
          }
        }
      }

      @include it('inset-inline-start(1)') {
        @include assert {
          @include output {
            @include inset-inline-start(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            inset-inline-start: 1;
          }
        }
      }

      @include it('isolation(1)') {
        @include assert {
          @include output {
            @include isolation(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            isolation: 1;
          }
        }
      }

      @include it('justify-content(1)') {
        @include assert {
          @include output {
            @include justify-content(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            justify-content: 1;
          }
        }
      }

      @include it('justify-items(1)') {
        @include assert {
          @include output {
            @include justify-items(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            justify-items: 1;
          }
        }
      }

      @include it('justify-self(1)') {
        @include assert {
          @include output {
            @include justify-self(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            justify-self: 1;
          }
        }
      }

      @include it('left(1)') {
        @include assert {
          @include output {
            @include left(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            left: 1;
          }
        }
      }

      @include it('letter-spacing(1)') {
        @include assert {
          @include output {
            @include letter-spacing(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            letter-spacing: 1;
          }
        }
      }

      @include it('line-height(1)') {
        @include assert {
          @include output {
            @include line-height(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            line-height: 1;
          }
        }
      }

      @include it('list-style-image(1)') {
        @include assert {
          @include output {
            @include list-style-image(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            list-style-image: 1;
          }
        }
      }

      @include it('list-style-position(1)') {
        @include assert {
          @include output {
            @include list-style-position(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            list-style-position: 1;
          }
        }
      }

      @include it('list-style-type(1)') {
        @include assert {
          @include output {
            @include list-style-type(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            list-style-type: 1;
          }
        }
      }

      @include it('margin(1)') {
        @include assert {
          @include output {
            @include margin(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin: 1;
          }
        }
      }

      @include it('margin-bottom(1)') {
        @include assert {
          @include output {
            @include margin-bottom(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-bottom: 1;
          }
        }
      }

      @include it('margin-inline-end(1)') {
        @include assert {
          @include output {
            @include margin-inline-end(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-inline-end: 1;
          }
        }
      }

      @include it('margin-inline-start(1)') {
        @include assert {
          @include output {
            @include margin-inline-start(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-inline-start: 1;
          }
        }
      }

      @include it('margin-left(1)') {
        @include assert {
          @include output {
            @include margin-left(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-left: 1;
          }
        }
      }

      @include it('margin-right(1)') {
        @include assert {
          @include output {
            @include margin-right(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-right: 1;
          }
        }
      }

      @include it('margin-top(1)') {
        @include assert {
          @include output {
            @include margin-top(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-top: 1;
          }
        }
      }

      @include it('max-height(1)') {
        @include assert {
          @include output {
            @include max-height(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            max-height: 1;
          }
        }
      }

      @include it('max-width(1)') {
        @include assert {
          @include output {
            @include max-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            max-width: 1;
          }
        }
      }

      @include it('min-height(1)') {
        @include assert {
          @include output {
            @include min-height(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            min-height: 1;
          }
        }
      }

      @include it('min-width(1)') {
        @include assert {
          @include output {
            @include min-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            min-width: 1;
          }
        }
      }

      @include it('mix-blend-mode(1)') {
        @include assert {
          @include output {
            @include mix-blend-mode(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            mix-blend-mode: 1;
          }
        }
      }

      @include it('object-fit(1)') {
        @include assert {
          @include output {
            @include object-fit(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            object-fit: 1;
          }
        }
      }

      @include it('object-position(1)') {
        @include assert {
          @include output {
            @include object-position(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            object-position: 1;
          }
        }
      }

      @include it('opacity(1)') {
        @include assert {
          @include output {
            @include opacity(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            opacity: 1;
          }
        }
      }

      @include it('order(1)') {
        @include assert {
          @include output {
            @include order(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            order: 1;
          }
        }
      }

      @include it('outline(1)') {
        @include assert {
          @include output {
            @include outline(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline: 1;
          }
        }
      }

      @include it('outline-color(1)') {
        @include assert {
          @include output {
            @include outline-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline-color: 1;
          }
        }
      }

      @include it('outline-offset(1)') {
        @include assert {
          @include output {
            @include outline-offset(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline-offset: 1;
          }
        }
      }

      @include it('outline-style(1)') {
        @include assert {
          @include output {
            @include outline-style(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline-style: 1;
          }
        }
      }

      @include it('outline-width(1)') {
        @include assert {
          @include output {
            @include outline-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline-width: 1;
          }
        }
      }

      @include it('overflow(1)') {
        @include assert {
          @include output {
            @include overflow(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overflow: 1;
          }
        }
      }

      @include it('overflow-wrap(1)') {
        @include assert {
          @include output {
            @include overflow-wrap(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overflow-wrap: 1;
          }
        }
      }

      @include it('overflow-x(1)') {
        @include assert {
          @include output {
            @include overflow-x(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overflow-x: 1;
          }
        }
      }

      @include it('overflow-y(1)') {
        @include assert {
          @include output {
            @include overflow-y(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overflow-y: 1;
          }
        }
      }

      @include it('overscroll-behavior(1)') {
        @include assert {
          @include output {
            @include overscroll-behavior(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overscroll-behavior: 1;
          }
        }
      }

      @include it('overscroll-behavior-x(1)') {
        @include assert {
          @include output {
            @include overscroll-behavior-x(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overscroll-behavior-x: 1;
          }
        }
      }

      @include it('overscroll-behavior-y(1)') {
        @include assert {
          @include output {
            @include overscroll-behavior-y(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overscroll-behavior-y: 1;
          }
        }
      }

      @include it('padding(1)') {
        @include assert {
          @include output {
            @include padding(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding: 1;
          }
        }
      }

      @include it('padding-bottom(1)') {
        @include assert {
          @include output {
            @include padding-bottom(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-bottom: 1;
          }
        }
      }

      @include it('padding-inline-end(1)') {
        @include assert {
          @include output {
            @include padding-inline-end(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-inline-end: 1;
          }
        }
      }

      @include it('padding-inline-start(1)') {
        @include assert {
          @include output {
            @include padding-inline-start(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-inline-start: 1;
          }
        }
      }

      @include it('padding-left(1)') {
        @include assert {
          @include output {
            @include padding-left(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-left: 1;
          }
        }
      }

      @include it('padding-right(1)') {
        @include assert {
          @include output {
            @include padding-right(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-right: 1;
          }
        }
      }

      @include it('padding-top(1)') {
        @include assert {
          @include output {
            @include padding-top(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-top: 1;
          }
        }
      }

      @include it('place-content(1)') {
        @include assert {
          @include output {
            @include place-content(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            place-content: 1;
          }
        }
      }

      @include it('place-items(1)') {
        @include assert {
          @include output {
            @include place-items(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            place-items: 1;
          }
        }
      }

      @include it('place-self(1)') {
        @include assert {
          @include output {
            @include place-self(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            place-self: 1;
          }
        }
      }

      @include it('pointer-events(1)') {
        @include assert {
          @include output {
            @include pointer-events(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            pointer-events: 1;
          }
        }
      }

      @include it('position(1)') {
        @include assert {
          @include output {
            @include position(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            position: 1;
          }
        }
      }

      @include it('resize(1)') {
        @include assert {
          @include output {
            @include resize(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            resize: 1;
          }
        }
      }

      @include it('right(1)') {
        @include assert {
          @include output {
            @include right(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            right: 1;
          }
        }
      }

      @include it('row-gap(1)') {
        @include assert {
          @include output {
            @include row-gap(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            row-gap: 1;
          }
        }
      }

      @include it('scroll-behavior(1)') {
        @include assert {
          @include output {
            @include scroll-behavior(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-behavior: 1;
          }
        }
      }

      @include it('scroll-margin(1)') {
        @include assert {
          @include output {
            @include scroll-margin(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin: 1;
          }
        }
      }

      @include it('scroll-margin-bottom(1)') {
        @include assert {
          @include output {
            @include scroll-margin-bottom(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-bottom: 1;
          }
        }
      }

      @include it('scroll-margin-inline-end(1)') {
        @include assert {
          @include output {
            @include scroll-margin-inline-end(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-inline-end: 1;
          }
        }
      }

      @include it('scroll-margin-inline-start(1)') {
        @include assert {
          @include output {
            @include scroll-margin-inline-start(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-inline-start: 1;
          }
        }
      }

      @include it('scroll-margin-left(1)') {
        @include assert {
          @include output {
            @include scroll-margin-left(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-left: 1;
          }
        }
      }

      @include it('scroll-margin-right(1)') {
        @include assert {
          @include output {
            @include scroll-margin-right(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-right: 1;
          }
        }
      }

      @include it('scroll-margin-top(1)') {
        @include assert {
          @include output {
            @include scroll-margin-top(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-top: 1;
          }
        }
      }

      @include it('scroll-padding(1)') {
        @include assert {
          @include output {
            @include scroll-padding(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding: 1;
          }
        }
      }

      @include it('scroll-padding-bottom(1)') {
        @include assert {
          @include output {
            @include scroll-padding-bottom(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-bottom: 1;
          }
        }
      }

      @include it('scroll-padding-inline-end(1)') {
        @include assert {
          @include output {
            @include scroll-padding-inline-end(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-inline-end: 1;
          }
        }
      }

      @include it('scroll-padding-inline-start(1)') {
        @include assert {
          @include output {
            @include scroll-padding-inline-start(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-inline-start: 1;
          }
        }
      }

      @include it('scroll-padding-left(1)') {
        @include assert {
          @include output {
            @include scroll-padding-left(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-left: 1;
          }
        }
      }

      @include it('scroll-padding-right(1)') {
        @include assert {
          @include output {
            @include scroll-padding-right(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-right: 1;
          }
        }
      }

      @include it('scroll-padding-top(1)') {
        @include assert {
          @include output {
            @include scroll-padding-top(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-top: 1;
          }
        }
      }

      @include it('scroll-snap-align(1)') {
        @include assert {
          @include output {
            @include scroll-snap-align(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-snap-align: 1;
          }
        }
      }

      @include it('scroll-snap-stop(1)') {
        @include assert {
          @include output {
            @include scroll-snap-stop(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-snap-stop: 1;
          }
        }
      }

      @include it('scroll-snap-type(1)') {
        @include assert {
          @include output {
            @include scroll-snap-type(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-snap-type: 1;
          }
        }
      }

      @include it('stroke(1)') {
        @include assert {
          @include output {
            @include stroke(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            stroke: 1;
          }
        }
      }

      @include it('stroke-width(1)') {
        @include assert {
          @include output {
            @include stroke-width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            stroke-width: 1;
          }
        }
      }

      @include it('table-layout(1)') {
        @include assert {
          @include output {
            @include table-layout(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            table-layout: 1;
          }
        }
      }

      @include it('text-align(1)') {
        @include assert {
          @include output {
            @include text-align(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-align: 1;
          }
        }
      }

      @include it('text-decoration-color(1)') {
        @include assert {
          @include output {
            @include text-decoration-color(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-decoration-color: 1;
          }
        }
      }

      @include it('text-decoration-line(1)') {
        @include assert {
          @include output {
            @include text-decoration-line(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-decoration-line: 1;
          }
        }
      }

      @include it('text-decoration-style(1)') {
        @include assert {
          @include output {
            @include text-decoration-style(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-decoration-style: 1;
          }
        }
      }

      @include it('text-decoration-thickness(1)') {
        @include assert {
          @include output {
            @include text-decoration-thickness(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-decoration-thickness: 1;
          }
        }
      }

      @include it('text-indent(1)') {
        @include assert {
          @include output {
            @include text-indent(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-indent: 1;
          }
        }
      }

      @include it('text-overflow(1)') {
        @include assert {
          @include output {
            @include text-overflow(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-overflow: 1;
          }
        }
      }

      @include it('text-transform(1)') {
        @include assert {
          @include output {
            @include text-transform(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-transform: 1;
          }
        }
      }

      @include it('text-underline-offset(1)') {
        @include assert {
          @include output {
            @include text-underline-offset(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-underline-offset: 1;
          }
        }
      }

      @include it('text-wrap(1)') {
        @include assert {
          @include output {
            @include text-wrap(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-wrap: 1;
          }
        }
      }

      @include it('top(1)') {
        @include assert {
          @include output {
            @include top(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            top: 1;
          }
        }
      }

      @include it('touch-action(1)') {
        @include assert {
          @include output {
            @include touch-action(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            touch-action: 1;
          }
        }
      }

      @include it('transform(1)') {
        @include assert {
          @include output {
            @include transform(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transform: 1;
          }
        }
      }

      @include it('transform-origin(1)') {
        @include assert {
          @include output {
            @include transform-origin(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transform-origin: 1;
          }
        }
      }

      @include it('transition-delay(1)') {
        @include assert {
          @include output {
            @include transition-delay(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transition-delay: 1;
          }
        }
      }

      @include it('transition-duration(1)') {
        @include assert {
          @include output {
            @include transition-duration(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transition-duration: 1;
          }
        }
      }

      @include it('transition-property(1)') {
        @include assert {
          @include output {
            @include transition-property(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transition-property: 1;
          }
        }
      }

      @include it('transition-timing-function(1)') {
        @include assert {
          @include output {
            @include transition-timing-function(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transition-timing-function: 1;
          }
        }
      }

      @include it('user-select(1)') {
        @include assert {
          @include output {
            @include user-select(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            user-select: 1;
          }
        }
      }

      @include it('vertical-align(1)') {
        @include assert {
          @include output {
            @include vertical-align(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            vertical-align: 1;
          }
        }
      }

      @include it('visibility(1)') {
        @include assert {
          @include output {
            @include visibility(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            visibility: 1;
          }
        }
      }

      @include it('white-space(1)') {
        @include assert {
          @include output {
            @include white-space(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            white-space: 1;
          }
        }
      }

      @include it('width(1)') {
        @include assert {
          @include output {
            @include width(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            width: 1;
          }
        }
      }

      @include it('will-change(1)') {
        @include assert {
          @include output {
            @include will-change(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            will-change: 1;
          }
        }
      }

      @include it('word-break(1)') {
        @include assert {
          @include output {
            @include word-break(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            word-break: 1;
          }
        }
      }

      @include it('z-index(1)') {
        @include assert {
          @include output {
            @include z-index(1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            z-index: 1;
          }
        }
      }
    }

    @include describe('Negative') {
      @include it('-moz-osx-font-smoothing(-1)') {
        @include assert {
          @include output {
            @include -moz-osx-font-smoothing(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            -moz-osx-font-smoothing: -1;
          }
        }
      }

      @include it('-webkit-box-orient(-1)') {
        @include assert {
          @include output {
            @include -webkit-box-orient(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            -webkit-box-orient: -1;
          }
        }
      }

      @include it('-webkit-font-smoothing(-1)') {
        @include assert {
          @include output {
            @include -webkit-font-smoothing(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            -webkit-font-smoothing: -1;
          }
        }
      }

      @include it('-webkit-line-clamp(-1)') {
        @include assert {
          @include output {
            @include -webkit-line-clamp(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            -webkit-line-clamp: -1;
          }
        }
      }

      @include it('accent-color(-1)') {
        @include assert {
          @include output {
            @include accent-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            accent-color: -1;
          }
        }
      }

      @include it('align-content(-1)') {
        @include assert {
          @include output {
            @include align-content(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            align-content: -1;
          }
        }
      }

      @include it('align-items(-1)') {
        @include assert {
          @include output {
            @include align-items(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            align-items: -1;
          }
        }
      }

      @include it('align-self(-1)') {
        @include assert {
          @include output {
            @include align-self(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            align-self: -1;
          }
        }
      }

      @include it('animation(-1)') {
        @include assert {
          @include output {
            @include animation(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            animation: -1;
          }
        }
      }

      @include it('appearance(-1)') {
        @include assert {
          @include output {
            @include appearance(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            appearance: -1;
          }
        }
      }

      @include it('aspect-ratio(-1)') {
        @include assert {
          @include output {
            @include aspect-ratio(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            aspect-ratio: -1;
          }
        }
      }

      @include it('backdrop-filter(-1)') {
        @include assert {
          @include output {
            @include backdrop-filter(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            backdrop-filter: -1;
          }
        }
      }

      @include it('background-attachment(-1)') {
        @include assert {
          @include output {
            @include background-attachment(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-attachment: -1;
          }
        }
      }

      @include it('background-blend-mode(-1)') {
        @include assert {
          @include output {
            @include background-blend-mode(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-blend-mode: -1;
          }
        }
      }

      @include it('background-clip(-1)') {
        @include assert {
          @include output {
            @include background-clip(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-clip: -1;
          }
        }
      }

      @include it('background-color(-1)') {
        @include assert {
          @include output {
            @include background-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-color: -1;
          }
        }
      }

      @include it('background-image(-1)') {
        @include assert {
          @include output {
            @include background-image(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-image: -1;
          }
        }
      }

      @include it('background-origin(-1)') {
        @include assert {
          @include output {
            @include background-origin(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-origin: -1;
          }
        }
      }

      @include it('background-position(-1)') {
        @include assert {
          @include output {
            @include background-position(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-position: -1;
          }
        }
      }

      @include it('background-repeat(-1)') {
        @include assert {
          @include output {
            @include background-repeat(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-repeat: -1;
          }
        }
      }

      @include it('background-size(-1)') {
        @include assert {
          @include output {
            @include background-size(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            background-size: -1;
          }
        }
      }

      @include it('border-bottom-color(-1)') {
        @include assert {
          @include output {
            @include border-bottom-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-bottom-color: -1;
          }
        }
      }

      @include it('border-bottom-left-radius(-1)') {
        @include assert {
          @include output {
            @include border-bottom-left-radius(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-bottom-left-radius: -1;
          }
        }
      }

      @include it('border-bottom-right-radius(-1)') {
        @include assert {
          @include output {
            @include border-bottom-right-radius(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-bottom-right-radius: -1;
          }
        }
      }

      @include it('border-bottom-width(-1)') {
        @include assert {
          @include output {
            @include border-bottom-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-bottom-width: -1;
          }
        }
      }

      @include it('border-collapse(-1)') {
        @include assert {
          @include output {
            @include border-collapse(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-collapse: -1;
          }
        }
      }

      @include it('border-color(-1)') {
        @include assert {
          @include output {
            @include border-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-color: -1;
          }
        }
      }

      @include it('border-end-end-radius(-1)') {
        @include assert {
          @include output {
            @include border-end-end-radius(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-end-end-radius: -1;
          }
        }
      }

      @include it('border-end-start-radius(-1)') {
        @include assert {
          @include output {
            @include border-end-start-radius(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-end-start-radius: -1;
          }
        }
      }

      @include it('border-inline-end-color(-1)') {
        @include assert {
          @include output {
            @include border-inline-end-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-inline-end-color: -1;
          }
        }
      }

      @include it('border-inline-end-width(-1)') {
        @include assert {
          @include output {
            @include border-inline-end-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-inline-end-width: -1;
          }
        }
      }

      @include it('border-inline-start-color(-1)') {
        @include assert {
          @include output {
            @include border-inline-start-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-inline-start-color: -1;
          }
        }
      }

      @include it('border-inline-start-width(-1)') {
        @include assert {
          @include output {
            @include border-inline-start-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-inline-start-width: -1;
          }
        }
      }

      @include it('border-left-color(-1)') {
        @include assert {
          @include output {
            @include border-left-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-left-color: -1;
          }
        }
      }

      @include it('border-left-width(-1)') {
        @include assert {
          @include output {
            @include border-left-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-left-width: -1;
          }
        }
      }

      @include it('border-radius(-1)') {
        @include assert {
          @include output {
            @include border-radius(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-radius: -1;
          }
        }
      }

      @include it('border-right-color(-1)') {
        @include assert {
          @include output {
            @include border-right-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-right-color: -1;
          }
        }
      }

      @include it('border-right-width(-1)') {
        @include assert {
          @include output {
            @include border-right-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-right-width: -1;
          }
        }
      }

      @include it('border-spacing(-1)') {
        @include assert {
          @include output {
            @include border-spacing(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-spacing: -1;
          }
        }
      }

      @include it('border-start-end-radius(-1)') {
        @include assert {
          @include output {
            @include border-start-end-radius(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-start-end-radius: -1;
          }
        }
      }

      @include it('border-start-start-radius(-1)') {
        @include assert {
          @include output {
            @include border-start-start-radius(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-start-start-radius: -1;
          }
        }
      }

      @include it('border-style(-1)') {
        @include assert {
          @include output {
            @include border-style(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-style: -1;
          }
        }
      }

      @include it('border-top-color(-1)') {
        @include assert {
          @include output {
            @include border-top-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-top-color: -1;
          }
        }
      }

      @include it('border-top-left-radius(-1)') {
        @include assert {
          @include output {
            @include border-top-left-radius(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-top-left-radius: -1;
          }
        }
      }

      @include it('border-top-right-radius(-1)') {
        @include assert {
          @include output {
            @include border-top-right-radius(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-top-right-radius: -1;
          }
        }
      }

      @include it('border-top-width(-1)') {
        @include assert {
          @include output {
            @include border-top-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-top-width: -1;
          }
        }
      }

      @include it('border-width(-1)') {
        @include assert {
          @include output {
            @include border-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            border-width: -1;
          }
        }
      }

      @include it('bottom(-1)') {
        @include assert {
          @include output {
            @include bottom(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            bottom: -1;
          }
        }
      }

      @include it('box-decoration-break(-1)') {
        @include assert {
          @include output {
            @include box-decoration-break(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            box-decoration-break: -1;
          }
        }
      }

      @include it('box-shadow(-1)') {
        @include assert {
          @include output {
            @include box-shadow(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            box-shadow: -1;
          }
        }
      }

      @include it('box-sizing(-1)') {
        @include assert {
          @include output {
            @include box-sizing(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            box-sizing: -1;
          }
        }
      }

      @include it('break-after(-1)') {
        @include assert {
          @include output {
            @include break-after(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            break-after: -1;
          }
        }
      }

      @include it('break-before(-1)') {
        @include assert {
          @include output {
            @include break-before(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            break-before: -1;
          }
        }
      }

      @include it('break-inside(-1)') {
        @include assert {
          @include output {
            @include break-inside(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            break-inside: -1;
          }
        }
      }

      @include it('caption-side(-1)') {
        @include assert {
          @include output {
            @include caption-side(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            caption-side: -1;
          }
        }
      }

      @include it('caret-color(-1)') {
        @include assert {
          @include output {
            @include caret-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            caret-color: -1;
          }
        }
      }

      @include it('clear(-1)') {
        @include assert {
          @include output {
            @include clear(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            clear: -1;
          }
        }
      }

      @include it('clip(-1)') {
        @include assert {
          @include output {
            @include clip(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            clip: -1;
          }
        }
      }

      @include it('color(-1)') {
        @include assert {
          @include output {
            @include color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            color: -1;
          }
        }
      }

      @include it('column-gap(-1)') {
        @include assert {
          @include output {
            @include column-gap(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            column-gap: -1;
          }
        }
      }

      @include it('columns(-1)') {
        @include assert {
          @include output {
            @include columns(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            columns: -1;
          }
        }
      }

      @include it('cursor(-1)') {
        @include assert {
          @include output {
            @include cursor(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            cursor: -1;
          }
        }
      }

      @include it('display(-1)') {
        @include assert {
          @include output {
            @include display(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            display: -1;
          }
        }
      }

      @include it('fill(-1)') {
        @include assert {
          @include output {
            @include fill(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            fill: -1;
          }
        }
      }

      @include it('filter(-1)') {
        @include assert {
          @include output {
            @include filter(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            filter: -1;
          }
        }
      }

      @include it('flex(-1)') {
        @include assert {
          @include output {
            @include flex(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex: -1;
          }
        }
      }

      @include it('flex-basis(-1)') {
        @include assert {
          @include output {
            @include flex-basis(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-basis: -1;
          }
        }
      }

      @include it('flex-direction(-1)') {
        @include assert {
          @include output {
            @include flex-direction(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-direction: -1;
          }
        }
      }

      @include it('flex-grow(-1)') {
        @include assert {
          @include output {
            @include flex-grow(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-grow: -1;
          }
        }
      }

      @include it('flex-shrink(-1)') {
        @include assert {
          @include output {
            @include flex-shrink(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-shrink: -1;
          }
        }
      }

      @include it('flex-wrap(-1)') {
        @include assert {
          @include output {
            @include flex-wrap(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            flex-wrap: -1;
          }
        }
      }

      @include it('float(-1)') {
        @include assert {
          @include output {
            @include float(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            float: -1;
          }
        }
      }

      @include it('font-family(-1)') {
        @include assert {
          @include output {
            @include font-family(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-family: -1;
          }
        }
      }

      @include it('font-size(-1)') {
        @include assert {
          @include output {
            @include font-size(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-size: -1;
          }
        }
      }

      @include it('font-style(-1)') {
        @include assert {
          @include output {
            @include font-style(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-style: -1;
          }
        }
      }

      @include it('font-variant-numeric(-1)') {
        @include assert {
          @include output {
            @include font-variant-numeric(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-variant-numeric: -1;
          }
        }
      }

      @include it('font-weight(-1)') {
        @include assert {
          @include output {
            @include font-weight(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            font-weight: -1;
          }
        }
      }

      @include it('forced-color-adjust(-1)') {
        @include assert {
          @include output {
            @include forced-color-adjust(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            forced-color-adjust: -1;
          }
        }
      }

      @include it('gap(-1)') {
        @include assert {
          @include output {
            @include gap(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            gap: -1;
          }
        }
      }

      @include it('grid-auto-columns(-1)') {
        @include assert {
          @include output {
            @include grid-auto-columns(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-auto-columns: -1;
          }
        }
      }

      @include it('grid-auto-flow(-1)') {
        @include assert {
          @include output {
            @include grid-auto-flow(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-auto-flow: -1;
          }
        }
      }

      @include it('grid-auto-rows(-1)') {
        @include assert {
          @include output {
            @include grid-auto-rows(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-auto-rows: -1;
          }
        }
      }

      @include it('grid-column(-1)') {
        @include assert {
          @include output {
            @include grid-column(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-column: -1;
          }
        }
      }

      @include it('grid-column-end(-1)') {
        @include assert {
          @include output {
            @include grid-column-end(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-column-end: -1;
          }
        }
      }

      @include it('grid-column-start(-1)') {
        @include assert {
          @include output {
            @include grid-column-start(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-column-start: -1;
          }
        }
      }

      @include it('grid-row(-1)') {
        @include assert {
          @include output {
            @include grid-row(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-row: -1;
          }
        }
      }

      @include it('grid-row-end(-1)') {
        @include assert {
          @include output {
            @include grid-row-end(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-row-end: -1;
          }
        }
      }

      @include it('grid-row-start(-1)') {
        @include assert {
          @include output {
            @include grid-row-start(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-row-start: -1;
          }
        }
      }

      @include it('grid-template-columns(-1)') {
        @include assert {
          @include output {
            @include grid-template-columns(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-template-columns: -1;
          }
        }
      }

      @include it('grid-template-rows(-1)') {
        @include assert {
          @include output {
            @include grid-template-rows(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            grid-template-rows: -1;
          }
        }
      }

      @include it('height(-1)') {
        @include assert {
          @include output {
            @include height(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            height: -1;
          }
        }
      }

      @include it('hyphens(-1)') {
        @include assert {
          @include output {
            @include hyphens(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            hyphens: -1;
          }
        }
      }

      @include it('inset(-1)') {
        @include assert {
          @include output {
            @include inset(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            inset: -1;
          }
        }
      }

      @include it('inset-inline-end(-1)') {
        @include assert {
          @include output {
            @include inset-inline-end(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            inset-inline-end: -1;
          }
        }
      }

      @include it('inset-inline-start(-1)') {
        @include assert {
          @include output {
            @include inset-inline-start(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            inset-inline-start: -1;
          }
        }
      }

      @include it('isolation(-1)') {
        @include assert {
          @include output {
            @include isolation(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            isolation: -1;
          }
        }
      }

      @include it('justify-content(-1)') {
        @include assert {
          @include output {
            @include justify-content(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            justify-content: -1;
          }
        }
      }

      @include it('justify-items(-1)') {
        @include assert {
          @include output {
            @include justify-items(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            justify-items: -1;
          }
        }
      }

      @include it('justify-self(-1)') {
        @include assert {
          @include output {
            @include justify-self(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            justify-self: -1;
          }
        }
      }

      @include it('left(-1)') {
        @include assert {
          @include output {
            @include left(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            left: -1;
          }
        }
      }

      @include it('letter-spacing(-1)') {
        @include assert {
          @include output {
            @include letter-spacing(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            letter-spacing: -1;
          }
        }
      }

      @include it('line-height(-1)') {
        @include assert {
          @include output {
            @include line-height(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            line-height: -1;
          }
        }
      }

      @include it('list-style-image(-1)') {
        @include assert {
          @include output {
            @include list-style-image(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            list-style-image: -1;
          }
        }
      }

      @include it('list-style-position(-1)') {
        @include assert {
          @include output {
            @include list-style-position(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            list-style-position: -1;
          }
        }
      }

      @include it('list-style-type(-1)') {
        @include assert {
          @include output {
            @include list-style-type(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            list-style-type: -1;
          }
        }
      }

      @include it('margin(-1)') {
        @include assert {
          @include output {
            @include margin(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin: -1;
          }
        }
      }

      @include it('margin-bottom(-1)') {
        @include assert {
          @include output {
            @include margin-bottom(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-bottom: -1;
          }
        }
      }

      @include it('margin-inline-end(-1)') {
        @include assert {
          @include output {
            @include margin-inline-end(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-inline-end: -1;
          }
        }
      }

      @include it('margin-inline-start(-1)') {
        @include assert {
          @include output {
            @include margin-inline-start(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-inline-start: -1;
          }
        }
      }

      @include it('margin-left(-1)') {
        @include assert {
          @include output {
            @include margin-left(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-left: -1;
          }
        }
      }

      @include it('margin-right(-1)') {
        @include assert {
          @include output {
            @include margin-right(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-right: -1;
          }
        }
      }

      @include it('margin-top(-1)') {
        @include assert {
          @include output {
            @include margin-top(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            margin-top: -1;
          }
        }
      }

      @include it('max-height(-1)') {
        @include assert {
          @include output {
            @include max-height(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            max-height: -1;
          }
        }
      }

      @include it('max-width(-1)') {
        @include assert {
          @include output {
            @include max-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            max-width: -1;
          }
        }
      }

      @include it('min-height(-1)') {
        @include assert {
          @include output {
            @include min-height(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            min-height: -1;
          }
        }
      }

      @include it('min-width(-1)') {
        @include assert {
          @include output {
            @include min-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            min-width: -1;
          }
        }
      }

      @include it('mix-blend-mode(-1)') {
        @include assert {
          @include output {
            @include mix-blend-mode(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            mix-blend-mode: -1;
          }
        }
      }

      @include it('object-fit(-1)') {
        @include assert {
          @include output {
            @include object-fit(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            object-fit: -1;
          }
        }
      }

      @include it('object-position(-1)') {
        @include assert {
          @include output {
            @include object-position(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            object-position: -1;
          }
        }
      }

      @include it('opacity(-1)') {
        @include assert {
          @include output {
            @include opacity(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            opacity: -1;
          }
        }
      }

      @include it('order(-1)') {
        @include assert {
          @include output {
            @include order(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            order: -1;
          }
        }
      }

      @include it('outline(-1)') {
        @include assert {
          @include output {
            @include outline(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline: -1;
          }
        }
      }

      @include it('outline-color(-1)') {
        @include assert {
          @include output {
            @include outline-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline-color: -1;
          }
        }
      }

      @include it('outline-offset(-1)') {
        @include assert {
          @include output {
            @include outline-offset(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline-offset: -1;
          }
        }
      }

      @include it('outline-style(-1)') {
        @include assert {
          @include output {
            @include outline-style(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline-style: -1;
          }
        }
      }

      @include it('outline-width(-1)') {
        @include assert {
          @include output {
            @include outline-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            outline-width: -1;
          }
        }
      }

      @include it('overflow(-1)') {
        @include assert {
          @include output {
            @include overflow(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overflow: -1;
          }
        }
      }

      @include it('overflow-wrap(-1)') {
        @include assert {
          @include output {
            @include overflow-wrap(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overflow-wrap: -1;
          }
        }
      }

      @include it('overflow-x(-1)') {
        @include assert {
          @include output {
            @include overflow-x(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overflow-x: -1;
          }
        }
      }

      @include it('overflow-y(-1)') {
        @include assert {
          @include output {
            @include overflow-y(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overflow-y: -1;
          }
        }
      }

      @include it('overscroll-behavior(-1)') {
        @include assert {
          @include output {
            @include overscroll-behavior(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overscroll-behavior: -1;
          }
        }
      }

      @include it('overscroll-behavior-x(-1)') {
        @include assert {
          @include output {
            @include overscroll-behavior-x(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overscroll-behavior-x: -1;
          }
        }
      }

      @include it('overscroll-behavior-y(-1)') {
        @include assert {
          @include output {
            @include overscroll-behavior-y(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            overscroll-behavior-y: -1;
          }
        }
      }

      @include it('padding(-1)') {
        @include assert {
          @include output {
            @include padding(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding: -1;
          }
        }
      }

      @include it('padding-bottom(-1)') {
        @include assert {
          @include output {
            @include padding-bottom(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-bottom: -1;
          }
        }
      }

      @include it('padding-inline-end(-1)') {
        @include assert {
          @include output {
            @include padding-inline-end(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-inline-end: -1;
          }
        }
      }

      @include it('padding-inline-start(-1)') {
        @include assert {
          @include output {
            @include padding-inline-start(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-inline-start: -1;
          }
        }
      }

      @include it('padding-left(-1)') {
        @include assert {
          @include output {
            @include padding-left(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-left: -1;
          }
        }
      }

      @include it('padding-right(-1)') {
        @include assert {
          @include output {
            @include padding-right(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-right: -1;
          }
        }
      }

      @include it('padding-top(-1)') {
        @include assert {
          @include output {
            @include padding-top(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            padding-top: -1;
          }
        }
      }

      @include it('place-content(-1)') {
        @include assert {
          @include output {
            @include place-content(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            place-content: -1;
          }
        }
      }

      @include it('place-items(-1)') {
        @include assert {
          @include output {
            @include place-items(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            place-items: -1;
          }
        }
      }

      @include it('place-self(-1)') {
        @include assert {
          @include output {
            @include place-self(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            place-self: -1;
          }
        }
      }

      @include it('pointer-events(-1)') {
        @include assert {
          @include output {
            @include pointer-events(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            pointer-events: -1;
          }
        }
      }

      @include it('position(-1)') {
        @include assert {
          @include output {
            @include position(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            position: -1;
          }
        }
      }

      @include it('resize(-1)') {
        @include assert {
          @include output {
            @include resize(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            resize: -1;
          }
        }
      }

      @include it('right(-1)') {
        @include assert {
          @include output {
            @include right(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            right: -1;
          }
        }
      }

      @include it('row-gap(-1)') {
        @include assert {
          @include output {
            @include row-gap(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            row-gap: -1;
          }
        }
      }

      @include it('scroll-behavior(-1)') {
        @include assert {
          @include output {
            @include scroll-behavior(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-behavior: -1;
          }
        }
      }

      @include it('scroll-margin(-1)') {
        @include assert {
          @include output {
            @include scroll-margin(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin: -1;
          }
        }
      }

      @include it('scroll-margin-bottom(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-bottom(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-bottom: -1;
          }
        }
      }

      @include it('scroll-margin-inline-end(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-inline-end(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-inline-end: -1;
          }
        }
      }

      @include it('scroll-margin-inline-start(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-inline-start(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-inline-start: -1;
          }
        }
      }

      @include it('scroll-margin-left(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-left(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-left: -1;
          }
        }
      }

      @include it('scroll-margin-right(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-right(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-right: -1;
          }
        }
      }

      @include it('scroll-margin-top(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-top(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-margin-top: -1;
          }
        }
      }

      @include it('scroll-padding(-1)') {
        @include assert {
          @include output {
            @include scroll-padding(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding: -1;
          }
        }
      }

      @include it('scroll-padding-bottom(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-bottom(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-bottom: -1;
          }
        }
      }

      @include it('scroll-padding-inline-end(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-inline-end(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-inline-end: -1;
          }
        }
      }

      @include it('scroll-padding-inline-start(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-inline-start(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-inline-start: -1;
          }
        }
      }

      @include it('scroll-padding-left(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-left(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-left: -1;
          }
        }
      }

      @include it('scroll-padding-right(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-right(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-right: -1;
          }
        }
      }

      @include it('scroll-padding-top(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-top(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-padding-top: -1;
          }
        }
      }

      @include it('scroll-snap-align(-1)') {
        @include assert {
          @include output {
            @include scroll-snap-align(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-snap-align: -1;
          }
        }
      }

      @include it('scroll-snap-stop(-1)') {
        @include assert {
          @include output {
            @include scroll-snap-stop(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-snap-stop: -1;
          }
        }
      }

      @include it('scroll-snap-type(-1)') {
        @include assert {
          @include output {
            @include scroll-snap-type(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            scroll-snap-type: -1;
          }
        }
      }

      @include it('stroke(-1)') {
        @include assert {
          @include output {
            @include stroke(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            stroke: -1;
          }
        }
      }

      @include it('stroke-width(-1)') {
        @include assert {
          @include output {
            @include stroke-width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            stroke-width: -1;
          }
        }
      }

      @include it('table-layout(-1)') {
        @include assert {
          @include output {
            @include table-layout(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            table-layout: -1;
          }
        }
      }

      @include it('text-align(-1)') {
        @include assert {
          @include output {
            @include text-align(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-align: -1;
          }
        }
      }

      @include it('text-decoration-color(-1)') {
        @include assert {
          @include output {
            @include text-decoration-color(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-decoration-color: -1;
          }
        }
      }

      @include it('text-decoration-line(-1)') {
        @include assert {
          @include output {
            @include text-decoration-line(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-decoration-line: -1;
          }
        }
      }

      @include it('text-decoration-style(-1)') {
        @include assert {
          @include output {
            @include text-decoration-style(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-decoration-style: -1;
          }
        }
      }

      @include it('text-decoration-thickness(-1)') {
        @include assert {
          @include output {
            @include text-decoration-thickness(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-decoration-thickness: -1;
          }
        }
      }

      @include it('text-indent(-1)') {
        @include assert {
          @include output {
            @include text-indent(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-indent: -1;
          }
        }
      }

      @include it('text-overflow(-1)') {
        @include assert {
          @include output {
            @include text-overflow(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-overflow: -1;
          }
        }
      }

      @include it('text-transform(-1)') {
        @include assert {
          @include output {
            @include text-transform(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-transform: -1;
          }
        }
      }

      @include it('text-underline-offset(-1)') {
        @include assert {
          @include output {
            @include text-underline-offset(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-underline-offset: -1;
          }
        }
      }

      @include it('text-wrap(-1)') {
        @include assert {
          @include output {
            @include text-wrap(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            text-wrap: -1;
          }
        }
      }

      @include it('top(-1)') {
        @include assert {
          @include output {
            @include top(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            top: -1;
          }
        }
      }

      @include it('touch-action(-1)') {
        @include assert {
          @include output {
            @include touch-action(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            touch-action: -1;
          }
        }
      }

      @include it('transform(-1)') {
        @include assert {
          @include output {
            @include transform(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transform: -1;
          }
        }
      }

      @include it('transform-origin(-1)') {
        @include assert {
          @include output {
            @include transform-origin(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transform-origin: -1;
          }
        }
      }

      @include it('transition-delay(-1)') {
        @include assert {
          @include output {
            @include transition-delay(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transition-delay: -1;
          }
        }
      }

      @include it('transition-duration(-1)') {
        @include assert {
          @include output {
            @include transition-duration(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transition-duration: -1;
          }
        }
      }

      @include it('transition-property(-1)') {
        @include assert {
          @include output {
            @include transition-property(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transition-property: -1;
          }
        }
      }

      @include it('transition-timing-function(-1)') {
        @include assert {
          @include output {
            @include transition-timing-function(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            transition-timing-function: -1;
          }
        }
      }

      @include it('user-select(-1)') {
        @include assert {
          @include output {
            @include user-select(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            user-select: -1;
          }
        }
      }

      @include it('vertical-align(-1)') {
        @include assert {
          @include output {
            @include vertical-align(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            vertical-align: -1;
          }
        }
      }

      @include it('visibility(-1)') {
        @include assert {
          @include output {
            @include visibility(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            visibility: -1;
          }
        }
      }

      @include it('white-space(-1)') {
        @include assert {
          @include output {
            @include white-space(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            white-space: -1;
          }
        }
      }

      @include it('width(-1)') {
        @include assert {
          @include output {
            @include width(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            width: -1;
          }
        }
      }

      @include it('will-change(-1, -1)') {
        @include assert {
          @include output {
            @include will-change(-1, -1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            will-change:
              -1,
              -1;
          }
        }
      }

      @include it('word-break(-1)') {
        @include assert {
          @include output {
            @include word-break(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            word-break: -1;
          }
        }
      }

      @include it('z-index(-1)') {
        @include assert {
          @include output {
            @include z-index(-1);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            z-index: -1;
          }
        }
      }
    }
  }

  @include describe('Rwd') {
    @include describe('Positive') {
      @include it('sm\:-moz-osx-font-smoothing(1)') {
        @include assert {
          @include output {
            @include -moz-osx-font-smoothing(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              -moz-osx-font-smoothing: 1;
            }
          }
        }
      }

      @include it('sm\:-webkit-box-orient(1)') {
        @include assert {
          @include output {
            @include -webkit-box-orient(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              -webkit-box-orient: 1;
            }
          }
        }
      }

      @include it('sm\:-webkit-font-smoothing(1)') {
        @include assert {
          @include output {
            @include -webkit-font-smoothing(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              -webkit-font-smoothing: 1;
            }
          }
        }
      }

      @include it('sm\:-webkit-line-clamp(1)') {
        @include assert {
          @include output {
            @include -webkit-line-clamp(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              -webkit-line-clamp: 1;
            }
          }
        }
      }

      @include it('sm\:accent-color(1)') {
        @include assert {
          @include output {
            @include accent-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              accent-color: 1;
            }
          }
        }
      }

      @include it('sm\:align-content(1)') {
        @include assert {
          @include output {
            @include align-content(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              align-content: 1;
            }
          }
        }
      }

      @include it('sm\:align-items(1)') {
        @include assert {
          @include output {
            @include align-items(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              align-items: 1;
            }
          }
        }
      }

      @include it('sm\:align-self(1)') {
        @include assert {
          @include output {
            @include align-self(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              align-self: 1;
            }
          }
        }
      }

      @include it('sm\:animation(1)') {
        @include assert {
          @include output {
            @include animation(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              animation: 1;
            }
          }
        }
      }

      @include it('sm\:appearance(1)') {
        @include assert {
          @include output {
            @include appearance(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              appearance: 1;
            }
          }
        }
      }

      @include it('sm\:aspect-ratio(1)') {
        @include assert {
          @include output {
            @include aspect-ratio(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              aspect-ratio: 1;
            }
          }
        }
      }

      @include it('sm\:backdrop-filter(1)') {
        @include assert {
          @include output {
            @include backdrop-filter(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              backdrop-filter: 1;
            }
          }
        }
      }

      @include it('sm\:background-attachment(1)') {
        @include assert {
          @include output {
            @include background-attachment(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-attachment: 1;
            }
          }
        }
      }

      @include it('sm\:background-blend-mode(1)') {
        @include assert {
          @include output {
            @include background-blend-mode(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-blend-mode: 1;
            }
          }
        }
      }

      @include it('sm\:background-clip(1)') {
        @include assert {
          @include output {
            @include background-clip(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-clip: 1;
            }
          }
        }
      }

      @include it('sm\:background-color(1)') {
        @include assert {
          @include output {
            @include background-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-color: 1;
            }
          }
        }
      }

      @include it('sm\:background-image(1)') {
        @include assert {
          @include output {
            @include background-image(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-image: 1;
            }
          }
        }
      }

      @include it('sm\:background-origin(1)') {
        @include assert {
          @include output {
            @include background-origin(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-origin: 1;
            }
          }
        }
      }

      @include it('sm\:background-position(1)') {
        @include assert {
          @include output {
            @include background-position(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-position: 1;
            }
          }
        }
      }

      @include it('sm\:background-repeat(1)') {
        @include assert {
          @include output {
            @include background-repeat(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-repeat: 1;
            }
          }
        }
      }

      @include it('sm\:background-size(1)') {
        @include assert {
          @include output {
            @include background-size(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-size: 1;
            }
          }
        }
      }

      @include it('sm\:border-bottom-color(1)') {
        @include assert {
          @include output {
            @include border-bottom-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-bottom-color: 1;
            }
          }
        }
      }

      @include it('sm\:border-bottom-left-radius(1)') {
        @include assert {
          @include output {
            @include border-bottom-left-radius(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-bottom-left-radius: 1;
            }
          }
        }
      }

      @include it('sm\:border-bottom-right-radius(1)') {
        @include assert {
          @include output {
            @include border-bottom-right-radius(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-bottom-right-radius: 1;
            }
          }
        }
      }

      @include it('sm\:border-bottom-width(1)') {
        @include assert {
          @include output {
            @include border-bottom-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-bottom-width: 1;
            }
          }
        }
      }

      @include it('sm\:border-collapse(1)') {
        @include assert {
          @include output {
            @include border-collapse(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-collapse: 1;
            }
          }
        }
      }

      @include it('sm\:border-color(1)') {
        @include assert {
          @include output {
            @include border-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-color: 1;
            }
          }
        }
      }

      @include it('sm\:border-end-end-radius(1)') {
        @include assert {
          @include output {
            @include border-end-end-radius(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-end-end-radius: 1;
            }
          }
        }
      }

      @include it('sm\:border-end-start-radius(1)') {
        @include assert {
          @include output {
            @include border-end-start-radius(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-end-start-radius: 1;
            }
          }
        }
      }

      @include it('sm\:border-inline-end-color(1)') {
        @include assert {
          @include output {
            @include border-inline-end-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-inline-end-color: 1;
            }
          }
        }
      }

      @include it('sm\:border-inline-end-width(1)') {
        @include assert {
          @include output {
            @include border-inline-end-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-inline-end-width: 1;
            }
          }
        }
      }

      @include it('sm\:border-inline-start-color(1)') {
        @include assert {
          @include output {
            @include border-inline-start-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-inline-start-color: 1;
            }
          }
        }
      }

      @include it('sm\:border-inline-start-width(1)') {
        @include assert {
          @include output {
            @include border-inline-start-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-inline-start-width: 1;
            }
          }
        }
      }

      @include it('sm\:border-left-color(1)') {
        @include assert {
          @include output {
            @include border-left-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-left-color: 1;
            }
          }
        }
      }

      @include it('sm\:border-left-width(1)') {
        @include assert {
          @include output {
            @include border-left-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-left-width: 1;
            }
          }
        }
      }

      @include it('sm\:border-radius(1)') {
        @include assert {
          @include output {
            @include border-radius(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-radius: 1;
            }
          }
        }
      }

      @include it('sm\:border-right-color(1)') {
        @include assert {
          @include output {
            @include border-right-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-right-color: 1;
            }
          }
        }
      }

      @include it('sm\:border-right-width(1)') {
        @include assert {
          @include output {
            @include border-right-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-right-width: 1;
            }
          }
        }
      }

      @include it('sm\:border-spacing(1)') {
        @include assert {
          @include output {
            @include border-spacing(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-spacing: 1;
            }
          }
        }
      }

      @include it('sm\:border-start-end-radius(1)') {
        @include assert {
          @include output {
            @include border-start-end-radius(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-start-end-radius: 1;
            }
          }
        }
      }

      @include it('sm\:border-start-start-radius(1)') {
        @include assert {
          @include output {
            @include border-start-start-radius(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-start-start-radius: 1;
            }
          }
        }
      }

      @include it('sm\:border-style(1)') {
        @include assert {
          @include output {
            @include border-style(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-style: 1;
            }
          }
        }
      }

      @include it('sm\:border-top-color(1)') {
        @include assert {
          @include output {
            @include border-top-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-top-color: 1;
            }
          }
        }
      }

      @include it('sm\:border-top-left-radius(1)') {
        @include assert {
          @include output {
            @include border-top-left-radius(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-top-left-radius: 1;
            }
          }
        }
      }

      @include it('sm\:border-top-right-radius(1)') {
        @include assert {
          @include output {
            @include border-top-right-radius(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-top-right-radius: 1;
            }
          }
        }
      }

      @include it('sm\:border-top-width(1)') {
        @include assert {
          @include output {
            @include border-top-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-top-width: 1;
            }
          }
        }
      }

      @include it('sm\:border-width(1)') {
        @include assert {
          @include output {
            @include border-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-width: 1;
            }
          }
        }
      }

      @include it('sm\:bottom(1)') {
        @include assert {
          @include output {
            @include bottom(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              bottom: 1;
            }
          }
        }
      }

      @include it('sm\:box-decoration-break(1)') {
        @include assert {
          @include output {
            @include box-decoration-break(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              box-decoration-break: 1;
            }
          }
        }
      }

      @include it('sm\:box-shadow(1)') {
        @include assert {
          @include output {
            @include box-shadow(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              box-shadow: 1;
            }
          }
        }
      }

      @include it('sm\:box-sizing(1)') {
        @include assert {
          @include output {
            @include box-sizing(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              box-sizing: 1;
            }
          }
        }
      }

      @include it('sm\:break-after(1)') {
        @include assert {
          @include output {
            @include break-after(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              break-after: 1;
            }
          }
        }
      }

      @include it('sm\:break-before(1)') {
        @include assert {
          @include output {
            @include break-before(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              break-before: 1;
            }
          }
        }
      }

      @include it('sm\:break-inside(1)') {
        @include assert {
          @include output {
            @include break-inside(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              break-inside: 1;
            }
          }
        }
      }

      @include it('sm\:caption-side(1)') {
        @include assert {
          @include output {
            @include caption-side(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              caption-side: 1;
            }
          }
        }
      }

      @include it('sm\:caret-color(1)') {
        @include assert {
          @include output {
            @include caret-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              caret-color: 1;
            }
          }
        }
      }

      @include it('sm\:clear(1)') {
        @include assert {
          @include output {
            @include clear(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              clear: 1;
            }
          }
        }
      }

      @include it('sm\:clip(1)') {
        @include assert {
          @include output {
            @include clip(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              clip: 1;
            }
          }
        }
      }

      @include it('sm\:color(1)') {
        @include assert {
          @include output {
            @include color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              color: 1;
            }
          }
        }
      }

      @include it('sm\:column-gap(1)') {
        @include assert {
          @include output {
            @include column-gap(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              column-gap: 1;
            }
          }
        }
      }

      @include it('sm\:columns(1)') {
        @include assert {
          @include output {
            @include columns(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              columns: 1;
            }
          }
        }
      }

      @include it('sm\:cursor(1, 1)') {
        @include assert {
          @include output {
            @include cursor(1, 1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              cursor: 1, 1;
            }
          }
        }
      }

      @include it('sm\:display(1)') {
        @include assert {
          @include output {
            @include display(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              display: 1;
            }
          }
        }
      }

      @include it('sm\:fill(1)') {
        @include assert {
          @include output {
            @include fill(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              fill: 1;
            }
          }
        }
      }

      @include it('sm\:filter(1)') {
        @include assert {
          @include output {
            @include filter(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: 1;
            }
          }
        }
      }

      @include it('sm\:flex(1)') {
        @include assert {
          @include output {
            @include flex(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex: 1;
            }
          }
        }
      }

      @include it('sm\:flex-basis(1)') {
        @include assert {
          @include output {
            @include flex-basis(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-basis: 1;
            }
          }
        }
      }

      @include it('sm\:flex-direction(1)') {
        @include assert {
          @include output {
            @include flex-direction(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-direction: 1;
            }
          }
        }
      }

      @include it('sm\:flex-grow(1)') {
        @include assert {
          @include output {
            @include flex-grow(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-grow: 1;
            }
          }
        }
      }

      @include it('sm\:flex-shrink(1)') {
        @include assert {
          @include output {
            @include flex-shrink(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-shrink: 1;
            }
          }
        }
      }

      @include it('sm\:flex-wrap(1)') {
        @include assert {
          @include output {
            @include flex-wrap(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-wrap: 1;
            }
          }
        }
      }

      @include it('sm\:float(1)') {
        @include assert {
          @include output {
            @include float(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              float: 1;
            }
          }
        }
      }

      @include it('sm\:font-family(1)') {
        @include assert {
          @include output {
            @include font-family(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-family: 1;
            }
          }
        }
      }

      @include it('sm\:font-size(1)') {
        @include assert {
          @include output {
            @include font-size(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-size: 1;
            }
          }
        }
      }

      @include it('sm\:font-style(1)') {
        @include assert {
          @include output {
            @include font-style(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-style: 1;
            }
          }
        }
      }

      @include it('sm\:font-variant-numeric(1)') {
        @include assert {
          @include output {
            @include font-variant-numeric(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-variant-numeric: 1;
            }
          }
        }
      }

      @include it('sm\:font-weight(1)') {
        @include assert {
          @include output {
            @include font-weight(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-weight: 1;
            }
          }
        }
      }

      @include it('sm\:forced-color-adjust(1)') {
        @include assert {
          @include output {
            @include forced-color-adjust(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              forced-color-adjust: 1;
            }
          }
        }
      }

      @include it('sm\:gap(1)') {
        @include assert {
          @include output {
            @include gap(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              gap: 1;
            }
          }
        }
      }

      @include it('sm\:grid-auto-columns(1)') {
        @include assert {
          @include output {
            @include grid-auto-columns(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-auto-columns: 1;
            }
          }
        }
      }

      @include it('sm\:grid-auto-flow(1)') {
        @include assert {
          @include output {
            @include grid-auto-flow(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-auto-flow: 1;
            }
          }
        }
      }

      @include it('sm\:grid-auto-rows(1)') {
        @include assert {
          @include output {
            @include grid-auto-rows(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-auto-rows: 1;
            }
          }
        }
      }

      @include it('sm\:grid-column(1)') {
        @include assert {
          @include output {
            @include grid-column(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-column: 1;
            }
          }
        }
      }

      @include it('sm\:grid-column-end(1)') {
        @include assert {
          @include output {
            @include grid-column-end(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-column-end: 1;
            }
          }
        }
      }

      @include it('sm\:grid-column-start(1)') {
        @include assert {
          @include output {
            @include grid-column-start(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-column-start: 1;
            }
          }
        }
      }

      @include it('sm\:grid-row(1)') {
        @include assert {
          @include output {
            @include grid-row(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-row: 1;
            }
          }
        }
      }

      @include it('sm\:grid-row-end(1)') {
        @include assert {
          @include output {
            @include grid-row-end(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-row-end: 1;
            }
          }
        }
      }

      @include it('sm\:grid-row-start(1)') {
        @include assert {
          @include output {
            @include grid-row-start(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-row-start: 1;
            }
          }
        }
      }

      @include it('sm\:grid-template-columns(1)') {
        @include assert {
          @include output {
            @include grid-template-columns(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-template-columns: 1;
            }
          }
        }
      }

      @include it('sm\:grid-template-rows(1)') {
        @include assert {
          @include output {
            @include grid-template-rows(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-template-rows: 1;
            }
          }
        }
      }

      @include it('sm\:height(1)') {
        @include assert {
          @include output {
            @include height(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              height: 1;
            }
          }
        }
      }

      @include it('sm\:hyphens(1)') {
        @include assert {
          @include output {
            @include hyphens(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              hyphens: 1;
            }
          }
        }
      }

      @include it('sm\:inset(1)') {
        @include assert {
          @include output {
            @include inset(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              inset: 1;
            }
          }
        }
      }

      @include it('sm\:inset-inline-end(1)') {
        @include assert {
          @include output {
            @include inset-inline-end(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              inset-inline-end: 1;
            }
          }
        }
      }

      @include it('sm\:inset-inline-start(1)') {
        @include assert {
          @include output {
            @include inset-inline-start(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              inset-inline-start: 1;
            }
          }
        }
      }

      @include it('sm\:isolation(1)') {
        @include assert {
          @include output {
            @include isolation(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              isolation: 1;
            }
          }
        }
      }

      @include it('sm\:justify-content(1)') {
        @include assert {
          @include output {
            @include justify-content(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              justify-content: 1;
            }
          }
        }
      }

      @include it('sm\:justify-items(1)') {
        @include assert {
          @include output {
            @include justify-items(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              justify-items: 1;
            }
          }
        }
      }

      @include it('sm\:justify-self(1)') {
        @include assert {
          @include output {
            @include justify-self(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              justify-self: 1;
            }
          }
        }
      }

      @include it('sm\:left(1)') {
        @include assert {
          @include output {
            @include left(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              left: 1;
            }
          }
        }
      }

      @include it('sm\:letter-spacing(1)') {
        @include assert {
          @include output {
            @include letter-spacing(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              letter-spacing: 1;
            }
          }
        }
      }

      @include it('sm\:line-height(1)') {
        @include assert {
          @include output {
            @include line-height(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              line-height: 1;
            }
          }
        }
      }

      @include it('sm\:list-style-image(1)') {
        @include assert {
          @include output {
            @include list-style-image(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              list-style-image: 1;
            }
          }
        }
      }

      @include it('sm\:list-style-position(1)') {
        @include assert {
          @include output {
            @include list-style-position(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              list-style-position: 1;
            }
          }
        }
      }

      @include it('sm\:list-style-type(1)') {
        @include assert {
          @include output {
            @include list-style-type(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              list-style-type: 1;
            }
          }
        }
      }

      @include it('sm\:margin(1)') {
        @include assert {
          @include output {
            @include margin(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin: 1;
            }
          }
        }
      }

      @include it('sm\:margin-bottom(1)') {
        @include assert {
          @include output {
            @include margin-bottom(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-bottom: 1;
            }
          }
        }
      }

      @include it('sm\:margin-inline-end(1)') {
        @include assert {
          @include output {
            @include margin-inline-end(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-inline-end: 1;
            }
          }
        }
      }

      @include it('sm\:margin-inline-start(1)') {
        @include assert {
          @include output {
            @include margin-inline-start(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-inline-start: 1;
            }
          }
        }
      }

      @include it('sm\:margin-left(1)') {
        @include assert {
          @include output {
            @include margin-left(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-left: 1;
            }
          }
        }
      }

      @include it('sm\:margin-right(1)') {
        @include assert {
          @include output {
            @include margin-right(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-right: 1;
            }
          }
        }
      }

      @include it('sm\:margin-top(1)') {
        @include assert {
          @include output {
            @include margin-top(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-top: 1;
            }
          }
        }
      }

      @include it('sm\:max-height(1)') {
        @include assert {
          @include output {
            @include max-height(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              max-height: 1;
            }
          }
        }
      }

      @include it('sm\:max-width(1)') {
        @include assert {
          @include output {
            @include max-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              max-width: 1;
            }
          }
        }
      }

      @include it('sm\:min-height(1)') {
        @include assert {
          @include output {
            @include min-height(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              min-height: 1;
            }
          }
        }
      }

      @include it('sm\:min-width(1)') {
        @include assert {
          @include output {
            @include min-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              min-width: 1;
            }
          }
        }
      }

      @include it('sm\:mix-blend-mode(1)') {
        @include assert {
          @include output {
            @include mix-blend-mode(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              mix-blend-mode: 1;
            }
          }
        }
      }

      @include it('sm\:object-fit(1)') {
        @include assert {
          @include output {
            @include object-fit(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              object-fit: 1;
            }
          }
        }
      }

      @include it('sm\:object-position(1)') {
        @include assert {
          @include output {
            @include object-position(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              object-position: 1;
            }
          }
        }
      }

      @include it('sm\:opacity(1)') {
        @include assert {
          @include output {
            @include opacity(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              opacity: 1;
            }
          }
        }
      }

      @include it('sm\:order(1)') {
        @include assert {
          @include output {
            @include order(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              order: 1;
            }
          }
        }
      }

      @include it('sm\:outline(1)') {
        @include assert {
          @include output {
            @include outline(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline: 1;
            }
          }
        }
      }

      @include it('sm\:outline-color(1)') {
        @include assert {
          @include output {
            @include outline-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline-color: 1;
            }
          }
        }
      }

      @include it('sm\:outline-offset(1)') {
        @include assert {
          @include output {
            @include outline-offset(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline-offset: 1;
            }
          }
        }
      }

      @include it('sm\:outline-style(1)') {
        @include assert {
          @include output {
            @include outline-style(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline-style: 1;
            }
          }
        }
      }

      @include it('sm\:outline-width(1)') {
        @include assert {
          @include output {
            @include outline-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline-width: 1;
            }
          }
        }
      }

      @include it('sm\:overflow(1)') {
        @include assert {
          @include output {
            @include overflow(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overflow: 1;
            }
          }
        }
      }

      @include it('sm\:overflow-wrap(1)') {
        @include assert {
          @include output {
            @include overflow-wrap(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overflow-wrap: 1;
            }
          }
        }
      }

      @include it('sm\:overflow-x(1)') {
        @include assert {
          @include output {
            @include overflow-x(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overflow-x: 1;
            }
          }
        }
      }

      @include it('sm\:overflow-y(1)') {
        @include assert {
          @include output {
            @include overflow-y(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overflow-y: 1;
            }
          }
        }
      }

      @include it('sm\:overscroll-behavior(1)') {
        @include assert {
          @include output {
            @include overscroll-behavior(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overscroll-behavior: 1;
            }
          }
        }
      }

      @include it('sm\:overscroll-behavior-x(1)') {
        @include assert {
          @include output {
            @include overscroll-behavior-x(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overscroll-behavior-x: 1;
            }
          }
        }
      }

      @include it('sm\:overscroll-behavior-y(1)') {
        @include assert {
          @include output {
            @include overscroll-behavior-y(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overscroll-behavior-y: 1;
            }
          }
        }
      }

      @include it('sm\:padding(1)') {
        @include assert {
          @include output {
            @include padding(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding: 1;
            }
          }
        }
      }

      @include it('sm\:padding-bottom(1)') {
        @include assert {
          @include output {
            @include padding-bottom(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-bottom: 1;
            }
          }
        }
      }

      @include it('sm\:padding-inline-end(1)') {
        @include assert {
          @include output {
            @include padding-inline-end(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-inline-end: 1;
            }
          }
        }
      }

      @include it('sm\:padding-inline-start(1)') {
        @include assert {
          @include output {
            @include padding-inline-start(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-inline-start: 1;
            }
          }
        }
      }

      @include it('sm\:padding-left(1)') {
        @include assert {
          @include output {
            @include padding-left(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-left: 1;
            }
          }
        }
      }

      @include it('sm\:padding-right(1)') {
        @include assert {
          @include output {
            @include padding-right(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-right: 1;
            }
          }
        }
      }

      @include it('sm\:padding-top(1)') {
        @include assert {
          @include output {
            @include padding-top(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-top: 1;
            }
          }
        }
      }

      @include it('sm\:place-content(1)') {
        @include assert {
          @include output {
            @include place-content(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              place-content: 1;
            }
          }
        }
      }

      @include it('sm\:place-items(1)') {
        @include assert {
          @include output {
            @include place-items(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              place-items: 1;
            }
          }
        }
      }

      @include it('sm\:place-self(1)') {
        @include assert {
          @include output {
            @include place-self(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              place-self: 1;
            }
          }
        }
      }

      @include it('sm\:pointer-events(1)') {
        @include assert {
          @include output {
            @include pointer-events(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              pointer-events: 1;
            }
          }
        }
      }

      @include it('sm\:position(1)') {
        @include assert {
          @include output {
            @include position(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              position: 1;
            }
          }
        }
      }

      @include it('sm\:resize(1)') {
        @include assert {
          @include output {
            @include resize(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              resize: 1;
            }
          }
        }
      }

      @include it('sm\:right(1)') {
        @include assert {
          @include output {
            @include right(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              right: 1;
            }
          }
        }
      }

      @include it('sm\:row-gap(1)') {
        @include assert {
          @include output {
            @include row-gap(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              row-gap: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-behavior(1)') {
        @include assert {
          @include output {
            @include scroll-behavior(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-behavior: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin(1)') {
        @include assert {
          @include output {
            @include scroll-margin(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-bottom(1)') {
        @include assert {
          @include output {
            @include scroll-margin-bottom(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-bottom: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-inline-end(1)') {
        @include assert {
          @include output {
            @include scroll-margin-inline-end(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-inline-end: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-inline-start(1)') {
        @include assert {
          @include output {
            @include scroll-margin-inline-start(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-inline-start: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-left(1)') {
        @include assert {
          @include output {
            @include scroll-margin-left(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-left: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-right(1)') {
        @include assert {
          @include output {
            @include scroll-margin-right(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-right: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-top(1)') {
        @include assert {
          @include output {
            @include scroll-margin-top(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-top: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding(1)') {
        @include assert {
          @include output {
            @include scroll-padding(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-bottom(1)') {
        @include assert {
          @include output {
            @include scroll-padding-bottom(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-bottom: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-inline-end(1)') {
        @include assert {
          @include output {
            @include scroll-padding-inline-end(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-inline-end: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-inline-start(1)') {
        @include assert {
          @include output {
            @include scroll-padding-inline-start(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-inline-start: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-left(1)') {
        @include assert {
          @include output {
            @include scroll-padding-left(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-left: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-right(1)') {
        @include assert {
          @include output {
            @include scroll-padding-right(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-right: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-top(1)') {
        @include assert {
          @include output {
            @include scroll-padding-top(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-top: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-snap-align(1)') {
        @include assert {
          @include output {
            @include scroll-snap-align(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-snap-align: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-snap-stop(1)') {
        @include assert {
          @include output {
            @include scroll-snap-stop(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-snap-stop: 1;
            }
          }
        }
      }

      @include it('sm\:scroll-snap-type(1)') {
        @include assert {
          @include output {
            @include scroll-snap-type(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-snap-type: 1;
            }
          }
        }
      }

      @include it('sm\:stroke(1)') {
        @include assert {
          @include output {
            @include stroke(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              stroke: 1;
            }
          }
        }
      }

      @include it('sm\:stroke-width(1)') {
        @include assert {
          @include output {
            @include stroke-width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              stroke-width: 1;
            }
          }
        }
      }

      @include it('sm\:table-layout(1)') {
        @include assert {
          @include output {
            @include table-layout(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              table-layout: 1;
            }
          }
        }
      }

      @include it('sm\:text-align(1)') {
        @include assert {
          @include output {
            @include text-align(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-align: 1;
            }
          }
        }
      }

      @include it('sm\:text-decoration-color(1)') {
        @include assert {
          @include output {
            @include text-decoration-color(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-decoration-color: 1;
            }
          }
        }
      }

      @include it('sm\:text-decoration-line(1)') {
        @include assert {
          @include output {
            @include text-decoration-line(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-decoration-line: 1;
            }
          }
        }
      }

      @include it('sm\:text-decoration-style(1)') {
        @include assert {
          @include output {
            @include text-decoration-style(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-decoration-style: 1;
            }
          }
        }
      }

      @include it('sm\:text-decoration-thickness(1)') {
        @include assert {
          @include output {
            @include text-decoration-thickness(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-decoration-thickness: 1;
            }
          }
        }
      }

      @include it('sm\:text-indent(1)') {
        @include assert {
          @include output {
            @include text-indent(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-indent: 1;
            }
          }
        }
      }

      @include it('sm\:text-overflow(1)') {
        @include assert {
          @include output {
            @include text-overflow(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-overflow: 1;
            }
          }
        }
      }

      @include it('sm\:text-transform(1)') {
        @include assert {
          @include output {
            @include text-transform(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-transform: 1;
            }
          }
        }
      }

      @include it('sm\:text-underline-offset(1)') {
        @include assert {
          @include output {
            @include text-underline-offset(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-underline-offset: 1;
            }
          }
        }
      }

      @include it('sm\:text-wrap(1)') {
        @include assert {
          @include output {
            @include text-wrap(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-wrap: 1;
            }
          }
        }
      }

      @include it('sm\:top(1)') {
        @include assert {
          @include output {
            @include top(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              top: 1;
            }
          }
        }
      }

      @include it('sm\:touch-action(1)') {
        @include assert {
          @include output {
            @include touch-action(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              touch-action: 1;
            }
          }
        }
      }

      @include it('sm\:transform(1)') {
        @include assert {
          @include output {
            @include transform(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: 1;
            }
          }
        }
      }

      @include it('sm\:transform-origin(1)') {
        @include assert {
          @include output {
            @include transform-origin(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform-origin: 1;
            }
          }
        }
      }

      @include it('sm\:transition-delay(1)') {
        @include assert {
          @include output {
            @include transition-delay(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transition-delay: 1;
            }
          }
        }
      }

      @include it('sm\:transition-duration(1)') {
        @include assert {
          @include output {
            @include transition-duration(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transition-duration: 1;
            }
          }
        }
      }

      @include it('sm\:transition-property(1)') {
        @include assert {
          @include output {
            @include transition-property(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transition-property: 1;
            }
          }
        }
      }

      @include it('sm\:transition-timing-function(1)') {
        @include assert {
          @include output {
            @include transition-timing-function(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transition-timing-function: 1;
            }
          }
        }
      }

      @include it('sm\:user-select(1)') {
        @include assert {
          @include output {
            @include user-select(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              user-select: 1;
            }
          }
        }
      }

      @include it('sm\:vertical-align(1)') {
        @include assert {
          @include output {
            @include vertical-align(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              vertical-align: 1;
            }
          }
        }
      }

      @include it('sm\:visibility(1)') {
        @include assert {
          @include output {
            @include visibility(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              visibility: 1;
            }
          }
        }
      }

      @include it('sm\:white-space(1)') {
        @include assert {
          @include output {
            @include white-space(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              white-space: 1;
            }
          }
        }
      }

      @include it('sm\:width(1)') {
        @include assert {
          @include output {
            @include width(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              width: 1;
            }
          }
        }
      }

      @include it('sm\:will-change(1, 1)') {
        @include assert {
          @include output {
            @include will-change(1, 1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              will-change: 1, 1;
            }
          }
        }
      }

      @include it('sm\:word-break(1)') {
        @include assert {
          @include output {
            @include word-break(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              word-break: 1;
            }
          }
        }
      }

      @include it('sm\:z-index(1)') {
        @include assert {
          @include output {
            @include z-index(1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              z-index: 1;
            }
          }
        }
      }
    }

    @include describe('Negative') {
      @include it('sm\:-moz-osx-font-smoothing(-1)') {
        @include assert {
          @include output {
            @include -moz-osx-font-smoothing(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              -moz-osx-font-smoothing: -1;
            }
          }
        }
      }

      @include it('sm\:-webkit-box-orient(-1)') {
        @include assert {
          @include output {
            @include -webkit-box-orient(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              -webkit-box-orient: -1;
            }
          }
        }
      }

      @include it('sm\:-webkit-font-smoothing(-1)') {
        @include assert {
          @include output {
            @include -webkit-font-smoothing(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              -webkit-font-smoothing: -1;
            }
          }
        }
      }

      @include it('sm\:-webkit-line-clamp(-1)') {
        @include assert {
          @include output {
            @include -webkit-line-clamp(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              -webkit-line-clamp: -1;
            }
          }
        }
      }

      @include it('sm\:accent-color(-1)') {
        @include assert {
          @include output {
            @include accent-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              accent-color: -1;
            }
          }
        }
      }

      @include it('sm\:align-content(-1)') {
        @include assert {
          @include output {
            @include align-content(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              align-content: -1;
            }
          }
        }
      }

      @include it('sm\:align-items(-1)') {
        @include assert {
          @include output {
            @include align-items(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              align-items: -1;
            }
          }
        }
      }

      @include it('sm\:align-self(-1)') {
        @include assert {
          @include output {
            @include align-self(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              align-self: -1;
            }
          }
        }
      }

      @include it('sm\:animation(-1)') {
        @include assert {
          @include output {
            @include animation(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              animation: -1;
            }
          }
        }
      }

      @include it('sm\:appearance(-1)') {
        @include assert {
          @include output {
            @include appearance(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              appearance: -1;
            }
          }
        }
      }

      @include it('sm\:aspect-ratio(-1)') {
        @include assert {
          @include output {
            @include aspect-ratio(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              aspect-ratio: -1;
            }
          }
        }
      }

      @include it('sm\:backdrop-filter(-1)') {
        @include assert {
          @include output {
            @include backdrop-filter(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              backdrop-filter: -1;
            }
          }
        }
      }

      @include it('sm\:background-attachment(-1)') {
        @include assert {
          @include output {
            @include background-attachment(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-attachment: -1;
            }
          }
        }
      }

      @include it('sm\:background-blend-mode(-1)') {
        @include assert {
          @include output {
            @include background-blend-mode(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-blend-mode: -1;
            }
          }
        }
      }

      @include it('sm\:background-clip(-1)') {
        @include assert {
          @include output {
            @include background-clip(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-clip: -1;
            }
          }
        }
      }

      @include it('sm\:background-color(-1)') {
        @include assert {
          @include output {
            @include background-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-color: -1;
            }
          }
        }
      }

      @include it('sm\:background-image(-1)') {
        @include assert {
          @include output {
            @include background-image(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-image: -1;
            }
          }
        }
      }

      @include it('sm\:background-origin(-1)') {
        @include assert {
          @include output {
            @include background-origin(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-origin: -1;
            }
          }
        }
      }

      @include it('sm\:background-position(-1)') {
        @include assert {
          @include output {
            @include background-position(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-position: -1;
            }
          }
        }
      }

      @include it('sm\:background-repeat(-1)') {
        @include assert {
          @include output {
            @include background-repeat(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-repeat: -1;
            }
          }
        }
      }

      @include it('sm\:background-size(-1)') {
        @include assert {
          @include output {
            @include background-size(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              background-size: -1;
            }
          }
        }
      }

      @include it('sm\:border-bottom-color(-1)') {
        @include assert {
          @include output {
            @include border-bottom-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-bottom-color: -1;
            }
          }
        }
      }

      @include it('sm\:border-bottom-left-radius(-1)') {
        @include assert {
          @include output {
            @include border-bottom-left-radius(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-bottom-left-radius: -1;
            }
          }
        }
      }

      @include it('sm\:border-bottom-right-radius(-1)') {
        @include assert {
          @include output {
            @include border-bottom-right-radius(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-bottom-right-radius: -1;
            }
          }
        }
      }

      @include it('sm\:border-bottom-width(-1)') {
        @include assert {
          @include output {
            @include border-bottom-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-bottom-width: -1;
            }
          }
        }
      }

      @include it('sm\:border-collapse(-1)') {
        @include assert {
          @include output {
            @include border-collapse(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-collapse: -1;
            }
          }
        }
      }

      @include it('sm\:border-color(-1)') {
        @include assert {
          @include output {
            @include border-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-color: -1;
            }
          }
        }
      }

      @include it('sm\:border-end-end-radius(-1)') {
        @include assert {
          @include output {
            @include border-end-end-radius(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-end-end-radius: -1;
            }
          }
        }
      }

      @include it('sm\:border-end-start-radius(-1)') {
        @include assert {
          @include output {
            @include border-end-start-radius(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-end-start-radius: -1;
            }
          }
        }
      }

      @include it('sm\:border-inline-end-color(-1)') {
        @include assert {
          @include output {
            @include border-inline-end-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-inline-end-color: -1;
            }
          }
        }
      }

      @include it('sm\:border-inline-end-width(-1)') {
        @include assert {
          @include output {
            @include border-inline-end-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-inline-end-width: -1;
            }
          }
        }
      }

      @include it('sm\:border-inline-start-color(-1)') {
        @include assert {
          @include output {
            @include border-inline-start-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-inline-start-color: -1;
            }
          }
        }
      }

      @include it('sm\:border-inline-start-width(-1)') {
        @include assert {
          @include output {
            @include border-inline-start-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-inline-start-width: -1;
            }
          }
        }
      }

      @include it('sm\:border-left-color(-1)') {
        @include assert {
          @include output {
            @include border-left-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-left-color: -1;
            }
          }
        }
      }

      @include it('sm\:border-left-width(-1)') {
        @include assert {
          @include output {
            @include border-left-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-left-width: -1;
            }
          }
        }
      }

      @include it('sm\:border-radius(-1)') {
        @include assert {
          @include output {
            @include border-radius(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-radius: -1;
            }
          }
        }
      }

      @include it('sm\:border-right-color(-1)') {
        @include assert {
          @include output {
            @include border-right-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-right-color: -1;
            }
          }
        }
      }

      @include it('sm\:border-right-width(-1)') {
        @include assert {
          @include output {
            @include border-right-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-right-width: -1;
            }
          }
        }
      }

      @include it('sm\:border-spacing(-1)') {
        @include assert {
          @include output {
            @include border-spacing(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-spacing: -1;
            }
          }
        }
      }

      @include it('sm\:border-start-end-radius(-1)') {
        @include assert {
          @include output {
            @include border-start-end-radius(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-start-end-radius: -1;
            }
          }
        }
      }

      @include it('sm\:border-start-start-radius(-1)') {
        @include assert {
          @include output {
            @include border-start-start-radius(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-start-start-radius: -1;
            }
          }
        }
      }

      @include it('sm\:border-style(-1)') {
        @include assert {
          @include output {
            @include border-style(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-style: -1;
            }
          }
        }
      }

      @include it('sm\:border-top-color(-1)') {
        @include assert {
          @include output {
            @include border-top-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-top-color: -1;
            }
          }
        }
      }

      @include it('sm\:border-top-left-radius(-1)') {
        @include assert {
          @include output {
            @include border-top-left-radius(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-top-left-radius: -1;
            }
          }
        }
      }

      @include it('sm\:border-top-right-radius(-1)') {
        @include assert {
          @include output {
            @include border-top-right-radius(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-top-right-radius: -1;
            }
          }
        }
      }

      @include it('sm\:border-top-width(-1)') {
        @include assert {
          @include output {
            @include border-top-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-top-width: -1;
            }
          }
        }
      }

      @include it('sm\:border-width(-1)') {
        @include assert {
          @include output {
            @include border-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              border-width: -1;
            }
          }
        }
      }

      @include it('sm\:bottom(-1)') {
        @include assert {
          @include output {
            @include bottom(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              bottom: -1;
            }
          }
        }
      }

      @include it('sm\:box-decoration-break(-1)') {
        @include assert {
          @include output {
            @include box-decoration-break(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              box-decoration-break: -1;
            }
          }
        }
      }

      @include it('sm\:box-shadow(-1)') {
        @include assert {
          @include output {
            @include box-shadow(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              box-shadow: -1;
            }
          }
        }
      }

      @include it('sm\:box-sizing(-1)') {
        @include assert {
          @include output {
            @include box-sizing(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              box-sizing: -1;
            }
          }
        }
      }

      @include it('sm\:break-after(-1)') {
        @include assert {
          @include output {
            @include break-after(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              break-after: -1;
            }
          }
        }
      }

      @include it('sm\:break-before(-1)') {
        @include assert {
          @include output {
            @include break-before(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              break-before: -1;
            }
          }
        }
      }

      @include it('sm\:break-inside(-1)') {
        @include assert {
          @include output {
            @include break-inside(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              break-inside: -1;
            }
          }
        }
      }

      @include it('sm\:caption-side(-1)') {
        @include assert {
          @include output {
            @include caption-side(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              caption-side: -1;
            }
          }
        }
      }

      @include it('sm\:caret-color(-1)') {
        @include assert {
          @include output {
            @include caret-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              caret-color: -1;
            }
          }
        }
      }

      @include it('sm\:clear(-1)') {
        @include assert {
          @include output {
            @include clear(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              clear: -1;
            }
          }
        }
      }

      @include it('sm\:clip(-1)') {
        @include assert {
          @include output {
            @include clip(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              clip: -1;
            }
          }
        }
      }

      @include it('sm\:color(-1)') {
        @include assert {
          @include output {
            @include color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              color: -1;
            }
          }
        }
      }

      @include it('sm\:column-gap(-1)') {
        @include assert {
          @include output {
            @include column-gap(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              column-gap: -1;
            }
          }
        }
      }

      @include it('sm\:columns(-1)') {
        @include assert {
          @include output {
            @include columns(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              columns: -1;
            }
          }
        }
      }

      @include it('sm\:cursor(-1, -1)') {
        @include assert {
          @include output {
            @include cursor(-1, -1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              cursor:
                -1,
                -1;
            }
          }
        }
      }

      @include it('sm\:display(-1)') {
        @include assert {
          @include output {
            @include display(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              display: -1;
            }
          }
        }
      }

      @include it('sm\:fill(-1)') {
        @include assert {
          @include output {
            @include fill(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              fill: -1;
            }
          }
        }
      }

      @include it('sm\:filter(-1)') {
        @include assert {
          @include output {
            @include filter(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: -1;
            }
          }
        }
      }

      @include it('sm\:flex(-1)') {
        @include assert {
          @include output {
            @include flex(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex: -1;
            }
          }
        }
      }

      @include it('sm\:flex-basis(-1)') {
        @include assert {
          @include output {
            @include flex-basis(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-basis: -1;
            }
          }
        }
      }

      @include it('sm\:flex-direction(-1)') {
        @include assert {
          @include output {
            @include flex-direction(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-direction: -1;
            }
          }
        }
      }

      @include it('sm\:flex-grow(-1)') {
        @include assert {
          @include output {
            @include flex-grow(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-grow: -1;
            }
          }
        }
      }

      @include it('sm\:flex-shrink(-1)') {
        @include assert {
          @include output {
            @include flex-shrink(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-shrink: -1;
            }
          }
        }
      }

      @include it('sm\:flex-wrap(-1)') {
        @include assert {
          @include output {
            @include flex-wrap(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              flex-wrap: -1;
            }
          }
        }
      }

      @include it('sm\:float(-1)') {
        @include assert {
          @include output {
            @include float(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              float: -1;
            }
          }
        }
      }

      @include it('sm\:font-family(-1)') {
        @include assert {
          @include output {
            @include font-family(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-family: -1;
            }
          }
        }
      }

      @include it('sm\:font-size(-1)') {
        @include assert {
          @include output {
            @include font-size(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-size: -1;
            }
          }
        }
      }

      @include it('sm\:font-style(-1)') {
        @include assert {
          @include output {
            @include font-style(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-style: -1;
            }
          }
        }
      }

      @include it('sm\:font-variant-numeric(-1)') {
        @include assert {
          @include output {
            @include font-variant-numeric(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-variant-numeric: -1;
            }
          }
        }
      }

      @include it('sm\:font-weight(-1)') {
        @include assert {
          @include output {
            @include font-weight(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              font-weight: -1;
            }
          }
        }
      }

      @include it('sm\:forced-color-adjust(-1)') {
        @include assert {
          @include output {
            @include forced-color-adjust(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              forced-color-adjust: -1;
            }
          }
        }
      }

      @include it('sm\:gap(-1)') {
        @include assert {
          @include output {
            @include gap(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              gap: -1;
            }
          }
        }
      }

      @include it('sm\:grid-auto-columns(-1)') {
        @include assert {
          @include output {
            @include grid-auto-columns(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-auto-columns: -1;
            }
          }
        }
      }

      @include it('sm\:grid-auto-flow(-1)') {
        @include assert {
          @include output {
            @include grid-auto-flow(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-auto-flow: -1;
            }
          }
        }
      }

      @include it('sm\:grid-auto-rows(-1)') {
        @include assert {
          @include output {
            @include grid-auto-rows(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-auto-rows: -1;
            }
          }
        }
      }

      @include it('sm\:grid-column(-1)') {
        @include assert {
          @include output {
            @include grid-column(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-column: -1;
            }
          }
        }
      }

      @include it('sm\:grid-column-end(-1)') {
        @include assert {
          @include output {
            @include grid-column-end(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-column-end: -1;
            }
          }
        }
      }

      @include it('sm\:grid-column-start(-1)') {
        @include assert {
          @include output {
            @include grid-column-start(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-column-start: -1;
            }
          }
        }
      }

      @include it('sm\:grid-row(-1)') {
        @include assert {
          @include output {
            @include grid-row(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-row: -1;
            }
          }
        }
      }

      @include it('sm\:grid-row-end(-1)') {
        @include assert {
          @include output {
            @include grid-row-end(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-row-end: -1;
            }
          }
        }
      }

      @include it('sm\:grid-row-start(-1)') {
        @include assert {
          @include output {
            @include grid-row-start(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-row-start: -1;
            }
          }
        }
      }

      @include it('sm\:grid-template-columns(-1)') {
        @include assert {
          @include output {
            @include grid-template-columns(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-template-columns: -1;
            }
          }
        }
      }

      @include it('sm\:grid-template-rows(-1)') {
        @include assert {
          @include output {
            @include grid-template-rows(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              grid-template-rows: -1;
            }
          }
        }
      }

      @include it('sm\:height(-1)') {
        @include assert {
          @include output {
            @include height(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              height: -1;
            }
          }
        }
      }

      @include it('sm\:hyphens(-1)') {
        @include assert {
          @include output {
            @include hyphens(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              hyphens: -1;
            }
          }
        }
      }

      @include it('sm\:inset(-1)') {
        @include assert {
          @include output {
            @include inset(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              inset: -1;
            }
          }
        }
      }

      @include it('sm\:inset-inline-end(-1)') {
        @include assert {
          @include output {
            @include inset-inline-end(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              inset-inline-end: -1;
            }
          }
        }
      }

      @include it('sm\:inset-inline-start(-1)') {
        @include assert {
          @include output {
            @include inset-inline-start(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              inset-inline-start: -1;
            }
          }
        }
      }

      @include it('sm\:isolation(-1)') {
        @include assert {
          @include output {
            @include isolation(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              isolation: -1;
            }
          }
        }
      }

      @include it('sm\:justify-content(-1)') {
        @include assert {
          @include output {
            @include justify-content(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              justify-content: -1;
            }
          }
        }
      }

      @include it('sm\:justify-items(-1)') {
        @include assert {
          @include output {
            @include justify-items(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              justify-items: -1;
            }
          }
        }
      }

      @include it('sm\:justify-self(-1)') {
        @include assert {
          @include output {
            @include justify-self(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              justify-self: -1;
            }
          }
        }
      }

      @include it('sm\:left(-1)') {
        @include assert {
          @include output {
            @include left(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              left: -1;
            }
          }
        }
      }

      @include it('sm\:letter-spacing(-1)') {
        @include assert {
          @include output {
            @include letter-spacing(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              letter-spacing: -1;
            }
          }
        }
      }

      @include it('sm\:line-height(-1)') {
        @include assert {
          @include output {
            @include line-height(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              line-height: -1;
            }
          }
        }
      }

      @include it('sm\:list-style-image(-1)') {
        @include assert {
          @include output {
            @include list-style-image(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              list-style-image: -1;
            }
          }
        }
      }

      @include it('sm\:list-style-position(-1)') {
        @include assert {
          @include output {
            @include list-style-position(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              list-style-position: -1;
            }
          }
        }
      }

      @include it('sm\:list-style-type(-1)') {
        @include assert {
          @include output {
            @include list-style-type(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              list-style-type: -1;
            }
          }
        }
      }

      @include it('sm\:margin(-1)') {
        @include assert {
          @include output {
            @include margin(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin: -1;
            }
          }
        }
      }

      @include it('sm\:margin-bottom(-1)') {
        @include assert {
          @include output {
            @include margin-bottom(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-bottom: -1;
            }
          }
        }
      }

      @include it('sm\:margin-inline-end(-1)') {
        @include assert {
          @include output {
            @include margin-inline-end(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-inline-end: -1;
            }
          }
        }
      }

      @include it('sm\:margin-inline-start(-1)') {
        @include assert {
          @include output {
            @include margin-inline-start(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-inline-start: -1;
            }
          }
        }
      }

      @include it('sm\:margin-left(-1)') {
        @include assert {
          @include output {
            @include margin-left(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-left: -1;
            }
          }
        }
      }

      @include it('sm\:margin-right(-1)') {
        @include assert {
          @include output {
            @include margin-right(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-right: -1;
            }
          }
        }
      }

      @include it('sm\:margin-top(-1)') {
        @include assert {
          @include output {
            @include margin-top(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              margin-top: -1;
            }
          }
        }
      }

      @include it('sm\:max-height(-1)') {
        @include assert {
          @include output {
            @include max-height(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              max-height: -1;
            }
          }
        }
      }

      @include it('sm\:max-width(-1)') {
        @include assert {
          @include output {
            @include max-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              max-width: -1;
            }
          }
        }
      }

      @include it('sm\:min-height(-1)') {
        @include assert {
          @include output {
            @include min-height(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              min-height: -1;
            }
          }
        }
      }

      @include it('sm\:min-width(-1)') {
        @include assert {
          @include output {
            @include min-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              min-width: -1;
            }
          }
        }
      }

      @include it('sm\:mix-blend-mode(-1)') {
        @include assert {
          @include output {
            @include mix-blend-mode(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              mix-blend-mode: -1;
            }
          }
        }
      }

      @include it('sm\:object-fit(-1)') {
        @include assert {
          @include output {
            @include object-fit(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              object-fit: -1;
            }
          }
        }
      }

      @include it('sm\:object-position(-1)') {
        @include assert {
          @include output {
            @include object-position(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              object-position: -1;
            }
          }
        }
      }

      @include it('sm\:opacity(-1)') {
        @include assert {
          @include output {
            @include opacity(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              opacity: -1;
            }
          }
        }
      }

      @include it('sm\:order(-1)') {
        @include assert {
          @include output {
            @include order(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              order: -1;
            }
          }
        }
      }

      @include it('sm\:outline(-1)') {
        @include assert {
          @include output {
            @include outline(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline: -1;
            }
          }
        }
      }

      @include it('sm\:outline-color(-1)') {
        @include assert {
          @include output {
            @include outline-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline-color: -1;
            }
          }
        }
      }

      @include it('sm\:outline-offset(-1)') {
        @include assert {
          @include output {
            @include outline-offset(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline-offset: -1;
            }
          }
        }
      }

      @include it('sm\:outline-style(-1)') {
        @include assert {
          @include output {
            @include outline-style(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline-style: -1;
            }
          }
        }
      }

      @include it('sm\:outline-width(-1)') {
        @include assert {
          @include output {
            @include outline-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              outline-width: -1;
            }
          }
        }
      }

      @include it('sm\:overflow(-1)') {
        @include assert {
          @include output {
            @include overflow(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overflow: -1;
            }
          }
        }
      }

      @include it('sm\:overflow-wrap(-1)') {
        @include assert {
          @include output {
            @include overflow-wrap(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overflow-wrap: -1;
            }
          }
        }
      }

      @include it('sm\:overflow-x(-1)') {
        @include assert {
          @include output {
            @include overflow-x(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overflow-x: -1;
            }
          }
        }
      }

      @include it('sm\:overflow-y(-1)') {
        @include assert {
          @include output {
            @include overflow-y(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overflow-y: -1;
            }
          }
        }
      }

      @include it('sm\:overscroll-behavior(-1)') {
        @include assert {
          @include output {
            @include overscroll-behavior(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overscroll-behavior: -1;
            }
          }
        }
      }

      @include it('sm\:overscroll-behavior-x(-1)') {
        @include assert {
          @include output {
            @include overscroll-behavior-x(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overscroll-behavior-x: -1;
            }
          }
        }
      }

      @include it('sm\:overscroll-behavior-y(-1)') {
        @include assert {
          @include output {
            @include overscroll-behavior-y(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              overscroll-behavior-y: -1;
            }
          }
        }
      }

      @include it('sm\:padding(-1)') {
        @include assert {
          @include output {
            @include padding(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding: -1;
            }
          }
        }
      }

      @include it('sm\:padding-bottom(-1)') {
        @include assert {
          @include output {
            @include padding-bottom(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-bottom: -1;
            }
          }
        }
      }

      @include it('sm\:padding-inline-end(-1)') {
        @include assert {
          @include output {
            @include padding-inline-end(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-inline-end: -1;
            }
          }
        }
      }

      @include it('sm\:padding-inline-start(-1)') {
        @include assert {
          @include output {
            @include padding-inline-start(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-inline-start: -1;
            }
          }
        }
      }

      @include it('sm\:padding-left(-1)') {
        @include assert {
          @include output {
            @include padding-left(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-left: -1;
            }
          }
        }
      }

      @include it('sm\:padding-right(-1)') {
        @include assert {
          @include output {
            @include padding-right(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-right: -1;
            }
          }
        }
      }

      @include it('sm\:padding-top(-1)') {
        @include assert {
          @include output {
            @include padding-top(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              padding-top: -1;
            }
          }
        }
      }

      @include it('sm\:place-content(-1)') {
        @include assert {
          @include output {
            @include place-content(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              place-content: -1;
            }
          }
        }
      }

      @include it('sm\:place-items(-1)') {
        @include assert {
          @include output {
            @include place-items(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              place-items: -1;
            }
          }
        }
      }

      @include it('sm\:place-self(-1)') {
        @include assert {
          @include output {
            @include place-self(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              place-self: -1;
            }
          }
        }
      }

      @include it('sm\:pointer-events(-1)') {
        @include assert {
          @include output {
            @include pointer-events(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              pointer-events: -1;
            }
          }
        }
      }

      @include it('sm\:position(-1)') {
        @include assert {
          @include output {
            @include position(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              position: -1;
            }
          }
        }
      }

      @include it('sm\:resize(-1)') {
        @include assert {
          @include output {
            @include resize(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              resize: -1;
            }
          }
        }
      }

      @include it('sm\:right(-1)') {
        @include assert {
          @include output {
            @include right(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              right: -1;
            }
          }
        }
      }

      @include it('sm\:row-gap(-1)') {
        @include assert {
          @include output {
            @include row-gap(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              row-gap: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-behavior(-1)') {
        @include assert {
          @include output {
            @include scroll-behavior(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-behavior: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin(-1)') {
        @include assert {
          @include output {
            @include scroll-margin(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-bottom(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-bottom(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-bottom: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-inline-end(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-inline-end(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-inline-end: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-inline-start(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-inline-start(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-inline-start: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-left(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-left(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-left: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-right(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-right(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-right: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-margin-top(-1)') {
        @include assert {
          @include output {
            @include scroll-margin-top(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-margin-top: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding(-1)') {
        @include assert {
          @include output {
            @include scroll-padding(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-bottom(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-bottom(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-bottom: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-inline-end(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-inline-end(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-inline-end: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-inline-start(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-inline-start(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-inline-start: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-left(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-left(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-left: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-right(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-right(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-right: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-padding-top(-1)') {
        @include assert {
          @include output {
            @include scroll-padding-top(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-padding-top: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-snap-align(-1)') {
        @include assert {
          @include output {
            @include scroll-snap-align(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-snap-align: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-snap-stop(-1)') {
        @include assert {
          @include output {
            @include scroll-snap-stop(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-snap-stop: -1;
            }
          }
        }
      }

      @include it('sm\:scroll-snap-type(-1)') {
        @include assert {
          @include output {
            @include scroll-snap-type(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              scroll-snap-type: -1;
            }
          }
        }
      }

      @include it('sm\:stroke(-1)') {
        @include assert {
          @include output {
            @include stroke(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              stroke: -1;
            }
          }
        }
      }

      @include it('sm\:stroke-width(-1)') {
        @include assert {
          @include output {
            @include stroke-width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              stroke-width: -1;
            }
          }
        }
      }

      @include it('sm\:table-layout(-1)') {
        @include assert {
          @include output {
            @include table-layout(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              table-layout: -1;
            }
          }
        }
      }

      @include it('sm\:text-align(-1)') {
        @include assert {
          @include output {
            @include text-align(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-align: -1;
            }
          }
        }
      }

      @include it('sm\:text-decoration-color(-1)') {
        @include assert {
          @include output {
            @include text-decoration-color(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-decoration-color: -1;
            }
          }
        }
      }

      @include it('sm\:text-decoration-line(-1)') {
        @include assert {
          @include output {
            @include text-decoration-line(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-decoration-line: -1;
            }
          }
        }
      }

      @include it('sm\:text-decoration-style(-1)') {
        @include assert {
          @include output {
            @include text-decoration-style(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-decoration-style: -1;
            }
          }
        }
      }

      @include it('sm\:text-decoration-thickness(-1)') {
        @include assert {
          @include output {
            @include text-decoration-thickness(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-decoration-thickness: -1;
            }
          }
        }
      }

      @include it('sm\:text-indent(-1)') {
        @include assert {
          @include output {
            @include text-indent(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-indent: -1;
            }
          }
        }
      }

      @include it('sm\:text-overflow(-1)') {
        @include assert {
          @include output {
            @include text-overflow(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-overflow: -1;
            }
          }
        }
      }

      @include it('sm\:text-transform(-1)') {
        @include assert {
          @include output {
            @include text-transform(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-transform: -1;
            }
          }
        }
      }

      @include it('sm\:text-underline-offset(-1)') {
        @include assert {
          @include output {
            @include text-underline-offset(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-underline-offset: -1;
            }
          }
        }
      }

      @include it('sm\:text-wrap(-1)') {
        @include assert {
          @include output {
            @include text-wrap(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              text-wrap: -1;
            }
          }
        }
      }

      @include it('sm\:top(-1)') {
        @include assert {
          @include output {
            @include top(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              top: -1;
            }
          }
        }
      }

      @include it('sm\:touch-action(-1)') {
        @include assert {
          @include output {
            @include touch-action(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              touch-action: -1;
            }
          }
        }
      }

      @include it('sm\:transform(-1)') {
        @include assert {
          @include output {
            @include transform(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: -1;
            }
          }
        }
      }

      @include it('sm\:transform-origin(-1)') {
        @include assert {
          @include output {
            @include transform-origin(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform-origin: -1;
            }
          }
        }
      }

      @include it('sm\:transition-delay(-1)') {
        @include assert {
          @include output {
            @include transition-delay(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transition-delay: -1;
            }
          }
        }
      }

      @include it('sm\:transition-duration(-1)') {
        @include assert {
          @include output {
            @include transition-duration(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transition-duration: -1;
            }
          }
        }
      }

      @include it('sm\:transition-property(-1)') {
        @include assert {
          @include output {
            @include transition-property(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transition-property: -1;
            }
          }
        }
      }

      @include it('sm\:transition-timing-function(-1)') {
        @include assert {
          @include output {
            @include transition-timing-function(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              transition-timing-function: -1;
            }
          }
        }
      }

      @include it('sm\:user-select(-1)') {
        @include assert {
          @include output {
            @include user-select(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              user-select: -1;
            }
          }
        }
      }

      @include it('sm\:vertical-align(-1)') {
        @include assert {
          @include output {
            @include vertical-align(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              vertical-align: -1;
            }
          }
        }
      }

      @include it('sm\:visibility(-1)') {
        @include assert {
          @include output {
            @include visibility(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              visibility: -1;
            }
          }
        }
      }

      @include it('sm\:white-space(-1)') {
        @include assert {
          @include output {
            @include white-space(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              white-space: -1;
            }
          }
        }
      }

      @include it('sm\:width(-1)') {
        @include assert {
          @include output {
            @include width(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              width: -1;
            }
          }
        }
      }

      @include it('sm\:will-change(-1, -1)') {
        @include assert {
          @include output {
            @include will-change(-1, -1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              will-change:
                -1,
                -1;
            }
          }
        }
      }

      @include it('sm\:word-break(-1)') {
        @include assert {
          @include output {
            @include word-break(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              word-break: -1;
            }
          }
        }
      }

      @include it('sm\:z-index(-1)') {
        @include assert {
          @include output {
            @include z-index(-1, $_sm);
            @include utils_reset-scss-tw-variables;
          }

          @include expect {
            @media (min-width: $_sm) {
              z-index: -1;
            }
          }
        }
      }
    }
  }
}
