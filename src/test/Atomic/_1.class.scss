@use '../mode0' as *;
@use 'true' as *;

// private member(prefix - or _) can't be imported, so I put here for testing

@mixin -webkit-box-orient($v, $rwd: null) {
  @if $rwd==null {
    -webkit-box-orient: $v;
  } @else {
    @media (min-width: $rwd) {
      -webkit-box-orient: $v;
    }
  }
}

@mixin -webkit-line-clamp($v, $rwd: null) {
  @if $rwd==null {
    -webkit-line-clamp: $v;
  } @else {
    @media (min-width: $rwd) {
      -webkit-line-clamp: $v;
    }
  }
}

@mixin -webkit-font-smoothing($v, $rwd: null) {
  @if $rwd==null {
    -webkit-font-smoothing: $v;
  } @else {
    @media (min-width: $rwd) {
      -webkit-font-smoothing: $v;
    }
  }
}

@mixin -moz-osx-font-smoothing($v, $rwd: null) {
  @if $rwd==null {
    -moz-osx-font-smoothing: $v;
  } @else {
    @media (min-width: $rwd) {
      -moz-osx-font-smoothing: $v;
    }
  }
}

@include describe('Atomic') {
  @include describe('Basic') {
    @include it('outline(solid)') {
      @include assert {
        @include output {
          @include outline(solid);
          @include reset;
        }

        @include expect {
          outline-style: solid;
        }
      }
    }

    @include it('flex(flex)') {
      @include assert {
        @include output {
          @include flex(flex);
          @include reset;
        }

        @include expect {
          display: flex;
        }
      }
    }

    @include it('flex(123)') {
      @include assert {
        @include output {
          @include flex(123);
          @include reset;
        }

        @include expect {
          flex: 123;
        }
      }
    }

    @include it('border-collapse(collapse)') {
      @include assert {
        @include output {
          @include border-collapse(collapse);
          @include reset;
        }

        @include expect {
          border-collapse: collapse;
        }
      }
    }

    @include it('border-collapse(123)') {
      @include assert {
        @include output {
          @include border-collapse(123);
          @include reset;
        }

        @include expect {
          border-collapse: 123;
        }
      }
    }

    @include it('resize(both)') {
      @include assert {
        @include output {
          @include resize(both);
          @include reset;
        }

        @include expect {
          resize: both;
        }
      }
    }

    @include it('resize(123)') {
      @include assert {
        @include output {
          @include resize(123);
          @include reset;
        }

        @include expect {
          resize: 123;
        }
      }
    }

    @include it('flex-wrap(wrap)') {
      @include assert {
        @include output {
          @include flex-wrap(wrap);
          @include reset;
        }

        @include expect {
          flex-wrap: wrap;
        }
      }
    }

    @include it('flex-wrap(123)') {
      @include assert {
        @include output {
          @include flex-wrap(123);
          @include reset;
        }

        @include expect {
          flex-wrap: 123;
        }
      }
    }

    @include it('cursor(123)') {
      @include assert {
        @include output {
          @include cursor(123);
          @include reset;
        }

        @include expect {
          cursor: 123;
        }
      }
    }

    @include it('will-change(123)') {
      @include assert {
        @include output {
          @include will-change(123);
          @include reset;
        }

        @include expect {
          will-change: 123;
        }
      }
    }

    @include it('-webkit-box-orient(123)') {
      @include assert {
        @include output {
          @include -webkit-box-orient(123);
          @include reset;
        }

        @include expect {
          -webkit-box-orient: 123;
        }
      }
    }

    @include it('-webkit-line-clamp(123)') {
      @include assert {
        @include output {
          @include -webkit-line-clamp(123);
          @include reset;
        }

        @include expect {
          -webkit-line-clamp: 123;
        }
      }
    }

    @include it('-webkit-font-smoothing(123)') {
      @include assert {
        @include output {
          @include -webkit-font-smoothing(123);
          @include reset;
        }

        @include expect {
          -webkit-font-smoothing: 123;
        }
      }
    }

    @include it('-moz-osx-font-smoothing(123)') {
      @include assert {
        @include output {
          @include -moz-osx-font-smoothing(123);
          @include reset;
        }

        @include expect {
          -moz-osx-font-smoothing: 123;
        }
      }
    }

    @include it('aspect-ratio(123)') {
      @include assert {
        @include output {
          @include aspect-ratio(123);
          @include reset;
        }

        @include expect {
          aspect-ratio: 123;
        }
      }
    }

    @include it('columns(123)') {
      @include assert {
        @include output {
          @include columns(123);
          @include reset;
        }

        @include expect {
          columns: 123;
        }
      }
    }

    @include it('object-position(123)') {
      @include assert {
        @include output {
          @include object-position(123);
          @include reset;
        }

        @include expect {
          object-position: 123;
        }
      }
    }

    @include it('inset(123)') {
      @include assert {
        @include output {
          @include inset(123);
          @include reset;
        }

        @include expect {
          inset: 123;
        }
      }
    }

    @include it('inset-inline-start(123)') {
      @include assert {
        @include output {
          @include inset-inline-start(123);
          @include reset;
        }

        @include expect {
          inset-inline-start: 123;
        }
      }
    }

    @include it('inset-inline-end(123)') {
      @include assert {
        @include output {
          @include inset-inline-end(123);
          @include reset;
        }

        @include expect {
          inset-inline-end: 123;
        }
      }
    }

    @include it('top(123)') {
      @include assert {
        @include output {
          @include top(123);
          @include reset;
        }

        @include expect {
          top: 123;
        }
      }
    }

    @include it('right(123)') {
      @include assert {
        @include output {
          @include right(123);
          @include reset;
        }

        @include expect {
          right: 123;
        }
      }
    }

    @include it('bottom(123)') {
      @include assert {
        @include output {
          @include bottom(123);
          @include reset;
        }

        @include expect {
          bottom: 123;
        }
      }
    }

    @include it('left(123)') {
      @include assert {
        @include output {
          @include left(123);
          @include reset;
        }

        @include expect {
          left: 123;
        }
      }
    }

    @include it('z-index(123)') {
      @include assert {
        @include output {
          @include z-index(123);
          @include reset;
        }

        @include expect {
          z-index: 123;
        }
      }
    }

    @include it('border-spacing(123)') {
      @include assert {
        @include output {
          @include border-spacing(123);
          @include reset;
        }

        @include expect {
          border-spacing: 123;
        }
      }
    }

    @include it('animation(123)') {
      @include assert {
        @include output {
          @include animation(123);
          @include reset;
        }

        @include expect {
          animation: 123;
        }
      }
    }

    @include it('transition-delay(123)') {
      @include assert {
        @include output {
          @include transition-delay(123);
          @include reset;
        }

        @include expect {
          transition-delay: 123;
        }
      }
    }

    @include it('transition-property(123)') {
      @include assert {
        @include output {
          @include transition-property(123);
          @include reset;
        }

        @include expect {
          transition-property: 123;
        }
      }
    }

    @include it('transition-timing-function(123)') {
      @include assert {
        @include output {
          @include transition-timing-function(123);
          @include reset;
        }

        @include expect {
          transition-timing-function: 123;
        }
      }
    }

    @include it('transition-duration(123)') {
      @include assert {
        @include output {
          @include transition-duration(123);
          @include reset;
        }

        @include expect {
          transition-duration: 123;
        }
      }
    }

    @include it('transform(123)') {
      @include assert {
        @include output {
          @include transform(123);
          @include reset;
        }

        @include expect {
          transform: 123;
        }
      }
    }

    @include it('transform-origin(123)') {
      @include assert {
        @include output {
          @include transform-origin(123);
          @include reset;
        }

        @include expect {
          transform-origin: 123;
        }
      }
    }

    @include it('accent-color(123)') {
      @include assert {
        @include output {
          @include accent-color(123);
          @include reset;
        }

        @include expect {
          accent-color: 123;
        }
      }
    }

    @include it('caret-color(123)') {
      @include assert {
        @include output {
          @include caret-color(123);
          @include reset;
        }

        @include expect {
          caret-color: 123;
        }
      }
    }

    @include it('scroll-margin(123)') {
      @include assert {
        @include output {
          @include scroll-margin(123);
          @include reset;
        }

        @include expect {
          scroll-margin: 123;
        }
      }
    }

    @include it('scroll-margin-inline-start(123)') {
      @include assert {
        @include output {
          @include scroll-margin-inline-start(123);
          @include reset;
        }

        @include expect {
          scroll-margin-inline-start: 123;
        }
      }
    }

    @include it('scroll-margin-inline-end(123)') {
      @include assert {
        @include output {
          @include scroll-margin-inline-end(123);
          @include reset;
        }

        @include expect {
          scroll-margin-inline-end: 123;
        }
      }
    }

    @include it('scroll-margin-top(123)') {
      @include assert {
        @include output {
          @include scroll-margin-top(123);
          @include reset;
        }

        @include expect {
          scroll-margin-top: 123;
        }
      }
    }

    @include it('scroll-margin-right(123)') {
      @include assert {
        @include output {
          @include scroll-margin-right(123);
          @include reset;
        }

        @include expect {
          scroll-margin-right: 123;
        }
      }
    }

    @include it('scroll-margin-bottom(123)') {
      @include assert {
        @include output {
          @include scroll-margin-bottom(123);
          @include reset;
        }

        @include expect {
          scroll-margin-bottom: 123;
        }
      }
    }

    @include it('scroll-margin-left(123)') {
      @include assert {
        @include output {
          @include scroll-margin-left(123);
          @include reset;
        }

        @include expect {
          scroll-margin-left: 123;
        }
      }
    }

    @include it('scroll-padding(123)') {
      @include assert {
        @include output {
          @include scroll-padding(123);
          @include reset;
        }

        @include expect {
          scroll-padding: 123;
        }
      }
    }

    @include it('scroll-padding-inline-start(123)') {
      @include assert {
        @include output {
          @include scroll-padding-inline-start(123);
          @include reset;
        }

        @include expect {
          scroll-padding-inline-start: 123;
        }
      }
    }

    @include it('scroll-padding-inline-end(123)') {
      @include assert {
        @include output {
          @include scroll-padding-inline-end(123);
          @include reset;
        }

        @include expect {
          scroll-padding-inline-end: 123;
        }
      }
    }

    @include it('scroll-padding-top(123)') {
      @include assert {
        @include output {
          @include scroll-padding-top(123);
          @include reset;
        }

        @include expect {
          scroll-padding-top: 123;
        }
      }
    }

    @include it('scroll-padding-right(123)') {
      @include assert {
        @include output {
          @include scroll-padding-right(123);
          @include reset;
        }

        @include expect {
          scroll-padding-right: 123;
        }
      }
    }

    @include it('scroll-padding-bottom(123)') {
      @include assert {
        @include output {
          @include scroll-padding-bottom(123);
          @include reset;
        }

        @include expect {
          scroll-padding-bottom: 123;
        }
      }
    }

    @include it('scroll-padding-left(123)') {
      @include assert {
        @include output {
          @include scroll-padding-left(123);
          @include reset;
        }

        @include expect {
          scroll-padding-left: 123;
        }
      }
    }

    @include it('fill(123)') {
      @include assert {
        @include output {
          @include fill(123);
          @include reset;
        }

        @include expect {
          fill: 123;
        }
      }
    }

    @include it('stroke(123)') {
      @include assert {
        @include output {
          @include stroke(123);
          @include reset;
        }

        @include expect {
          stroke: 123;
        }
      }
    }

    @include it('stroke-width(123)') {
      @include assert {
        @include output {
          @include stroke-width(123);
          @include reset;
        }

        @include expect {
          stroke-width: 123;
        }
      }
    }

    @include it('flex-basis(123)') {
      @include assert {
        @include output {
          @include flex-basis(123);
          @include reset;
        }

        @include expect {
          flex-basis: 123;
        }
      }
    }

    @include it('flex-grow(123)') {
      @include assert {
        @include output {
          @include flex-grow(123);
          @include reset;
        }

        @include expect {
          flex-grow: 123;
        }
      }
    }

    @include it('flex-shrink(123)') {
      @include assert {
        @include output {
          @include flex-shrink(123);
          @include reset;
        }

        @include expect {
          flex-shrink: 123;
        }
      }
    }

    @include it('gap(123)') {
      @include assert {
        @include output {
          @include gap(123);
          @include reset;
        }

        @include expect {
          gap: 123;
        }
      }
    }

    @include it('column-gap(123)') {
      @include assert {
        @include output {
          @include column-gap(123);
          @include reset;
        }

        @include expect {
          column-gap: 123;
        }
      }
    }

    @include it('row-gap(123)') {
      @include assert {
        @include output {
          @include row-gap(123);
          @include reset;
        }

        @include expect {
          row-gap: 123;
        }
      }
    }

    @include it('grid-auto-columns(123)') {
      @include assert {
        @include output {
          @include grid-auto-columns(123);
          @include reset;
        }

        @include expect {
          grid-auto-columns: 123;
        }
      }
    }

    @include it('grid-auto-rows(123)') {
      @include assert {
        @include output {
          @include grid-auto-rows(123);
          @include reset;
        }

        @include expect {
          grid-auto-rows: 123;
        }
      }
    }

    @include it('grid-column(123)') {
      @include assert {
        @include output {
          @include grid-column(123);
          @include reset;
        }

        @include expect {
          grid-column: 123;
        }
      }
    }

    @include it('grid-column-start(123)') {
      @include assert {
        @include output {
          @include grid-column-start(123);
          @include reset;
        }

        @include expect {
          grid-column-start: 123;
        }
      }
    }

    @include it('grid-column-end(123)') {
      @include assert {
        @include output {
          @include grid-column-end(123);
          @include reset;
        }

        @include expect {
          grid-column-end: 123;
        }
      }
    }

    @include it('grid-row(123)') {
      @include assert {
        @include output {
          @include grid-row(123);
          @include reset;
        }

        @include expect {
          grid-row: 123;
        }
      }
    }

    @include it('grid-row-start(123)') {
      @include assert {
        @include output {
          @include grid-row-start(123);
          @include reset;
        }

        @include expect {
          grid-row-start: 123;
        }
      }
    }

    @include it('grid-row-end(123)') {
      @include assert {
        @include output {
          @include grid-row-end(123);
          @include reset;
        }

        @include expect {
          grid-row-end: 123;
        }
      }
    }

    @include it('grid-template-columns(123)') {
      @include assert {
        @include output {
          @include grid-template-columns(123);
          @include reset;
        }

        @include expect {
          grid-template-columns: 123;
        }
      }
    }

    @include it('grid-template-rows(123)') {
      @include assert {
        @include output {
          @include grid-template-rows(123);
          @include reset;
        }

        @include expect {
          grid-template-rows: 123;
        }
      }
    }

    @include it('order(123)') {
      @include assert {
        @include output {
          @include order(123);
          @include reset;
        }

        @include expect {
          order: 123;
        }
      }
    }

    @include it('margin(123)') {
      @include assert {
        @include output {
          @include margin(123);
          @include reset;
        }

        @include expect {
          margin: 123;
        }
      }
    }

    @include it('margin-inline-start(123)') {
      @include assert {
        @include output {
          @include margin-inline-start(123);
          @include reset;
        }

        @include expect {
          margin-inline-start: 123;
        }
      }
    }

    @include it('margin-inline-end(123)') {
      @include assert {
        @include output {
          @include margin-inline-end(123);
          @include reset;
        }

        @include expect {
          margin-inline-end: 123;
        }
      }
    }

    @include it('margin-top(123)') {
      @include assert {
        @include output {
          @include margin-top(123);
          @include reset;
        }

        @include expect {
          margin-top: 123;
        }
      }
    }

    @include it('margin-right(123)') {
      @include assert {
        @include output {
          @include margin-right(123);
          @include reset;
        }

        @include expect {
          margin-right: 123;
        }
      }
    }

    @include it('margin-bottom(123)') {
      @include assert {
        @include output {
          @include margin-bottom(123);
          @include reset;
        }

        @include expect {
          margin-bottom: 123;
        }
      }
    }

    @include it('margin-left(123)') {
      @include assert {
        @include output {
          @include margin-left(123);
          @include reset;
        }

        @include expect {
          margin-left: 123;
        }
      }
    }

    @include it('padding(123)') {
      @include assert {
        @include output {
          @include padding(123);
          @include reset;
        }

        @include expect {
          padding: 123;
        }
      }
    }

    @include it('padding-inline-start(123)') {
      @include assert {
        @include output {
          @include padding-inline-start(123);
          @include reset;
        }

        @include expect {
          padding-inline-start: 123;
        }
      }
    }

    @include it('padding-inline-end(123)') {
      @include assert {
        @include output {
          @include padding-inline-end(123);
          @include reset;
        }

        @include expect {
          padding-inline-end: 123;
        }
      }
    }

    @include it('padding-top(123)') {
      @include assert {
        @include output {
          @include padding-top(123);
          @include reset;
        }

        @include expect {
          padding-top: 123;
        }
      }
    }

    @include it('padding-right(123)') {
      @include assert {
        @include output {
          @include padding-right(123);
          @include reset;
        }

        @include expect {
          padding-right: 123;
        }
      }
    }

    @include it('padding-bottom(123)') {
      @include assert {
        @include output {
          @include padding-bottom(123);
          @include reset;
        }

        @include expect {
          padding-bottom: 123;
        }
      }
    }

    @include it('padding-left(123)') {
      @include assert {
        @include output {
          @include padding-left(123);
          @include reset;
        }

        @include expect {
          padding-left: 123;
        }
      }
    }

    @include it('height(123)') {
      @include assert {
        @include output {
          @include height(123);
          @include reset;
        }

        @include expect {
          height: 123;
        }
      }
    }

    @include it('max-height(123)') {
      @include assert {
        @include output {
          @include max-height(123);
          @include reset;
        }

        @include expect {
          max-height: 123;
        }
      }
    }

    @include it('max-width(123)') {
      @include assert {
        @include output {
          @include max-width(123);
          @include reset;
        }

        @include expect {
          max-width: 123;
        }
      }
    }

    @include it('min-height(123)') {
      @include assert {
        @include output {
          @include min-height(123);
          @include reset;
        }

        @include expect {
          min-height: 123;
        }
      }
    }

    @include it('min-width(123)') {
      @include assert {
        @include output {
          @include min-width(123);
          @include reset;
        }

        @include expect {
          min-width: 123;
        }
      }
    }

    @include it('width(123)') {
      @include assert {
        @include output {
          @include width(123);
          @include reset;
        }

        @include expect {
          width: 123;
        }
      }
    }

    @include it('font-family(123)') {
      @include assert {
        @include output {
          @include font-family(123);
          @include reset;
        }

        @include expect {
          font-family: 123;
        }
      }
    }

    @include it('font-weight(123)') {
      @include assert {
        @include output {
          @include font-weight(123);
          @include reset;
        }

        @include expect {
          font-weight: 123;
        }
      }
    }

    @include it('letter-spacing(123)') {
      @include assert {
        @include output {
          @include letter-spacing(123);
          @include reset;
        }

        @include expect {
          letter-spacing: 123;
        }
      }
    }

    @include it('overflow(123)') {
      @include assert {
        @include output {
          @include overflow(123);
          @include reset;
        }

        @include expect {
          overflow: 123;
        }
      }
    }

    @include it('overflow-x(123)') {
      @include assert {
        @include output {
          @include overflow-x(123);
          @include reset;
        }

        @include expect {
          overflow-x: 123;
        }
      }
    }

    @include it('overflow-y(123)') {
      @include assert {
        @include output {
          @include overflow-y(123);
          @include reset;
        }

        @include expect {
          overflow-y: 123;
        }
      }
    }

    @include it('clip(123)') {
      @include assert {
        @include output {
          @include clip(123);
          @include reset;
        }

        @include expect {
          clip: 123;
        }
      }
    }

    @include it('display(123)') {
      @include assert {
        @include output {
          @include display(123);
          @include reset;
        }

        @include expect {
          display: 123;
        }
      }
    }

    @include it('line-height(123)') {
      @include assert {
        @include output {
          @include line-height(123);
          @include reset;
        }

        @include expect {
          line-height: 123;
        }
      }
    }

    @include it('list-style-image(123)') {
      @include assert {
        @include output {
          @include list-style-image(123);
          @include reset;
        }

        @include expect {
          list-style-image: 123;
        }
      }
    }

    @include it('list-style-type(123)') {
      @include assert {
        @include output {
          @include list-style-type(123);
          @include reset;
        }

        @include expect {
          list-style-type: 123;
        }
      }
    }

    @include it('font-size(123)') {
      @include assert {
        @include output {
          @include font-size(123);
          @include reset;
        }

        @include expect {
          font-size: 123;
        }
      }
    }

    @include it('text-decoration-color(123)') {
      @include assert {
        @include output {
          @include text-decoration-color(123);
          @include reset;
        }

        @include expect {
          text-decoration-color: 123;
        }
      }
    }

    @include it('text-decoration-thickness(123)') {
      @include assert {
        @include output {
          @include text-decoration-thickness(123);
          @include reset;
        }

        @include expect {
          text-decoration-thickness: 123;
        }
      }
    }

    @include it('text-indent(123)') {
      @include assert {
        @include output {
          @include text-indent(123);
          @include reset;
        }

        @include expect {
          text-indent: 123;
        }
      }
    }

    @include it('text-underline-offset(123)') {
      @include assert {
        @include output {
          @include text-underline-offset(123);
          @include reset;
        }

        @include expect {
          text-underline-offset: 123;
        }
      }
    }

    @include it('vertical-align(123)') {
      @include assert {
        @include output {
          @include vertical-align(123);
          @include reset;
        }

        @include expect {
          vertical-align: 123;
        }
      }
    }

    @include it('background-color(123)') {
      @include assert {
        @include output {
          @include background-color(123);
          @include reset;
        }

        @include expect {
          background-color: 123;
        }
      }
    }

    @include it('background-size(123)') {
      @include assert {
        @include output {
          @include background-size(123);
          @include reset;
        }

        @include expect {
          background-size: 123;
        }
      }
    }

    @include it('background-position(123)') {
      @include assert {
        @include output {
          @include background-position(123);
          @include reset;
        }

        @include expect {
          background-position: 123;
        }
      }
    }

    @include it('background-image(123)') {
      @include assert {
        @include output {
          @include background-image(123);
          @include reset;
        }

        @include expect {
          background-image: 123;
        }
      }
    }

    @include it('border-color(123)') {
      @include assert {
        @include output {
          @include border-color(123);
          @include reset;
        }

        @include expect {
          border-color: 123;
        }
      }
    }

    @include it('border-width(123)') {
      @include assert {
        @include output {
          @include border-width(123);
          @include reset;
        }

        @include expect {
          border-width: 123;
        }
      }
    }

    @include it('border-left-color(123)') {
      @include assert {
        @include output {
          @include border-left-color(123);
          @include reset;
        }

        @include expect {
          border-left-color: 123;
        }
      }
    }

    @include it('border-left-width(123)') {
      @include assert {
        @include output {
          @include border-left-width(123);
          @include reset;
        }

        @include expect {
          border-left-width: 123;
        }
      }
    }

    @include it('border-right-color(123)') {
      @include assert {
        @include output {
          @include border-right-color(123);
          @include reset;
        }

        @include expect {
          border-right-color: 123;
        }
      }
    }

    @include it('border-right-width(123)') {
      @include assert {
        @include output {
          @include border-right-width(123);
          @include reset;
        }

        @include expect {
          border-right-width: 123;
        }
      }
    }

    @include it('border-top-color(123)') {
      @include assert {
        @include output {
          @include border-top-color(123);
          @include reset;
        }

        @include expect {
          border-top-color: 123;
        }
      }
    }

    @include it('border-top-width(123)') {
      @include assert {
        @include output {
          @include border-top-width(123);
          @include reset;
        }

        @include expect {
          border-top-width: 123;
        }
      }
    }

    @include it('border-bottom-color(123)') {
      @include assert {
        @include output {
          @include border-bottom-color(123);
          @include reset;
        }

        @include expect {
          border-bottom-color: 123;
        }
      }
    }

    @include it('border-bottom-width(123)') {
      @include assert {
        @include output {
          @include border-bottom-width(123);
          @include reset;
        }

        @include expect {
          border-bottom-width: 123;
        }
      }
    }

    @include it('border-inline-start-color(123)') {
      @include assert {
        @include output {
          @include border-inline-start-color(123);
          @include reset;
        }

        @include expect {
          border-inline-start-color: 123;
        }
      }
    }

    @include it('border-inline-start-width(123)') {
      @include assert {
        @include output {
          @include border-inline-start-width(123);
          @include reset;
        }

        @include expect {
          border-inline-start-width: 123;
        }
      }
    }

    @include it('border-inline-end-color(123)') {
      @include assert {
        @include output {
          @include border-inline-end-color(123);
          @include reset;
        }

        @include expect {
          border-inline-end-color: 123;
        }
      }
    }

    @include it('border-inline-end-width(123)') {
      @include assert {
        @include output {
          @include border-inline-end-width(123);
          @include reset;
        }

        @include expect {
          border-inline-end-width: 123;
        }
      }
    }

    @include it('border-radius(123)') {
      @include assert {
        @include output {
          @include border-radius(123);
          @include reset;
        }

        @include expect {
          border-radius: 123;
        }
      }
    }

    @include it('border-start-start-radius(123)') {
      @include assert {
        @include output {
          @include border-start-start-radius(123);
          @include reset;
        }

        @include expect {
          border-start-start-radius: 123;
        }
      }
    }

    @include it('border-end-start-radius(123)') {
      @include assert {
        @include output {
          @include border-end-start-radius(123);
          @include reset;
        }

        @include expect {
          border-end-start-radius: 123;
        }
      }
    }

    @include it('border-start-end-radius(123)') {
      @include assert {
        @include output {
          @include border-start-end-radius(123);
          @include reset;
        }

        @include expect {
          border-start-end-radius: 123;
        }
      }
    }

    @include it('border-end-end-radius(123)') {
      @include assert {
        @include output {
          @include border-end-end-radius(123);
          @include reset;
        }

        @include expect {
          border-end-end-radius: 123;
        }
      }
    }

    @include it('border-top-left-radius(123)') {
      @include assert {
        @include output {
          @include border-top-left-radius(123);
          @include reset;
        }

        @include expect {
          border-top-left-radius: 123;
        }
      }
    }

    @include it('border-top-right-radius(123)') {
      @include assert {
        @include output {
          @include border-top-right-radius(123);
          @include reset;
        }

        @include expect {
          border-top-right-radius: 123;
        }
      }
    }

    @include it('border-bottom-right-radius(123)') {
      @include assert {
        @include output {
          @include border-bottom-right-radius(123);
          @include reset;
        }

        @include expect {
          border-bottom-right-radius: 123;
        }
      }
    }

    @include it('border-bottom-left-radius(123)') {
      @include assert {
        @include output {
          @include border-bottom-left-radius(123);
          @include reset;
        }

        @include expect {
          border-bottom-left-radius: 123;
        }
      }
    }

    @include it('outline-color(123)') {
      @include assert {
        @include output {
          @include outline-color(123);
          @include reset;
        }

        @include expect {
          outline-color: 123;
        }
      }
    }

    @include it('outline-width(123)') {
      @include assert {
        @include output {
          @include outline-width(123);
          @include reset;
        }

        @include expect {
          outline-width: 123;
        }
      }
    }

    @include it('outline-offset(123)') {
      @include assert {
        @include output {
          @include outline-offset(123);
          @include reset;
        }

        @include expect {
          outline-offset: 123;
        }
      }
    }

    @include it('box-shadow(123)') {
      @include assert {
        @include output {
          @include box-shadow(123);
          @include reset;
        }

        @include expect {
          box-shadow: 123;
        }
      }
    }

    @include it('opacity(123)') {
      @include assert {
        @include output {
          @include opacity(123);
          @include reset;
        }

        @include expect {
          opacity: 123;
        }
      }
    }

    @include it('backdrop-filter(123)') {
      @include assert {
        @include output {
          @include backdrop-filter(123);
          @include reset;
        }

        @include expect {
          backdrop-filter: 123;
        }
      }
    }

    @include it('filter(123)') {
      @include assert {
        @include output {
          @include filter(123);
          @include reset;
        }

        @include expect {
          filter: 123;
        }
      }
    }

    @include it('box-decoration-break(123)') {
      @include assert {
        @include output {
          @include box-decoration-break(123);
          @include reset;
        }

        @include expect {
          box-decoration-break: 123;
        }
      }
    }

    @include it('box-sizing(123)') {
      @include assert {
        @include output {
          @include box-sizing(123);
          @include reset;
        }

        @include expect {
          box-sizing: 123;
        }
      }
    }

    @include it('break-after(123)') {
      @include assert {
        @include output {
          @include break-after(123);
          @include reset;
        }

        @include expect {
          break-after: 123;
        }
      }
    }

    @include it('break-before(123)') {
      @include assert {
        @include output {
          @include break-before(123);
          @include reset;
        }

        @include expect {
          break-before: 123;
        }
      }
    }

    @include it('break-inside(123)') {
      @include assert {
        @include output {
          @include break-inside(123);
          @include reset;
        }

        @include expect {
          break-inside: 123;
        }
      }
    }

    @include it('clear(123)') {
      @include assert {
        @include output {
          @include clear(123);
          @include reset;
        }

        @include expect {
          clear: 123;
        }
      }
    }

    @include it('float(123)') {
      @include assert {
        @include output {
          @include float(123);
          @include reset;
        }

        @include expect {
          float: 123;
        }
      }
    }

    @include it('isolation(123)') {
      @include assert {
        @include output {
          @include isolation(123);
          @include reset;
        }

        @include expect {
          isolation: 123;
        }
      }
    }

    @include it('object-fit(123)') {
      @include assert {
        @include output {
          @include object-fit(123);
          @include reset;
        }

        @include expect {
          object-fit: 123;
        }
      }
    }

    @include it('overscroll-behavior(123)') {
      @include assert {
        @include output {
          @include overscroll-behavior(123);
          @include reset;
        }

        @include expect {
          overscroll-behavior: 123;
        }
      }
    }

    @include it('overscroll-behavior-y(123)') {
      @include assert {
        @include output {
          @include overscroll-behavior-y(123);
          @include reset;
        }

        @include expect {
          overscroll-behavior-y: 123;
        }
      }
    }

    @include it('overscroll-behavior-x(123)') {
      @include assert {
        @include output {
          @include overscroll-behavior-x(123);
          @include reset;
        }

        @include expect {
          overscroll-behavior-x: 123;
        }
      }
    }

    @include it('position(123)') {
      @include assert {
        @include output {
          @include position(123);
          @include reset;
        }

        @include expect {
          position: 123;
        }
      }
    }

    @include it('visibility(123)') {
      @include assert {
        @include output {
          @include visibility(123);
          @include reset;
        }

        @include expect {
          visibility: 123;
        }
      }
    }

    @include it('align-content(123)') {
      @include assert {
        @include output {
          @include align-content(123);
          @include reset;
        }

        @include expect {
          align-content: 123;
        }
      }
    }

    @include it('align-items(123)') {
      @include assert {
        @include output {
          @include align-items(123);
          @include reset;
        }

        @include expect {
          align-items: 123;
        }
      }
    }

    @include it('align-self(123)') {
      @include assert {
        @include output {
          @include align-self(123);
          @include reset;
        }

        @include expect {
          align-self: 123;
        }
      }
    }

    @include it('flex-direction(123)') {
      @include assert {
        @include output {
          @include flex-direction(123);
          @include reset;
        }

        @include expect {
          flex-direction: 123;
        }
      }
    }

    @include it('grid-auto-flow(123)') {
      @include assert {
        @include output {
          @include grid-auto-flow(123);
          @include reset;
        }

        @include expect {
          grid-auto-flow: 123;
        }
      }
    }

    @include it('justify-content(123)') {
      @include assert {
        @include output {
          @include justify-content(123);
          @include reset;
        }

        @include expect {
          justify-content: 123;
        }
      }
    }

    @include it('justify-items(123)') {
      @include assert {
        @include output {
          @include justify-items(123);
          @include reset;
        }

        @include expect {
          justify-items: 123;
        }
      }
    }

    @include it('justify-self(123)') {
      @include assert {
        @include output {
          @include justify-self(123);
          @include reset;
        }

        @include expect {
          justify-self: 123;
        }
      }
    }

    @include it('place-content(123)') {
      @include assert {
        @include output {
          @include place-content(123);
          @include reset;
        }

        @include expect {
          place-content: 123;
        }
      }
    }

    @include it('place-items(123)') {
      @include assert {
        @include output {
          @include place-items(123);
          @include reset;
        }

        @include expect {
          place-items: 123;
        }
      }
    }

    @include it('place-self(123)') {
      @include assert {
        @include output {
          @include place-self(123);
          @include reset;
        }

        @include expect {
          place-self: 123;
        }
      }
    }

    @include it('font-style(123)') {
      @include assert {
        @include output {
          @include font-style(123);
          @include reset;
        }

        @include expect {
          font-style: 123;
        }
      }
    }

    @include it('font-variant-numeric(123)') {
      @include assert {
        @include output {
          @include font-variant-numeric(123);
          @include reset;
        }

        @include expect {
          font-variant-numeric: 123;
        }
      }
    }

    @include it('hyphens(123)') {
      @include assert {
        @include output {
          @include hyphens(123);
          @include reset;
        }

        @include expect {
          hyphens: 123;
        }
      }
    }

    @include it('list-style-position(123)') {
      @include assert {
        @include output {
          @include list-style-position(123);
          @include reset;
        }

        @include expect {
          list-style-position: 123;
        }
      }
    }

    @include it('text-align(123)') {
      @include assert {
        @include output {
          @include text-align(123);
          @include reset;
        }

        @include expect {
          text-align: 123;
        }
      }
    }

    @include it('text-decoration-line(123)') {
      @include assert {
        @include output {
          @include text-decoration-line(123);
          @include reset;
        }

        @include expect {
          text-decoration-line: 123;
        }
      }
    }

    @include it('text-decoration-style(123)') {
      @include assert {
        @include output {
          @include text-decoration-style(123);
          @include reset;
        }

        @include expect {
          text-decoration-style: 123;
        }
      }
    }

    @include it('text-overflow(123)') {
      @include assert {
        @include output {
          @include text-overflow(123);
          @include reset;
        }

        @include expect {
          text-overflow: 123;
        }
      }
    }

    @include it('white-space(123)') {
      @include assert {
        @include output {
          @include white-space(123);
          @include reset;
        }

        @include expect {
          white-space: 123;
        }
      }
    }

    @include it('text-transform(123)') {
      @include assert {
        @include output {
          @include text-transform(123);
          @include reset;
        }

        @include expect {
          text-transform: 123;
        }
      }
    }

    @include it('overflow-wrap(123)') {
      @include assert {
        @include output {
          @include overflow-wrap(123);
          @include reset;
        }

        @include expect {
          overflow-wrap: 123;
        }
      }
    }

    @include it('word-break(123)') {
      @include assert {
        @include output {
          @include word-break(123);
          @include reset;
        }

        @include expect {
          word-break: 123;
        }
      }
    }

    @include it('text-wrap(123)') {
      @include assert {
        @include output {
          @include text-wrap(123);
          @include reset;
        }

        @include expect {
          text-wrap: 123;
        }
      }
    }

    @include it('background-attachment(123)') {
      @include assert {
        @include output {
          @include background-attachment(123);
          @include reset;
        }

        @include expect {
          background-attachment: 123;
        }
      }
    }

    @include it('background-clip(123)') {
      @include assert {
        @include output {
          @include background-clip(123);
          @include reset;
        }

        @include expect {
          background-clip: 123;
        }
      }
    }

    @include it('background-origin(123)') {
      @include assert {
        @include output {
          @include background-origin(123);
          @include reset;
        }

        @include expect {
          background-origin: 123;
        }
      }
    }

    @include it('background-repeat(123)') {
      @include assert {
        @include output {
          @include background-repeat(123);
          @include reset;
        }

        @include expect {
          background-repeat: 123;
        }
      }
    }

    @include it('border-style(123)') {
      @include assert {
        @include output {
          @include border-style(123);
          @include reset;
        }

        @include expect {
          border-style: 123;
        }
      }
    }

    @include it('outline-style(123)') {
      @include assert {
        @include output {
          @include outline-style(123);
          @include reset;
        }

        @include expect {
          outline-style: 123;
        }
      }
    }

    @include it('background-blend-mode(123)') {
      @include assert {
        @include output {
          @include background-blend-mode(123);
          @include reset;
        }

        @include expect {
          background-blend-mode: 123;
        }
      }
    }

    @include it('mix-blend-mode(123)') {
      @include assert {
        @include output {
          @include mix-blend-mode(123);
          @include reset;
        }

        @include expect {
          mix-blend-mode: 123;
        }
      }
    }

    @include it('caption-side(123)') {
      @include assert {
        @include output {
          @include caption-side(123);
          @include reset;
        }

        @include expect {
          caption-side: 123;
        }
      }
    }

    @include it('table-layout(123)') {
      @include assert {
        @include output {
          @include table-layout(123);
          @include reset;
        }

        @include expect {
          table-layout: 123;
        }
      }
    }

    @include it('appearance(123)') {
      @include assert {
        @include output {
          @include appearance(123);
          @include reset;
        }

        @include expect {
          appearance: 123;
        }
      }
    }

    @include it('pointer-events(123)') {
      @include assert {
        @include output {
          @include pointer-events(123);
          @include reset;
        }

        @include expect {
          pointer-events: 123;
        }
      }
    }

    @include it('scroll-behavior(123)') {
      @include assert {
        @include output {
          @include scroll-behavior(123);
          @include reset;
        }

        @include expect {
          scroll-behavior: 123;
        }
      }
    }

    @include it('scroll-snap-align(123)') {
      @include assert {
        @include output {
          @include scroll-snap-align(123);
          @include reset;
        }

        @include expect {
          scroll-snap-align: 123;
        }
      }
    }

    @include it('scroll-snap-stop(123)') {
      @include assert {
        @include output {
          @include scroll-snap-stop(123);
          @include reset;
        }

        @include expect {
          scroll-snap-stop: 123;
        }
      }
    }

    @include it('scroll-snap-type(123)') {
      @include assert {
        @include output {
          @include scroll-snap-type(123);
          @include reset;
        }

        @include expect {
          scroll-snap-type: 123;
        }
      }
    }

    @include it('touch-action(123)') {
      @include assert {
        @include output {
          @include touch-action(123);
          @include reset;
        }

        @include expect {
          touch-action: 123;
        }
      }
    }

    @include it('user-select(123)') {
      @include assert {
        @include output {
          @include user-select(123);
          @include reset;
        }

        @include expect {
          user-select: 123;
        }
      }
    }

    @include it('forced-color-adjust(123)') {
      @include assert {
        @include output {
          @include forced-color-adjust(123);
          @include reset;
        }

        @include expect {
          forced-color-adjust: 123;
        }
      }
    }

    @include it('color(123)') {
      @include assert {
        @include output {
          @include color(123);
          @include reset;
        }

        @include expect {
          color: 123;
        }
      }
    }
  }

  @include describe('Rwd') {
    @include it('outline(solid, $sm)') {
      @include assert {
        @include output {
          @include outline(solid, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline-style: solid;
          }
        }
      }
    }

    @include it('outline(123, $sm)') {
      @include assert {
        @include output {
          @include outline(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline: 123;
          }
        }
      }
    }

    @include it('flex(flex, $sm)') {
      @include assert {
        @include output {
          @include flex(flex, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            display: flex;
          }
        }
      }
    }

    @include it('flex(123, $sm)') {
      @include assert {
        @include output {
          @include flex(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex: 123;
          }
        }
      }
    }

    @include it('border-collapse(collapse, $sm)') {
      @include assert {
        @include output {
          @include border-collapse(collapse, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-collapse: collapse;
          }
        }
      }
    }

    @include it('border-collapse(123, $sm)') {
      @include assert {
        @include output {
          @include border-collapse(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-collapse: 123;
          }
        }
      }
    }

    @include it('resize(both, $sm)') {
      @include assert {
        @include output {
          @include resize(both, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            resize: both;
          }
        }
      }
    }

    @include it('resize(123, $sm)') {
      @include assert {
        @include output {
          @include resize(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            resize: 123;
          }
        }
      }
    }

    @include it('flex-wrap(wrap, $sm)') {
      @include assert {
        @include output {
          @include flex-wrap(wrap, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-wrap: wrap;
          }
        }
      }
    }

    @include it('flex-wrap(123, $sm)') {
      @include assert {
        @include output {
          @include flex-wrap(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-wrap: 123;
          }
        }
      }
    }

    @include it('cursor(123, null, $sm)') {
      @include assert {
        @include output {
          @include cursor(123, null, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            cursor: 123;
          }
        }
      }
    }

    @include it('will-change(123, null, $sm)') {
      @include assert {
        @include output {
          @include will-change(123, null, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            will-change: 123;
          }
        }
      }
    }

    @include it('-webkit-box-orient(123, $sm)') {
      @include assert {
        @include output {
          @include -webkit-box-orient(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            -webkit-box-orient: 123;
          }
        }
      }
    }

    @include it('-webkit-line-clamp(123, $sm)') {
      @include assert {
        @include output {
          @include -webkit-line-clamp(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            -webkit-line-clamp: 123;
          }
        }
      }
    }

    @include it('-webkit-font-smoothing(123, $sm)') {
      @include assert {
        @include output {
          @include -webkit-font-smoothing(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            -webkit-font-smoothing: 123;
          }
        }
      }
    }

    @include it('-moz-osx-font-smoothing(123, $sm)') {
      @include assert {
        @include output {
          @include -moz-osx-font-smoothing(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            -moz-osx-font-smoothing: 123;
          }
        }
      }
    }

    @include it('aspect-ratio(123, $sm)') {
      @include assert {
        @include output {
          @include aspect-ratio(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            aspect-ratio: 123;
          }
        }
      }
    }

    @include it('columns(123, $sm)') {
      @include assert {
        @include output {
          @include columns(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            columns: 123;
          }
        }
      }
    }

    @include it('object-position(123, $sm)') {
      @include assert {
        @include output {
          @include object-position(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            object-position: 123;
          }
        }
      }
    }

    @include it('inset(123, $sm)') {
      @include assert {
        @include output {
          @include inset(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            inset: 123;
          }
        }
      }
    }

    @include it('inset-inline-start(123, $sm)') {
      @include assert {
        @include output {
          @include inset-inline-start(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            inset-inline-start: 123;
          }
        }
      }
    }

    @include it('inset-inline-end(123, $sm)') {
      @include assert {
        @include output {
          @include inset-inline-end(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            inset-inline-end: 123;
          }
        }
      }
    }

    @include it('top(123, $sm)') {
      @include assert {
        @include output {
          @include top(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            top: 123;
          }
        }
      }
    }

    @include it('right(123, $sm)') {
      @include assert {
        @include output {
          @include right(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            right: 123;
          }
        }
      }
    }

    @include it('bottom(123, $sm)') {
      @include assert {
        @include output {
          @include bottom(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            bottom: 123;
          }
        }
      }
    }

    @include it('left(123, $sm)') {
      @include assert {
        @include output {
          @include left(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            left: 123;
          }
        }
      }
    }

    @include it('z-index(123, $sm)') {
      @include assert {
        @include output {
          @include z-index(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            z-index: 123;
          }
        }
      }
    }

    @include it('border-spacing(123, $sm)') {
      @include assert {
        @include output {
          @include border-spacing(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-spacing: 123;
          }
        }
      }
    }

    @include it('animation(123, $sm)') {
      @include assert {
        @include output {
          @include animation(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            animation: 123;
          }
        }
      }
    }

    @include it('transition-delay(123, $sm)') {
      @include assert {
        @include output {
          @include transition-delay(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transition-delay: 123;
          }
        }
      }
    }

    @include it('transition-property(123, $sm)') {
      @include assert {
        @include output {
          @include transition-property(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transition-property: 123;
          }
        }
      }
    }

    @include it('transition-timing-function(123, $sm)') {
      @include assert {
        @include output {
          @include transition-timing-function(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transition-timing-function: 123;
          }
        }
      }
    }

    @include it('transition-duration(123, $sm)') {
      @include assert {
        @include output {
          @include transition-duration(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transition-duration: 123;
          }
        }
      }
    }

    @include it('transform(123, $sm)') {
      @include assert {
        @include output {
          @include transform(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transform: 123;
          }
        }
      }
    }

    @include it('transform-origin(123, $sm)') {
      @include assert {
        @include output {
          @include transform-origin(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transform-origin: 123;
          }
        }
      }
    }

    @include it('accent-color(123, $sm)') {
      @include assert {
        @include output {
          @include accent-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            accent-color: 123;
          }
        }
      }
    }

    @include it('caret-color(123, $sm)') {
      @include assert {
        @include output {
          @include caret-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            caret-color: 123;
          }
        }
      }
    }

    @include it('scroll-margin(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-margin(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin: 123;
          }
        }
      }
    }

    @include it('scroll-margin-inline-start(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-margin-inline-start(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-inline-start: 123;
          }
        }
      }
    }

    @include it('scroll-margin-inline-end(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-margin-inline-end(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-inline-end: 123;
          }
        }
      }
    }

    @include it('scroll-margin-top(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-margin-top(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-top: 123;
          }
        }
      }
    }

    @include it('scroll-margin-right(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-margin-right(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-right: 123;
          }
        }
      }
    }

    @include it('scroll-margin-bottom(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-margin-bottom(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-bottom: 123;
          }
        }
      }
    }

    @include it('scroll-margin-left(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-margin-left(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-left: 123;
          }
        }
      }
    }

    @include it('scroll-padding(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-padding(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding: 123;
          }
        }
      }
    }

    @include it('scroll-padding-inline-start(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-padding-inline-start(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-inline-start: 123;
          }
        }
      }
    }

    @include it('scroll-padding-inline-end(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-padding-inline-end(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-inline-end: 123;
          }
        }
      }
    }

    @include it('scroll-padding-top(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-padding-top(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-top: 123;
          }
        }
      }
    }

    @include it('scroll-padding-right(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-padding-right(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-right: 123;
          }
        }
      }
    }

    @include it('scroll-padding-bottom(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-padding-bottom(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-bottom: 123;
          }
        }
      }
    }

    @include it('scroll-padding-left(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-padding-left(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-left: 123;
          }
        }
      }
    }

    @include it('fill(123, $sm)') {
      @include assert {
        @include output {
          @include fill(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            fill: 123;
          }
        }
      }
    }

    @include it('stroke(123, $sm)') {
      @include assert {
        @include output {
          @include stroke(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            stroke: 123;
          }
        }
      }
    }

    @include it('stroke-width(123, $sm)') {
      @include assert {
        @include output {
          @include stroke-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            stroke-width: 123;
          }
        }
      }
    }

    @include it('flex-basis(123, $sm)') {
      @include assert {
        @include output {
          @include flex-basis(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-basis: 123;
          }
        }
      }
    }

    @include it('flex-grow(123, $sm)') {
      @include assert {
        @include output {
          @include flex-grow(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-grow: 123;
          }
        }
      }
    }

    @include it('flex-shrink(123, $sm)') {
      @include assert {
        @include output {
          @include flex-shrink(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-shrink: 123;
          }
        }
      }
    }

    @include it('gap(123, $sm)') {
      @include assert {
        @include output {
          @include gap(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            gap: 123;
          }
        }
      }
    }

    @include it('column-gap(123, $sm)') {
      @include assert {
        @include output {
          @include column-gap(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            column-gap: 123;
          }
        }
      }
    }

    @include it('row-gap(123, $sm)') {
      @include assert {
        @include output {
          @include row-gap(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            row-gap: 123;
          }
        }
      }
    }

    @include it('grid-auto-columns(123, $sm)') {
      @include assert {
        @include output {
          @include grid-auto-columns(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-auto-columns: 123;
          }
        }
      }
    }

    @include it('grid-auto-rows(123, $sm)') {
      @include assert {
        @include output {
          @include grid-auto-rows(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-auto-rows: 123;
          }
        }
      }
    }

    @include it('grid-column(123, $sm)') {
      @include assert {
        @include output {
          @include grid-column(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-column: 123;
          }
        }
      }
    }

    @include it('grid-column-start(123, $sm)') {
      @include assert {
        @include output {
          @include grid-column-start(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-column-start: 123;
          }
        }
      }
    }

    @include it('grid-column-end(123, $sm)') {
      @include assert {
        @include output {
          @include grid-column-end(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-column-end: 123;
          }
        }
      }
    }

    @include it('grid-row(123, $sm)') {
      @include assert {
        @include output {
          @include grid-row(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-row: 123;
          }
        }
      }
    }

    @include it('grid-row-start(123, $sm)') {
      @include assert {
        @include output {
          @include grid-row-start(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-row-start: 123;
          }
        }
      }
    }

    @include it('grid-row-end(123, $sm)') {
      @include assert {
        @include output {
          @include grid-row-end(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-row-end: 123;
          }
        }
      }
    }

    @include it('grid-template-columns(123, $sm)') {
      @include assert {
        @include output {
          @include grid-template-columns(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-template-columns: 123;
          }
        }
      }
    }

    @include it('grid-template-rows(123, $sm)') {
      @include assert {
        @include output {
          @include grid-template-rows(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-template-rows: 123;
          }
        }
      }
    }

    @include it('order(123, $sm)') {
      @include assert {
        @include output {
          @include order(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            order: 123;
          }
        }
      }
    }

    @include it('margin(123, $sm)') {
      @include assert {
        @include output {
          @include margin(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin: 123;
          }
        }
      }
    }

    @include it('margin-inline-start(123, $sm)') {
      @include assert {
        @include output {
          @include margin-inline-start(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-inline-start: 123;
          }
        }
      }
    }

    @include it('margin-inline-end(123, $sm)') {
      @include assert {
        @include output {
          @include margin-inline-end(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-inline-end: 123;
          }
        }
      }
    }

    @include it('margin-top(123, $sm)') {
      @include assert {
        @include output {
          @include margin-top(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-top: 123;
          }
        }
      }
    }

    @include it('margin-right(123, $sm)') {
      @include assert {
        @include output {
          @include margin-right(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-right: 123;
          }
        }
      }
    }

    @include it('margin-bottom(123, $sm)') {
      @include assert {
        @include output {
          @include margin-bottom(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-bottom: 123;
          }
        }
      }
    }

    @include it('margin-left(123, $sm)') {
      @include assert {
        @include output {
          @include margin-left(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-left: 123;
          }
        }
      }
    }

    @include it('padding(123, $sm)') {
      @include assert {
        @include output {
          @include padding(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding: 123;
          }
        }
      }
    }

    @include it('padding-inline-start(123, $sm)') {
      @include assert {
        @include output {
          @include padding-inline-start(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-inline-start: 123;
          }
        }
      }
    }

    @include it('padding-inline-end(123, $sm)') {
      @include assert {
        @include output {
          @include padding-inline-end(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-inline-end: 123;
          }
        }
      }
    }

    @include it('padding-top(123, $sm)') {
      @include assert {
        @include output {
          @include padding-top(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-top: 123;
          }
        }
      }
    }

    @include it('padding-right(123, $sm)') {
      @include assert {
        @include output {
          @include padding-right(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-right: 123;
          }
        }
      }
    }

    @include it('padding-bottom(123, $sm)') {
      @include assert {
        @include output {
          @include padding-bottom(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-bottom: 123;
          }
        }
      }
    }

    @include it('padding-left(123, $sm)') {
      @include assert {
        @include output {
          @include padding-left(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-left: 123;
          }
        }
      }
    }

    @include it('height(123, $sm)') {
      @include assert {
        @include output {
          @include height(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            height: 123;
          }
        }
      }
    }

    @include it('max-height(123, $sm)') {
      @include assert {
        @include output {
          @include max-height(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            max-height: 123;
          }
        }
      }
    }

    @include it('max-width(123, $sm)') {
      @include assert {
        @include output {
          @include max-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            max-width: 123;
          }
        }
      }
    }

    @include it('min-height(123, $sm)') {
      @include assert {
        @include output {
          @include min-height(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            min-height: 123;
          }
        }
      }
    }

    @include it('min-width(123, $sm)') {
      @include assert {
        @include output {
          @include min-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            min-width: 123;
          }
        }
      }
    }

    @include it('width(123, $sm)') {
      @include assert {
        @include output {
          @include width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            width: 123;
          }
        }
      }
    }

    @include it('font-family(123, $sm)') {
      @include assert {
        @include output {
          @include font-family(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-family: 123;
          }
        }
      }
    }

    @include it('font-weight(123, $sm)') {
      @include assert {
        @include output {
          @include font-weight(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-weight: 123;
          }
        }
      }
    }

    @include it('letter-spacing(123, $sm)') {
      @include assert {
        @include output {
          @include letter-spacing(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            letter-spacing: 123;
          }
        }
      }
    }

    @include it('overflow(123, $sm)') {
      @include assert {
        @include output {
          @include overflow(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overflow: 123;
          }
        }
      }
    }

    @include it('overflow-x(123, $sm)') {
      @include assert {
        @include output {
          @include overflow-x(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overflow-x: 123;
          }
        }
      }
    }

    @include it('overflow-y(123, $sm)') {
      @include assert {
        @include output {
          @include overflow-y(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overflow-y: 123;
          }
        }
      }
    }

    @include it('clip(123, $sm)') {
      @include assert {
        @include output {
          @include clip(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            clip: 123;
          }
        }
      }
    }

    @include it('display(123, $sm)') {
      @include assert {
        @include output {
          @include display(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            display: 123;
          }
        }
      }
    }

    @include it('line-height(123, $sm)') {
      @include assert {
        @include output {
          @include line-height(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            line-height: 123;
          }
        }
      }
    }

    @include it('list-style-image(123, $sm)') {
      @include assert {
        @include output {
          @include list-style-image(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            list-style-image: 123;
          }
        }
      }
    }

    @include it('list-style-type(123, $sm)') {
      @include assert {
        @include output {
          @include list-style-type(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            list-style-type: 123;
          }
        }
      }
    }

    @include it('font-size(123, $sm)') {
      @include assert {
        @include output {
          @include font-size(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-size: 123;
          }
        }
      }
    }

    @include it('text-decoration-color(123, $sm)') {
      @include assert {
        @include output {
          @include text-decoration-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-decoration-color: 123;
          }
        }
      }
    }

    @include it('text-decoration-thickness(123, $sm)') {
      @include assert {
        @include output {
          @include text-decoration-thickness(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-decoration-thickness: 123;
          }
        }
      }
    }

    @include it('text-indent(123, $sm)') {
      @include assert {
        @include output {
          @include text-indent(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-indent: 123;
          }
        }
      }
    }

    @include it('text-underline-offset(123, $sm)') {
      @include assert {
        @include output {
          @include text-underline-offset(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-underline-offset: 123;
          }
        }
      }
    }

    @include it('vertical-align(123, $sm)') {
      @include assert {
        @include output {
          @include vertical-align(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            vertical-align: 123;
          }
        }
      }
    }

    @include it('background-color(123, $sm)') {
      @include assert {
        @include output {
          @include background-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-color: 123;
          }
        }
      }
    }

    @include it('background-size(123, $sm)') {
      @include assert {
        @include output {
          @include background-size(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-size: 123;
          }
        }
      }
    }

    @include it('background-position(123, $sm)') {
      @include assert {
        @include output {
          @include background-position(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-position: 123;
          }
        }
      }
    }

    @include it('background-image(123, $sm)') {
      @include assert {
        @include output {
          @include background-image(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-image: 123;
          }
        }
      }
    }

    @include it('border-color(123, $sm)') {
      @include assert {
        @include output {
          @include border-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-color: 123;
          }
        }
      }
    }

    @include it('border-width(123, $sm)') {
      @include assert {
        @include output {
          @include border-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-width: 123;
          }
        }
      }
    }

    @include it('border-left-color(123, $sm)') {
      @include assert {
        @include output {
          @include border-left-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-left-color: 123;
          }
        }
      }
    }

    @include it('border-left-width(123, $sm)') {
      @include assert {
        @include output {
          @include border-left-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-left-width: 123;
          }
        }
      }
    }

    @include it('border-right-color(123, $sm)') {
      @include assert {
        @include output {
          @include border-right-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-right-color: 123;
          }
        }
      }
    }

    @include it('border-right-width(123, $sm)') {
      @include assert {
        @include output {
          @include border-right-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-right-width: 123;
          }
        }
      }
    }

    @include it('border-top-color(123, $sm)') {
      @include assert {
        @include output {
          @include border-top-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-top-color: 123;
          }
        }
      }
    }

    @include it('border-top-width(123, $sm)') {
      @include assert {
        @include output {
          @include border-top-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-top-width: 123;
          }
        }
      }
    }

    @include it('border-bottom-color(123, $sm)') {
      @include assert {
        @include output {
          @include border-bottom-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-bottom-color: 123;
          }
        }
      }
    }

    @include it('border-bottom-width(123, $sm)') {
      @include assert {
        @include output {
          @include border-bottom-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-bottom-width: 123;
          }
        }
      }
    }

    @include it('border-inline-start-color(123, $sm)') {
      @include assert {
        @include output {
          @include border-inline-start-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-inline-start-color: 123;
          }
        }
      }
    }

    @include it('border-inline-start-width(123, $sm)') {
      @include assert {
        @include output {
          @include border-inline-start-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-inline-start-width: 123;
          }
        }
      }
    }

    @include it('border-inline-end-color(123, $sm)') {
      @include assert {
        @include output {
          @include border-inline-end-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-inline-end-color: 123;
          }
        }
      }
    }

    @include it('border-inline-end-width(123, $sm)') {
      @include assert {
        @include output {
          @include border-inline-end-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-inline-end-width: 123;
          }
        }
      }
    }

    @include it('border-radius(123, $sm)') {
      @include assert {
        @include output {
          @include border-radius(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-radius: 123;
          }
        }
      }
    }

    @include it('border-start-start-radius(123, $sm)') {
      @include assert {
        @include output {
          @include border-start-start-radius(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-start-start-radius: 123;
          }
        }
      }
    }

    @include it('border-end-start-radius(123, $sm)') {
      @include assert {
        @include output {
          @include border-end-start-radius(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-end-start-radius: 123;
          }
        }
      }
    }

    @include it('border-start-end-radius(123, $sm)') {
      @include assert {
        @include output {
          @include border-start-end-radius(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-start-end-radius: 123;
          }
        }
      }
    }

    @include it('border-end-end-radius(123, $sm)') {
      @include assert {
        @include output {
          @include border-end-end-radius(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-end-end-radius: 123;
          }
        }
      }
    }

    @include it('border-top-left-radius(123, $sm)') {
      @include assert {
        @include output {
          @include border-top-left-radius(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-top-left-radius: 123;
          }
        }
      }
    }

    @include it('border-top-right-radius(123, $sm)') {
      @include assert {
        @include output {
          @include border-top-right-radius(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-top-right-radius: 123;
          }
        }
      }
    }

    @include it('border-bottom-right-radius(123, $sm)') {
      @include assert {
        @include output {
          @include border-bottom-right-radius(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-bottom-right-radius: 123;
          }
        }
      }
    }

    @include it('border-bottom-left-radius(123, $sm)') {
      @include assert {
        @include output {
          @include border-bottom-left-radius(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-bottom-left-radius: 123;
          }
        }
      }
    }

    @include it('outline-color(123, $sm)') {
      @include assert {
        @include output {
          @include outline-color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline-color: 123;
          }
        }
      }
    }

    @include it('outline-width(123, $sm)') {
      @include assert {
        @include output {
          @include outline-width(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline-width: 123;
          }
        }
      }
    }

    @include it('outline-offset(123, $sm)') {
      @include assert {
        @include output {
          @include outline-offset(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline-offset: 123;
          }
        }
      }
    }

    @include it('box-shadow(123, $sm)') {
      @include assert {
        @include output {
          @include box-shadow(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            box-shadow: 123;
          }
        }
      }
    }

    @include it('opacity(123, $sm)') {
      @include assert {
        @include output {
          @include opacity(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            opacity: 123;
          }
        }
      }
    }

    @include it('backdrop-filter(123, $sm)') {
      @include assert {
        @include output {
          @include backdrop-filter(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            backdrop-filter: 123;
          }
        }
      }
    }

    @include it('filter(123, $sm)') {
      @include assert {
        @include output {
          @include filter(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            filter: 123;
          }
        }
      }
    }

    @include it('box-decoration-break(123, $sm)') {
      @include assert {
        @include output {
          @include box-decoration-break(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            box-decoration-break: 123;
          }
        }
      }
    }

    @include it('box-sizing(123, $sm)') {
      @include assert {
        @include output {
          @include box-sizing(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            box-sizing: 123;
          }
        }
      }
    }

    @include it('break-after(123, $sm)') {
      @include assert {
        @include output {
          @include break-after(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            break-after: 123;
          }
        }
      }
    }

    @include it('break-before(123, $sm)') {
      @include assert {
        @include output {
          @include break-before(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            break-before: 123;
          }
        }
      }
    }

    @include it('break-inside(123, $sm)') {
      @include assert {
        @include output {
          @include break-inside(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            break-inside: 123;
          }
        }
      }
    }

    @include it('clear(123, $sm)') {
      @include assert {
        @include output {
          @include clear(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            clear: 123;
          }
        }
      }
    }

    @include it('float(123, $sm)') {
      @include assert {
        @include output {
          @include float(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            float: 123;
          }
        }
      }
    }

    @include it('isolation(123, $sm)') {
      @include assert {
        @include output {
          @include isolation(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            isolation: 123;
          }
        }
      }
    }

    @include it('object-fit(123, $sm)') {
      @include assert {
        @include output {
          @include object-fit(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            object-fit: 123;
          }
        }
      }
    }

    @include it('overscroll-behavior(123, $sm)') {
      @include assert {
        @include output {
          @include overscroll-behavior(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overscroll-behavior: 123;
          }
        }
      }
    }

    @include it('overscroll-behavior-y(123, $sm)') {
      @include assert {
        @include output {
          @include overscroll-behavior-y(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overscroll-behavior-y: 123;
          }
        }
      }
    }

    @include it('overscroll-behavior-x(123, $sm)') {
      @include assert {
        @include output {
          @include overscroll-behavior-x(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overscroll-behavior-x: 123;
          }
        }
      }
    }

    @include it('position(123, $sm)') {
      @include assert {
        @include output {
          @include position(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            position: 123;
          }
        }
      }
    }

    @include it('visibility(123, $sm)') {
      @include assert {
        @include output {
          @include visibility(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            visibility: 123;
          }
        }
      }
    }

    @include it('align-content(123, $sm)') {
      @include assert {
        @include output {
          @include align-content(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            align-content: 123;
          }
        }
      }
    }

    @include it('align-items(123, $sm)') {
      @include assert {
        @include output {
          @include align-items(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            align-items: 123;
          }
        }
      }
    }

    @include it('align-self(123, $sm)') {
      @include assert {
        @include output {
          @include align-self(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            align-self: 123;
          }
        }
      }
    }

    @include it('flex-direction(123, $sm)') {
      @include assert {
        @include output {
          @include flex-direction(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-direction: 123;
          }
        }
      }
    }

    @include it('grid-auto-flow(123, $sm)') {
      @include assert {
        @include output {
          @include grid-auto-flow(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-auto-flow: 123;
          }
        }
      }
    }

    @include it('justify-content(123, $sm)') {
      @include assert {
        @include output {
          @include justify-content(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            justify-content: 123;
          }
        }
      }
    }

    @include it('justify-items(123, $sm)') {
      @include assert {
        @include output {
          @include justify-items(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            justify-items: 123;
          }
        }
      }
    }

    @include it('justify-self(123, $sm)') {
      @include assert {
        @include output {
          @include justify-self(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            justify-self: 123;
          }
        }
      }
    }

    @include it('place-content(123, $sm)') {
      @include assert {
        @include output {
          @include place-content(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            place-content: 123;
          }
        }
      }
    }

    @include it('place-items(123, $sm)') {
      @include assert {
        @include output {
          @include place-items(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            place-items: 123;
          }
        }
      }
    }

    @include it('place-self(123, $sm)') {
      @include assert {
        @include output {
          @include place-self(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            place-self: 123;
          }
        }
      }
    }

    @include it('font-style(123, $sm)') {
      @include assert {
        @include output {
          @include font-style(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-style: 123;
          }
        }
      }
    }

    @include it('font-variant-numeric(123, $sm)') {
      @include assert {
        @include output {
          @include font-variant-numeric(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-variant-numeric: 123;
          }
        }
      }
    }

    @include it('hyphens(123, $sm)') {
      @include assert {
        @include output {
          @include hyphens(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            hyphens: 123;
          }
        }
      }
    }

    @include it('list-style-position(123, $sm)') {
      @include assert {
        @include output {
          @include list-style-position(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            list-style-position: 123;
          }
        }
      }
    }

    @include it('text-align(123, $sm)') {
      @include assert {
        @include output {
          @include text-align(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-align: 123;
          }
        }
      }
    }

    @include it('text-decoration-line(123, $sm)') {
      @include assert {
        @include output {
          @include text-decoration-line(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-decoration-line: 123;
          }
        }
      }
    }

    @include it('text-decoration-style(123, $sm)') {
      @include assert {
        @include output {
          @include text-decoration-style(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-decoration-style: 123;
          }
        }
      }
    }

    @include it('text-overflow(123, $sm)') {
      @include assert {
        @include output {
          @include text-overflow(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-overflow: 123;
          }
        }
      }
    }

    @include it('white-space(123, $sm)') {
      @include assert {
        @include output {
          @include white-space(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            white-space: 123;
          }
        }
      }
    }

    @include it('text-transform(123, $sm)') {
      @include assert {
        @include output {
          @include text-transform(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-transform: 123;
          }
        }
      }
    }

    @include it('overflow-wrap(123, $sm)') {
      @include assert {
        @include output {
          @include overflow-wrap(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overflow-wrap: 123;
          }
        }
      }
    }

    @include it('word-break(123, $sm)') {
      @include assert {
        @include output {
          @include word-break(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            word-break: 123;
          }
        }
      }
    }

    @include it('text-wrap(123, $sm)') {
      @include assert {
        @include output {
          @include text-wrap(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-wrap: 123;
          }
        }
      }
    }

    @include it('background-attachment(123, $sm)') {
      @include assert {
        @include output {
          @include background-attachment(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-attachment: 123;
          }
        }
      }
    }

    @include it('background-clip(123, $sm)') {
      @include assert {
        @include output {
          @include background-clip(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-clip: 123;
          }
        }
      }
    }

    @include it('background-origin(123, $sm)') {
      @include assert {
        @include output {
          @include background-origin(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-origin: 123;
          }
        }
      }
    }

    @include it('background-repeat(123, $sm)') {
      @include assert {
        @include output {
          @include background-repeat(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-repeat: 123;
          }
        }
      }
    }

    @include it('border-style(123, $sm)') {
      @include assert {
        @include output {
          @include border-style(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-style: 123;
          }
        }
      }
    }

    @include it('outline-style(123, $sm)') {
      @include assert {
        @include output {
          @include outline-style(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline-style: 123;
          }
        }
      }
    }

    @include it('background-blend-mode(123, $sm)') {
      @include assert {
        @include output {
          @include background-blend-mode(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-blend-mode: 123;
          }
        }
      }
    }

    @include it('mix-blend-mode(123, $sm)') {
      @include assert {
        @include output {
          @include mix-blend-mode(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            mix-blend-mode: 123;
          }
        }
      }
    }

    @include it('caption-side(123, $sm)') {
      @include assert {
        @include output {
          @include caption-side(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            caption-side: 123;
          }
        }
      }
    }

    @include it('table-layout(123, $sm)') {
      @include assert {
        @include output {
          @include table-layout(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            table-layout: 123;
          }
        }
      }
    }

    @include it('appearance(123, $sm)') {
      @include assert {
        @include output {
          @include appearance(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            appearance: 123;
          }
        }
      }
    }

    @include it('pointer-events(123, $sm)') {
      @include assert {
        @include output {
          @include pointer-events(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            pointer-events: 123;
          }
        }
      }
    }

    @include it('scroll-behavior(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-behavior(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-behavior: 123;
          }
        }
      }
    }

    @include it('scroll-snap-align(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-snap-align(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-snap-align: 123;
          }
        }
      }
    }

    @include it('scroll-snap-stop(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-snap-stop(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-snap-stop: 123;
          }
        }
      }
    }

    @include it('scroll-snap-type(123, $sm)') {
      @include assert {
        @include output {
          @include scroll-snap-type(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-snap-type: 123;
          }
        }
      }
    }

    @include it('touch-action(123, $sm)') {
      @include assert {
        @include output {
          @include touch-action(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            touch-action: 123;
          }
        }
      }
    }

    @include it('user-select(123, $sm)') {
      @include assert {
        @include output {
          @include user-select(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            user-select: 123;
          }
        }
      }
    }

    @include it('forced-color-adjust(123, $sm)') {
      @include assert {
        @include output {
          @include forced-color-adjust(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            forced-color-adjust: 123;
          }
        }
      }
    }

    @include it('color(123, $sm)') {
      @include assert {
        @include output {
          @include color(123, $sm);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            color: 123;
          }
        }
      }
    }
  }
}
