@use "../../setting" as *;

$BackgroundsSize: (
  "bg-auto": auto,
  "bg-cover": cover,
  "bg-contain": contain,
);

@if $Basic {
  @each $key, $value in $BackgroundsSize {
    /*x
    @mixin #{$key} {
      @include background-size(#{$value});
    }
    x*/
  }
}

@if $Breakpoint {
  @each $rwd in $rwdBox {
    @each $key, $value in $BackgroundsSize {
      /*x
      @mixin #{$rwd}\:#{$key} {
        @include background-size(#{$value}, $#{$rwd});
      }
      x*/
    }
  }
}

@if $Custom {
  /*x
  @mixin bg-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include background-color($v);
    }

    @else if list.nth($v, 1)==length {
      @include background-size(list.set-nth($v, 1, #/*x{""})); // remove the token "length" to identify background-size
    }

    @else if list.index(top right bottom left center, $v) or meta.type-of($v)==number or meta.type-of($v)==list {
      @include background-position($v);
    }

    @else {
      @include background-image($v);
    }
  }
  x*/

  @each $rwd in $rwdBox {
    /*x
    @mixin #{$rwd}\:bg-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include background-color($v, $#{$rwd});
      }

      @else if list.nth($v, 1)==length {
        @include background-size(list.set-nth($v, 1, #/*x{""}), $#{$rwd}); // remove the token "length" to identify background-size
      }

      @else if list.index(top right bottom left center, $v) or meta.type-of($v)==number or meta.type-of($v)==list {
        @include background-position($v, $#{$rwd});
      }

      @else {
        @include background-image($v, $#{$rwd});
      }
    }
    x*/
  }
}
