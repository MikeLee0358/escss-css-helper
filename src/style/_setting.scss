// test in my MacBook Air 2020, intel Core 3
// 0: update time: 2.5s <5.45 MB>. all basic classes & @media in tailwind.
// 1: update time 1s <1.92 MB>. no Margin/Padding、ScrollMargin/ScrollPadding、color, using arbitrary values to instead.
// 2: update time 0.7s <972 KB>. using arbitrary values to instead RWD (if there is an arbitrary value).

// Controlling render output
$isBasic: true; // Tailwind classes
$isRwd: true; // Tailwind classes which have media queries
$isCustom: true; // Tailwind classes which have arbitrary values
$isVanilla: false;

$rwdBox: 'sm', 'md', 'lg', 'xl', '\\2xl';
$opacityColor: (
  '0': 0,
  '5': 0.5,
  '10': 0.1,
  '15': 0.15,
  '20': 0.2,
  '25': 0.25,
  '30': 0.3,
  '35': 0.35,
  '40': 0.4,
  '45': 0.45,
  '50': 0.5,
  '55': 0.55,
  '60': 0.6,
  '65': 0.65,
  '70': 0.7,
  '75': 0.75,
  '80': 0.8,
  '85': 0.85,
  '90': 0.9,
  '95': 0.95,
  '100': 1,
);

// internal helper function
/*x
// c stands for color (file size concern)
@function c($token, $v) {
  @if not math.is-unitless($v) {
    // If use / outside of calc() after v1.33, it will pop out warnings in the terminal,
    // the better way is forbidden % and provides the color.change() method
    @error "$v: Expected #/*x{$v / 100%} not #/*x{$v}, backward compatibility concern";
  }

  // color.change $alpha only accepts 0 ~ 1
  @return color.change($token, $alpha: $v);
}

@function get_box-shadow() {
  $tw-ring-offset-shadow: $tw-ring-inset 0 0 0 $tw-ring-offset-width $tw-ring-offset-color;
  $tw-ring-shadow: $tw-ring-inset 0 0 0 $tw-dummy-ring-width $tw-ring-color;
  $tw-shadow: null;

  @if list.index(shadow md lg xl, $tw-dummy-shadow-token) {
    $tw-shadow: list.nth($tw-dummy-shadow-width, 1) $tw-shadow-color, list.nth($tw-dummy-shadow-width, 2) $tw-shadow-color;
  }

  @else if $tw-dummy-shadow-token ==inner {
    $tw-shadow: inset $tw-dummy-shadow-width $tw-shadow-color;
  }

  @else {
    $tw-shadow: $tw-dummy-shadow-width $tw-shadow-color;
  }

  @return $tw-ring-offset-shadow, $tw-ring-shadow, $tw-shadow;
}

@function get_transform() {
  @return translate($tw-translate-x, $tw-translate-y) rotate($tw-rotate) skewX($tw-skew-x) skewY($tw-skew-y) scaleX($tw-scale-x) scaleY($tw-scale-y);
}

@function get_filter() {
  @return $tw-blur $tw-brightness $tw-contrast $tw-grayscale $tw-hue-rotate $tw-invert $tw-saturate $tw-sepia $tw-drop-shadow;
}

@function get_backdrop-filter() {
  @return $tw-backdrop-blur $tw-backdrop-brightness $tw-backdrop-contrast $tw-backdrop-grayscale $tw-backdrop-hue-rotate $tw-backdrop-invert $tw-backdrop-opacity $tw-backdrop-saturate $tw-backdrop-sepia;
}

@function get_linear-gradient() {
  @if $tw-dummy-gradient-direction==none {
    @return none;
  }

  @else if $tw-gradient-via==null {
    @return linear-gradient($tw-dummy-gradient-direction, $tw-gradient-from $tw-gradient-from-position, $tw-gradient-to $tw-gradient-to-position );
  }

  @else {
    @return linear-gradient($tw-dummy-gradient-direction, $tw-gradient-from $tw-gradient-from-position, $tw-gradient-via $tw-gradient-via-position, $tw-gradient-to $tw-gradient-to-position );
  }
}
x*/
