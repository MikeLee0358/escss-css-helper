@use '../../setting' as *;

$RingOffsetWidth: (
  'ring-offset-0': 0px,
  'ring-offset-1': 1px,
  'ring-offset-2': 2px,
  'ring-offset-4': 4px,
  'ring-offset-8': 8px,
);

@if $Basic {
  @each $key, $value in $RingOffsetWidth {
    /*x
    @mixin #{$key} {
      @if $tw-dummy-not-match--ring-offset-width {
        @error ("「 ring-offset-* 」should go before「 ring-* (to have same behavior as tailwind)");
      }

      $tw-ring-offset-width: #{$value} !global;
      @include box-shadow(get_box-shadow());
    }
    x*/
  }
}

@if $Breakpoint {
  @each $rwd in $rwdBox {
    @each $key, $value in $RingOffsetWidth {
      /*x
      @mixin #{$rwd}\:#{$key} {
        @if $tw-dummy-not-match--ring-offset-width {
          @error ("「 ring-offset-* 」should go before「 ring-* (to have same behavior as tailwind)");
        }

        $tw-ring-offset-width: #{$value} !global;
        @include box-shadow(get_box-shadow(), $#{$rwd});
      }
      x*/
    }
  }
}

@if $Custom {
  /*x
  @mixin ring-offset-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      $tw-ring-offset-color: $v !global;
    }

    @else {
      @if $tw-dummy-not-match--ring-offset-width {
        @error ("「 ring-offset-* 」should go before「 ring-* (to have same behavior as tailwind)");
      }

      $tw-ring-offset-width: $v !global;
    }

    @include box-shadow(get_box-shadow());
  }
  x*/

  @each $rwd in $rwdBox {
    /*x
    @mixin #{$rwd}\:ring-offset-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        $tw-ring-offset-color: $v !global;
      }

      @else {
        @if $tw-dummy-not-match--ring-offset-width {
          @error ("「 ring-offset-* 」should go before「 ring-* (to have same behavior as tailwind)");
        }

        $tw-ring-offset-width: $v !global;
      }

      @include box-shadow(get_box-shadow(), $#{$rwd});
    }
    x*/
  }
}
