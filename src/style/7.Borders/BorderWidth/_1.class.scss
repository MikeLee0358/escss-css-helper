@use "../../setting" as *;

$BorderWidth: (
  "-0": 0px,
  null: 1px,
  "-2": 2px,
  "-4": 4px,
  "-8": 8px,
);

@if $Basic {
  @each $key, $value in $BorderWidth {
    /*x
    @mixin border#{$key} {
      @include border-width(#{$value});
    }

    @mixin border-x#{$key} {
      @include border-left-width(#{$value});
      @include border-right-width(#{$value});
    }

    @mixin border-y#{$key} {
      @include border-top-width(#{$value});
      @include border-bottom-width(#{$value});
    }

    @mixin border-s#{$key} {
      @include border-inline-start-width(#{$value});
    }

    @mixin border-e#{$key} {
      @include border-inline-end-width(#{$value});
    }

    @mixin border-t#{$key} {
      @include border-top-width(#{$value});
    }

    @mixin border-r#{$key} {
      @include border-right-width(#{$value});
    }

    @mixin border-b#{$key} {
      @include border-bottom-width(#{$value});
    }

    @mixin border-l#{$key} {
      @include border-left-width(#{$value});
    }
    x*/
  }
}

@if $Breakpoint {
  @each $rwd in $rwdBox {
    @each $key, $value in $BorderWidth {
      /*x
      @mixin #{$rwd}\:border#{$key} {
        @include border-width(#{$value}, $#{$rwd});
      }

      @mixin #{$rwd}\:border-x#{$key} {
        @include #{$rwd} {
          @include border-left-width(#{$value});
          @include border-right-width(#{$value});
        }
      }

      @mixin #{$rwd}\:border-y#{$key} {
        @include #{$rwd} {
          @include border-top-width(#{$value});
          @include border-bottom-width(#{$value});
        }
      }

      @mixin #{$rwd}\:border-s#{$key} {
        @include border-inline-start-width(#{$value}, $#{$rwd});
      }

      @mixin #{$rwd}\:border-e#{$key} {
        @include border-inline-end-width(#{$value}, $#{$rwd});
      }

      @mixin #{$rwd}\:border-t#{$key} {
        @include border-top-width(#{$value}, $#{$rwd});
      }

      @mixin #{$rwd}\:border-r#{$key} {
        @include border-right-width(#{$value}, $#{$rwd});
      }

      @mixin #{$rwd}\:border-b#{$key} {
        @include border-bottom-width(#{$value}, $#{$rwd});
      }

      @mixin #{$rwd}\:border-l#{$key} {
        @include border-left-width(#{$value}, $#{$rwd});
      }
      x*/
    }
  }
}

@if $Custom {
  /*x
  @mixin border-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include border-color($v);
    }

    @else {
      @include border-width($v);
    }
  }

  @mixin border-x-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include border-left-color($v);
      @include border-right-color($v);
    }

    @else {
      @include border-left-width($v);
      @include border-right-width($v);
    }
  }

  @mixin border-y-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include border-top-color($v);
      @include border-bottom-color($v);
    }

    @else {
      @include border-top-width($v);
      @include border-bottom-width($v);
    }
  }

  @mixin border-s-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include border-inline-start-color($v);
    }

    @else {
      @include border-inline-start-width($v);
    }
  }

  @mixin border-e-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include border-inline-end-color($v);
    }

    @else {
      @include border-inline-end-width($v);
    }
  }

  @mixin border-t-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include border-top-color($v);
    }

    @else {
      @include border-top-width($v);
    }
  }

  @mixin border-r-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include border-right-color($v);
    }

    @else {
      @include border-right-width($v);
    }
  }

  @mixin border-b-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include border-bottom-color($v);
    }

    @else {
      @include border-bottom-width($v);
    }
  }

  @mixin border-l-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      @include border-left-color($v);
    }

    @else {
      @include border-left-width($v);
    }
  }
  x*/

  @each $rwd in $rwdBox {
    /*x
    @mixin #{$rwd}\:border-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include border-color($v, $#{$rwd});
      }
  
      @else {
        @include border-width($v, $#{$rwd});
      }
    }

    @mixin #{$rwd}\:border-x-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include #{$rwd} {
          @include border-left-color($v);
          @include border-right-color($v);
        }
      }

      @else {
        @include #{$rwd} {
          @include border-left-width($v);
          @include border-right-width($v);
        }
      }
    }

    @mixin #{$rwd}\:border-y-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include #{$rwd} {
          @include border-top-color($v);
          @include border-bottom-color($v);
        }
      }

      @else {
        @include #{$rwd} {
          @include border-top-width($v);
          @include border-bottom-width($v);
        }
      }
    }

    @mixin #{$rwd}\:border-s-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include border-inline-start-color($v, $#{$rwd});
      }

      @else {
        @include border-inline-start-width($v, $#{$rwd});
      }
    }

    @mixin #{$rwd}\:border-e-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include border-inline-end-color($v, $#{$rwd});
      }

      @else {
        @include border-inline-end-width($v, $#{$rwd});
      }
    }

    @mixin #{$rwd}\:border-t-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include border-top-color($v, $#{$rwd});
      }

      @else {
        @include border-top-width($v, $#{$rwd});
      }
    }

    @mixin #{$rwd}\:border-r-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include border-right-color($v, $#{$rwd});
      }

      @else {
        @include border-right-width($v, $#{$rwd});
      }
    }

    @mixin #{$rwd}\:border-b-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include border-bottom-color($v, $#{$rwd});
      }

      @else {
        @include border-bottom-width($v, $#{$rwd});
      }
    }

    @mixin #{$rwd}\:border-l-($v) {
      @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
        @include border-left-color($v, $#{$rwd});
      }

      @else {
        @include border-left-width($v, $#{$rwd});
      }
    }
    x*/
  }
}
